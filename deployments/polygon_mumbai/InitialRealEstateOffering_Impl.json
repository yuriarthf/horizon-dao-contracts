{
  "address": "0x3B5A64cD8B037286b11c533e7bec68DC154f67Da",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_commitAmount",
          "type": "uint256"
        }
      ],
      "name": "CashBack",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_purchasedAmount",
          "type": "uint256"
        }
      ],
      "name": "Commit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_listingOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_start",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_end",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_unitPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_targetFunding",
          "type": "uint256"
        }
      ],
      "name": "CreateIRO",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_listingOwnerAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_treasuryFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_operationFee",
          "type": "uint256"
        }
      ],
      "name": "FundsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_realEstateId",
          "type": "uint256"
        }
      ],
      "name": "RealEstateCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "SetBaseCurrency",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "SetTreasury",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountToPurchase",
          "type": "uint256"
        }
      ],
      "name": "commit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "commits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_listingOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_treasuryFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_operationFee",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_duration",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_assetPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_startOffset",
          "type": "uint64"
        }
      ],
      "name": "createIRO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currency",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        }
      ],
      "name": "currentTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        }
      ],
      "name": "expectedTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "expectedTotalSupply_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        }
      ],
      "name": "getIRO",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "listingOwner",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "start",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "end",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "treasuryFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "operationFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetFunding",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalFunding",
              "type": "uint256"
            }
          ],
          "internalType": "struct InitialRealEstateOffering.IRO",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        }
      ],
      "name": "getStatus",
      "outputs": [
        {
          "internalType": "enum InitialRealEstateOffering.Status",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_realEstateNft",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "iroLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "now64",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountToPurchase",
          "type": "uint256"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "realEstateId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realEstateNft",
      "outputs": [
        {
          "internalType": "contract IRealEstateERC1155",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        }
      ],
      "name": "remainingTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "setCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        }
      ],
      "name": "targetCapInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assetPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "treasuryFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "operationFee",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "treasuryFeeBps",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "operationFeeBps",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "userAmountAndShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "share",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe69fb98e3e7bc394ff1de6394cdc376d72555af88ae9de5a7eec8f366f3260d0",
  "receipt": {
    "to": null,
    "from": "0x39a242169BA3B28623E6d235A4Bdd46287d4bae3",
    "contractAddress": "0x3B5A64cD8B037286b11c533e7bec68DC154f67Da",
    "transactionIndex": 4,
    "gasUsed": "2237535",
    "logsBloom": "0x
    "blockHash": "0x92ae187d2874821d4b5ac16c7774e3f02d85408b4d392f5b5a76d2e7ca6ea82f",
    "transactionHash": "0xe69fb98e3e7bc394ff1de6394cdc376d72555af88ae9de5a7eec8f366f3260d0",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 34065475,
        "transactionHash": "0xe69fb98e3e7bc394ff1de6394cdc376d72555af88ae9de5a7eec8f366f3260d0",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000039a242169ba3b28623e6d235a4bdd46287d4bae3",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000d0315641266670000000000000000000000000000000000000000000000000c8d991b9066b047000000000000000000000000000000000000000000002f986a00b0b1f436fdc10000000000000000000000000000000000000000000000000c8096062c5449e0000000000000000000000000000000000000000000002f986a0db3c758496428",
        "logIndex": 18,
        "blockHash": "0x92ae187d2874821d4b5ac16c7774e3f02d85408b4d392f5b5a76d2e7ca6ea82f"
      }
    ],
    "blockNumber": 34065475,
    "cumulativeGasUsed": "3005895",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2831fa300ab05e3c9bfab191d86cab1c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_commitAmount\",\"type\":\"uint256\"}],\"name\":\"CashBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_purchasedAmount\",\"type\":\"uint256\"}],\"name\":\"Commit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_listingOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_start\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_end\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_targetFunding\",\"type\":\"uint256\"}],\"name\":\"CreateIRO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_listingOwnerAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operationFee\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_realEstateId\",\"type\":\"uint256\"}],\"name\":\"RealEstateCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"SetBaseCurrency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"SetTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToPurchase\",\"type\":\"uint256\"}],\"name\":\"commit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"commits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_listingOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_operationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_duration\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_assetPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_startOffset\",\"type\":\"uint64\"}],\"name\":\"createIRO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"}],\"name\":\"currentTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"}],\"name\":\"expectedTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedTotalSupply_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"}],\"name\":\"getIRO\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"listingOwner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"start\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"end\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"operationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetFunding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFunding\",\"type\":\"uint256\"}],\"internalType\":\"struct InitialRealEstateOffering.IRO\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum InitialRealEstateOffering.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_realEstateNft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iroLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"now64\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToPurchase\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"realEstateId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realEstateNft\",\"outputs\":[{\"internalType\":\"contract IRealEstateERC1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"}],\"name\":\"remainingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"setCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"}],\"name\":\"targetCapInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assetPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"operationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"treasuryFeeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"operationFeeBps\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userAmountAndShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"share\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Horizon DAO (Yuri Fernandes)\",\"events\":{\"CashBack(uint256,address,address,uint256)\":{\"details\":\"Emitted when an investors withdraw it's funds after an IRO fails\"},\"Commit(uint256,address,address,uint256,uint256)\":{\"details\":\"Emitted when a new Commit is made to an IRO\"},\"CreateIRO(uint256,address,address,uint64,uint64,uint256,uint256)\":{\"details\":\"Emitted when a new IRO is created\"},\"FundsWithdrawn(uint256,address,uint256,uint256,uint256)\":{\"details\":\"Emitted when funds from an IRO are withdrawn\"},\"RealEstateCreated(uint256,uint256)\":{\"details\":\"Emitted when a new real estate token ID is created\"},\"SetBaseCurrency(address,address)\":{\"details\":\"Emitted when a new currency is set\"},\"SetTreasury(address,address)\":{\"details\":\"Emitted when the Treasury contract is set\"},\"TokensClaimed(uint256,address,address,uint256)\":{\"details\":\"Emitted when tokens are claimed by investors\"}},\"kind\":\"dev\",\"methods\":{\"claim(uint256,address)\":{\"params\":{\"_iroId\":\"ID of the IRO\",\"_to\":\"Address to send the claimed tokens\"}},\"commit(uint256,uint256)\":{\"params\":{\"_amountToPurchase\":\"Amount of IRO tokens to purchase\",\"_iroId\":\"ID of the IRO\"}},\"createIRO(address,uint256,uint256,uint64,uint256,uint256,uint64)\":{\"details\":\"Create new IRO\",\"params\":{\"_assetPrice\":\"Price of the asset\",\"_duration\":\"Duration of the IRO in seconds\",\"_listingOwner\":\"Listing owner address\",\"_operationFee\":\"Operation fee in the IRO currency\",\"_startOffset\":\"Time before IRO begins\",\"_treasuryFee\":\"Treasury fee in absolute value\",\"_unitPrice\":\"Price per unit of IRO token in the IRO currency\"}},\"currentTotalSupply(uint256)\":{\"params\":{\"_iroId\":\"ID of the IRO\"}},\"expectedTotalSupply(uint256)\":{\"params\":{\"_iroId\":\"ID of the IRO\"}},\"getIRO(uint256)\":{\"params\":{\"_iroId\":\"ID of the IRO\"}},\"getStatus(uint256)\":{\"params\":{\"_iroId\":\"ID of the IRO\"}},\"initialize(address,address,address,address)\":{\"details\":\"Initialize IRO contract\",\"params\":{\"_currency\":\"Currency used to precify the IRO tokens\",\"_realEstateNft\":\"RealEstateNFT contract address\",\"_treasury\":\"Treasury contract address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"price(uint256,uint256)\":{\"params\":{\"_amountToPurchase\":\"Amount of IRO tokens to purchase\",\"_iroId\":\"ID of the IRO\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"remainingTokens(uint256)\":{\"params\":{\"_iroId\":\"ID of the IRO\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setCurrency(address)\":{\"details\":\"Set a new base price token\",\"params\":{\"_currency\":\"currency address (ERC20)\"}},\"setTreasury(address)\":{\"details\":\"Set new treasury\",\"params\":{\"_treasury\":\"Treasury address\"}},\"targetCapInfo(uint256)\":{\"params\":{\"_iroId\":\"ID of the IRO\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"userAmountAndShare(uint256,address)\":{\"params\":{\"_iroId\":\"ID of the IRO\",\"_user\":\"User address\"},\"returns\":{\"amount\":\"Purchased amount\",\"share\":\"IRO share\"}},\"withdraw(uint256)\":{\"params\":{\"_iroId\":\"ID of the IRO\"}}},\"stateVariables\":{\"DENOMINATOR\":{\"details\":\"Denominator used to calculate fees/shares\"},\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"},\"_fundsWithdrawn\":{\"details\":\"Points out whether funds have been withdrawn from IRO\"},\"_iros\":{\"details\":\"mapping (iroId => iro)\"},\"_nextAvailableId\":{\"details\":\"Next available IRO ID\"},\"_realEstateIdSet\":{\"details\":\"Whether an ID has already been set in the RealEstateNFT contract for the IRO\"},\"commits\":{\"details\":\"mapping (iroId => user => commit)\"},\"realEstateId\":{\"details\":\"mapping (iroId => realEstateId)\"}},\"title\":\"Initial Real Estate Offering (IRO)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(uint256,address)\":{\"notice\":\"Claim purchased tokens when IRO successful or     get back commit amount in base currency if IRO failed\"},\"commit(uint256,uint256)\":{\"notice\":\"Commit to an IRO\"},\"currency()\":{\"notice\":\"Currency address\"},\"currentTotalSupply(uint256)\":{\"notice\":\"Get the current total supply\"},\"expectedTotalSupply(uint256)\":{\"notice\":\"Get the total supply of an IRO, if successful\"},\"getIRO(uint256)\":{\"notice\":\"Get IRO\"},\"getStatus(uint256)\":{\"notice\":\"Get IRO status\"},\"iroLength()\":{\"notice\":\"Get total amount of IROs\"},\"now64()\":{\"notice\":\"Get current time (uint64)\"},\"price(uint256,uint256)\":{\"notice\":\"Get the total price of a purchase\"},\"realEstateNft()\":{\"notice\":\"RealEstateNFT contract address\"},\"remainingTokens(uint256)\":{\"notice\":\"Get the amount of remaining IRO tokens\"},\"targetCapInfo(uint256)\":{\"notice\":\"Get the targetCap composition\"},\"treasury()\":{\"notice\":\"Treasury contract address\"},\"userAmountAndShare(uint256,address)\":{\"notice\":\"Get an user purchased amount and shares of an IRO\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw and distribute funds from successful IROs\"}},\"notice\":\"Used to run IROs, mint tokens to RealEstateNFT     and distribute funds\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/InitialRealEstateOffering.sol\":\"InitialRealEstateOffering\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/BitMapsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMapsUpgradeable {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(\\n        BitMap storage bitmap,\\n        uint256 index,\\n        bool value\\n    ) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0x93282769cdd2804524608a8a23f6d42b888ec0acb36eabd1d5f84b2bf1f374f3\",\"license\":\"MIT\"},\"contracts/interfaces/IRealEstateERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IRealEstateERC1155 {\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function nextRealEstateId() external view returns (uint256);\\r\\n\\r\\n    function setMinter(address _minter) external;\\r\\n\\r\\n    function setBurner(address _burner) external;\\r\\n\\r\\n    function mint(uint256 _id, address _to, uint256 _amount) external;\\r\\n\\r\\n    function burn(uint256 _id, uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x401e634d9d3657586b855573a14bea603306809132bc93b343319d62b8146321\",\"license\":\"MIT\"},\"contracts/interfaces/IRealEstateReserves.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IRealEstateReserves {\\r\\n    function deposit(uint256 _id, uint256 _amount, address _currency) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x2787ddc5c24259281fd22406df82be3bd4943492bd14c1eb6af05520e5a78ca7\",\"license\":\"MIT\"},\"contracts/protocol/InitialRealEstateOffering.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport { CountersUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\r\\nimport { BitMapsUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/structs/BitMapsUpgradeable.sol\\\";\\r\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport { SafeERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\n\\r\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\n\\r\\nimport { IRealEstateERC1155 } from \\\"../interfaces/IRealEstateERC1155.sol\\\";\\r\\nimport { IRealEstateReserves } from \\\"../interfaces/IRealEstateReserves.sol\\\";\\r\\n\\r\\n/// @title Initial Real Estate Offering (IRO)\\r\\n/// @author Horizon DAO (Yuri Fernandes)\\r\\n/// @notice Used to run IROs, mint tokens to RealEstateNFT\\r\\n///     and distribute funds\\r\\ncontract InitialRealEstateOffering is OwnableUpgradeable, UUPSUpgradeable {\\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\r\\n    using BitMapsUpgradeable for BitMapsUpgradeable.BitMap;\\r\\n\\r\\n    /// @dev Denominator used to calculate fees/shares\\r\\n    uint16 public constant DENOMINATOR = 10000;\\r\\n\\r\\n    /// @dev IRO status enum\\r\\n    /// @dev Status descriptions:\\r\\n    ///     - PENDING: IRO hasn't started\\r\\n    ///     - FUNDING: IRO is active, commits are allowed\\r\\n    ///     - SUCCESS: IRO has been successful, claiming is allowed\\r\\n    ///     - FAIL: IRO failed, committed funds are withdrawable\\r\\n    enum Status {\\r\\n        PENDING,\\r\\n        FUNDING,\\r\\n        SUCCESS,\\r\\n        FAIL\\r\\n    }\\r\\n\\r\\n    /// @dev Initial Real Estate Offerring structure\\r\\n    /// @dev Since timestamps are 64 bit integers, last IRO\\r\\n    ///     should finish at 21 de julho de 2554 11:34:33.709 UTC.\\r\\n    /// @dev Field description:\\r\\n    ///     - listingOwner: Address of the IRO listing owner\\r\\n    ///     - start: IRO start time\\r\\n    ///     - end: IRO end time\\r\\n    ///     - currency: IRO currency, used as a security measurement, if\\r\\n    ///         the contract-level currency has changed during active IROs\\r\\n    ///     - treasuryFee: treasury fee over total funds\\r\\n    ///     - operationFee: real estate reserves fee over total funds\\r\\n    ///     - targetFunding: Target funding for the IRO to be successful\\r\\n    ///     - unitPrice: IRO price per token\\r\\n    ///     - totalFunding: Total amount of funds collected during an IRO\\r\\n    struct IRO {\\r\\n        address listingOwner;\\r\\n        uint64 start;\\r\\n        uint64 end;\\r\\n        address currency;\\r\\n        uint256 treasuryFee;\\r\\n        uint256 operationFee;\\r\\n        uint256 targetFunding;\\r\\n        uint256 unitPrice;\\r\\n        uint256 totalFunding;\\r\\n    }\\r\\n\\r\\n    /// @notice Currency address\\r\\n    address public currency;\\r\\n\\r\\n    /// @notice Treasury contract address\\r\\n    address public treasury;\\r\\n\\r\\n    /// @notice RealEstateNFT contract address\\r\\n    IRealEstateERC1155 public realEstateNft;\\r\\n\\r\\n    /// @dev Next available IRO ID\\r\\n    CountersUpgradeable.Counter private _nextAvailableId;\\r\\n\\r\\n    /// @dev mapping (iroId => iro)\\r\\n    mapping(uint256 => IRO) private _iros;\\r\\n\\r\\n    /// @dev mapping (iroId => user => commit)\\r\\n    mapping(uint256 => mapping(address => uint256)) public commits;\\r\\n\\r\\n    /// @dev mapping (iroId => realEstateId)\\r\\n    mapping(uint256 => uint256) public realEstateId;\\r\\n\\r\\n    /// @dev Points out whether funds have been withdrawn from IRO\\r\\n    BitMapsUpgradeable.BitMap private _fundsWithdrawn;\\r\\n\\r\\n    /// @dev Whether an ID has already been set in the RealEstateNFT contract for the IRO\\r\\n    BitMapsUpgradeable.BitMap private _realEstateIdSet;\\r\\n\\r\\n    /// @dev Emitted when a new IRO is created\\r\\n    event CreateIRO(\\r\\n        uint256 indexed _iroId,\\r\\n        address indexed _listingOwner,\\r\\n        address indexed _currency,\\r\\n        uint64 _start,\\r\\n        uint64 _end,\\r\\n        uint256 _unitPrice,\\r\\n        uint256 _targetFunding\\r\\n    );\\r\\n\\r\\n    /// @dev Emitted when a new Commit is made to an IRO\\r\\n    event Commit(\\r\\n        uint256 indexed _iroId,\\r\\n        address indexed _user,\\r\\n        address indexed _currency,\\r\\n        uint256 _value,\\r\\n        uint256 _purchasedAmount\\r\\n    );\\r\\n\\r\\n    /// @dev Emitted when tokens are claimed by investors\\r\\n    event TokensClaimed(uint256 indexed _iroId, address indexed _by, address indexed _to, uint256 _amount);\\r\\n\\r\\n    /// @dev Emitted when an investors withdraw it's funds after an IRO fails\\r\\n    event CashBack(uint256 indexed _iroId, address indexed _by, address indexed _to, uint256 _commitAmount);\\r\\n\\r\\n    /// @dev Emitted when a new currency is set\\r\\n    event SetBaseCurrency(address indexed _by, address indexed _currency);\\r\\n\\r\\n    /// @dev Emitted when the Treasury contract is set\\r\\n    event SetTreasury(address indexed _by, address indexed _treasury);\\r\\n\\r\\n    /// @dev Emitted when a new real estate token ID is created\\r\\n    event RealEstateCreated(uint256 indexed _iroId, uint256 indexed _realEstateId);\\r\\n\\r\\n    /// @dev Emitted when funds from an IRO are withdrawn\\r\\n    event FundsWithdrawn(\\r\\n        uint256 indexed _iroId,\\r\\n        address indexed _by,\\r\\n        uint256 _listingOwnerAmount,\\r\\n        uint256 _treasuryFee,\\r\\n        uint256 _operationFee\\r\\n    );\\r\\n\\r\\n    /// @dev Initialize IRO contract\\r\\n    /// @param _realEstateNft RealEstateNFT contract address\\r\\n    /// @param _treasury Treasury contract address\\r\\n    /// @param _currency Currency used to precify the IRO tokens\\r\\n    function initialize(\\r\\n        address _owner,\\r\\n        address _realEstateNft,\\r\\n        address _treasury,\\r\\n        address _currency\\r\\n    ) external initializer {\\r\\n        require(_realEstateNft != address(0), \\\"!_realEstateNft\\\");\\r\\n        require(_treasury != address(0), \\\"!_treasury\\\");\\r\\n        require(_currency != address(0), \\\"!_currency\\\");\\r\\n        realEstateNft = IRealEstateERC1155(_realEstateNft);\\r\\n        treasury = _treasury;\\r\\n        currency = _currency;\\r\\n        _transferOwnership(_owner);\\r\\n    }\\r\\n\\r\\n    /// @dev Set a new base price token\\r\\n    /// @param _currency currency address (ERC20)\\r\\n    function setCurrency(address _currency) external onlyOwner {\\r\\n        require(_currency != address(0), \\\"!_currency\\\");\\r\\n        currency = _currency;\\r\\n        emit SetBaseCurrency(msg.sender, _currency);\\r\\n    }\\r\\n\\r\\n    /// @dev Set new treasury\\r\\n    /// @param _treasury Treasury address\\r\\n    function setTreasury(address _treasury) external onlyOwner {\\r\\n        require(_treasury != address(0), \\\"!_treasury\\\");\\r\\n        treasury = _treasury;\\r\\n        emit SetTreasury(msg.sender, _treasury);\\r\\n    }\\r\\n\\r\\n    /// @dev Create new IRO\\r\\n    /// @param _listingOwner Listing owner address\\r\\n    /// @param _treasuryFee Treasury fee in absolute value\\r\\n    /// @param _operationFee Operation fee in the IRO currency\\r\\n    /// @param _duration Duration of the IRO in seconds\\r\\n    /// @param _assetPrice Price of the asset\\r\\n    /// @param _unitPrice Price per unit of IRO token in the IRO currency\\r\\n    /// @param _startOffset Time before IRO begins\\r\\n    function createIRO(\\r\\n        address _listingOwner,\\r\\n        uint256 _treasuryFee,\\r\\n        uint256 _operationFee,\\r\\n        uint64 _duration,\\r\\n        uint256 _assetPrice,\\r\\n        uint256 _unitPrice,\\r\\n        uint64 _startOffset\\r\\n    ) external onlyOwner {\\r\\n        uint256 targetFunding = _assetPrice + _operationFee + _treasuryFee;\\r\\n        require(\\r\\n            (targetFunding / _unitPrice) * _unitPrice == targetFunding,\\r\\n            \\\"Target funding should be divisible by unit price\\\"\\r\\n        );\\r\\n\\r\\n        uint256 currentId = iroLength();\\r\\n        uint64 start_ = now64() + _startOffset;\\r\\n        uint64 end_ = start_ + _duration;\\r\\n        _iros[currentId] = IRO({\\r\\n            listingOwner: _listingOwner,\\r\\n            start: start_,\\r\\n            end: end_,\\r\\n            currency: currency,\\r\\n            treasuryFee: _treasuryFee,\\r\\n            operationFee: _operationFee,\\r\\n            targetFunding: targetFunding,\\r\\n            unitPrice: _unitPrice,\\r\\n            totalFunding: 0\\r\\n        });\\r\\n        _nextAvailableId.increment();\\r\\n\\r\\n        emit CreateIRO(currentId, _listingOwner, currency, start_, end_, _unitPrice, targetFunding);\\r\\n    }\\r\\n\\r\\n    /// @notice Commit to an IRO\\r\\n    /// @param _iroId ID of the IRO\\r\\n    /// @param _amountToPurchase Amount of IRO tokens to purchase\\r\\n    function commit(uint256 _iroId, uint256 _amountToPurchase) external {\\r\\n        require(_amountToPurchase > 0, \\\"_amountToPurchase should be greater than zero\\\");\\r\\n        IRO memory iro = getIRO(_iroId);\\r\\n        require(_getStatus(iro) == Status.FUNDING, \\\"IRO is not active\\\");\\r\\n        require(iro.totalFunding + _amountToPurchase * iro.unitPrice <= iro.targetFunding, \\\"Target funding reached\\\");\\r\\n\\r\\n        uint256 valueInBase = _processPayment(iro.unitPrice, _amountToPurchase, iro.currency);\\r\\n\\r\\n        commits[_iroId][msg.sender] += valueInBase;\\r\\n        _iros[_iroId].totalFunding += valueInBase;\\r\\n\\r\\n        emit Commit(_iroId, msg.sender, iro.currency, valueInBase, _amountToPurchase);\\r\\n    }\\r\\n\\r\\n    /// @dev Enable receiving ETH\\r\\n    receive() external payable {}\\r\\n\\r\\n    /// @notice Claim purchased tokens when IRO successful or\\r\\n    ///     get back commit amount in base currency if IRO failed\\r\\n    /// @param _iroId ID of the IRO\\r\\n    /// @param _to Address to send the claimed tokens\\r\\n    function claim(uint256 _iroId, address _to) external {\\r\\n        IRO memory iro = getIRO(_iroId);\\r\\n        Status status = _getStatus(iro);\\r\\n        require(status > Status.FUNDING, \\\"IRO not finished\\\");\\r\\n        uint256 commitAmount = commits[_iroId][msg.sender];\\r\\n        require(commitAmount > 0, \\\"Nothing to mint\\\");\\r\\n        if (status == Status.SUCCESS) {\\r\\n            uint256 amountToMint = commitAmount / iro.unitPrice;\\r\\n            realEstateNft.mint(_retrieveRealEstateId(_iroId), _to, amountToMint);\\r\\n            emit TokensClaimed(_iroId, msg.sender, _to, amountToMint);\\r\\n        } else {\\r\\n            IERC20Upgradeable(currency).safeTransfer(_to, commitAmount);\\r\\n            commits[_iroId][msg.sender] = 0;\\r\\n            emit CashBack(_iroId, msg.sender, _to, commitAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraw and distribute funds from successful IROs\\r\\n    /// @param _iroId ID of the IRO\\r\\n    function withdraw(uint256 _iroId) external {\\r\\n        IRO memory iro = getIRO(_iroId);\\r\\n        require(_getStatus(iro) == Status.SUCCESS, \\\"IRO not successful\\\");\\r\\n        require(!_fundsWithdrawn.get(_iroId), \\\"Already withdrawn\\\");\\r\\n\\r\\n        uint256 listingOwnerAmount_ = _distributeFunds(iro);\\r\\n        _fundsWithdrawn.set(_iroId);\\r\\n\\r\\n        emit FundsWithdrawn(_iroId, msg.sender, listingOwnerAmount_, iro.treasuryFee, iro.operationFee);\\r\\n    }\\r\\n\\r\\n    /// @notice Get an user purchased amount and shares of an IRO\\r\\n    /// @param _iroId ID of the IRO\\r\\n    /// @param _user User address\\r\\n    /// @return amount Purchased amount\\r\\n    /// @return share IRO share\\r\\n    function userAmountAndShare(uint256 _iroId, address _user) external view returns (uint256 amount, uint16 share) {\\r\\n        IRO memory iro = getIRO(_iroId);\\r\\n        uint256 userCommit = commits[_iroId][_user];\\r\\n        amount = userCommit / iro.unitPrice;\\r\\n        share = uint16((amount * DENOMINATOR) / _calculateSupply(iro.totalFunding, iro.unitPrice));\\r\\n    }\\r\\n\\r\\n    /// @notice Get the targetCap composition\\r\\n    /// @param _iroId ID of the IRO\\r\\n    function targetCapInfo(\\r\\n        uint256 _iroId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 assetPrice,\\r\\n            uint256 treasuryFee,\\r\\n            uint256 operationFee,\\r\\n            uint16 treasuryFeeBps,\\r\\n            uint16 operationFeeBps\\r\\n        )\\r\\n    {\\r\\n        IRO memory iro = _iros[_iroId];\\r\\n        treasuryFee = iro.treasuryFee;\\r\\n        operationFee = iro.operationFee;\\r\\n        assetPrice = iro.targetFunding - (treasuryFee + operationFee);\\r\\n        treasuryFeeBps = uint16((treasuryFee * DENOMINATOR) / assetPrice);\\r\\n        operationFeeBps = uint16((operationFee * DENOMINATOR) / assetPrice);\\r\\n    }\\r\\n\\r\\n    /// @notice Get the total price of a purchase\\r\\n    /// @param _iroId ID of the IRO\\r\\n    /// @param _amountToPurchase Amount of IRO tokens to purchase\\r\\n    function price(uint256 _iroId, uint256 _amountToPurchase) external view returns (uint256) {\\r\\n        IRO memory iro = getIRO(_iroId);\\r\\n        return _amountToPurchase * iro.unitPrice;\\r\\n    }\\r\\n\\r\\n    /// @notice Get the current total supply\\r\\n    /// @param _iroId ID of the IRO\\r\\n    function currentTotalSupply(uint256 _iroId) external view returns (uint256) {\\r\\n        IRO memory iro = getIRO(_iroId);\\r\\n        return _calculateSupply(iro.totalFunding, iro.unitPrice);\\r\\n    }\\r\\n\\r\\n    /// @notice Get the total supply of an IRO, if successful\\r\\n    /// @param _iroId ID of the IRO\\r\\n    function expectedTotalSupply(uint256 _iroId) external view returns (uint256 expectedTotalSupply_) {\\r\\n        IRO memory iro = getIRO(_iroId);\\r\\n        expectedTotalSupply_ = _calculateSupply(iro.targetFunding, iro.unitPrice);\\r\\n    }\\r\\n\\r\\n    /// @notice Get the amount of remaining IRO tokens\\r\\n    /// @param _iroId ID of the IRO\\r\\n    function remainingTokens(uint256 _iroId) external view returns (uint256) {\\r\\n        IRO memory iro = getIRO(_iroId);\\r\\n        return (iro.targetFunding - iro.totalFunding) / iro.unitPrice;\\r\\n    }\\r\\n\\r\\n    /// @notice Get IRO status\\r\\n    /// @param _iroId ID of the IRO\\r\\n    function getStatus(uint256 _iroId) external view returns (Status) {\\r\\n        IRO memory iro = _iros[_iroId];\\r\\n        return _getStatus(iro);\\r\\n    }\\r\\n\\r\\n    /// @notice Get IRO\\r\\n    /// @param _iroId ID of the IRO\\r\\n    function getIRO(uint256 _iroId) public view returns (IRO memory) {\\r\\n        require(_iroId < iroLength(), \\\"_iroId out-of-bounds\\\");\\r\\n        return _iros[_iroId];\\r\\n    }\\r\\n\\r\\n    /// @notice Get current time (uint64)\\r\\n    function now64() public view returns (uint64) {\\r\\n        return uint64(block.timestamp);\\r\\n    }\\r\\n\\r\\n    /// @notice Get total amount of IROs\\r\\n    function iroLength() public view returns (uint256) {\\r\\n        return _nextAvailableId.current();\\r\\n    }\\r\\n\\r\\n    /// @dev Calculate supply\\r\\n    /// @param _totalFunding Total funding amount\\r\\n    /// @param _unitPrice IRO token unit price\\r\\n    function _calculateSupply(uint256 _totalFunding, uint256 _unitPrice) internal pure returns (uint256) {\\r\\n        return _totalFunding / _unitPrice;\\r\\n    }\\r\\n\\r\\n    /// @dev Retrieve the realEstateId associated with a given IRO\\r\\n    /// @dev If none is assigned, assigns a new one\\r\\n    /// @param _iroId ID of the IRO\\r\\n    function _retrieveRealEstateId(uint256 _iroId) internal returns (uint256 _realEstateId) {\\r\\n        if (!_realEstateIdSet.get(_iroId)) {\\r\\n            _realEstateId = realEstateNft.nextRealEstateId();\\r\\n            realEstateId[_iroId] = _realEstateId;\\r\\n            _realEstateIdSet.set(_iroId);\\r\\n            emit RealEstateCreated(_iroId, _realEstateId);\\r\\n        } else {\\r\\n            _realEstateId = realEstateId[_iroId];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc UUPSUpgradeable\\r\\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyOwner {}\\r\\n\\r\\n    /// @dev Get status of an IRO\\r\\n    /// @param _iro IRO structure\\r\\n    function _getStatus(IRO memory _iro) internal view returns (Status) {\\r\\n        if (now64() < _iro.start) return Status.PENDING;\\r\\n        if (now64() < _iro.end) {\\r\\n            if (_iro.totalFunding == _iro.targetFunding) return Status.SUCCESS;\\r\\n            return Status.FUNDING;\\r\\n        }\\r\\n        if (_iro.totalFunding < _iro.targetFunding) return Status.FAIL;\\r\\n        return Status.SUCCESS;\\r\\n    }\\r\\n\\r\\n    /// @dev Process commit payment\\r\\n    /// @param _unitPrice Unit price of the token\\r\\n    /// @param _amountToPurchase Amount of tokens to purchase\\r\\n    /// @param _currency Payment currency address\\r\\n    function _processPayment(\\r\\n        uint256 _unitPrice,\\r\\n        uint256 _amountToPurchase,\\r\\n        address _currency\\r\\n    ) private returns (uint256 value) {\\r\\n        value = _amountToPurchase * _unitPrice;\\r\\n        IERC20Upgradeable(_currency).safeTransferFrom(msg.sender, address(this), value);\\r\\n    }\\r\\n\\r\\n    /// @dev Distribute funds during IRO withdrawal\\r\\n    /// @param _iro IRO instance\\r\\n\\r\\n    function _distributeFunds(IRO memory _iro) private returns (uint256 listingOwnerAmount_) {\\r\\n        // transfer treasury and operation fee\\r\\n        uint256 treasuryAmount = _iro.treasuryFee + _iro.operationFee;\\r\\n        IERC20Upgradeable(_iro.currency).safeTransfer(treasury, treasuryAmount);\\r\\n\\r\\n        // transfer listing owner funds\\r\\n        listingOwnerAmount_ = _iro.targetFunding - treasuryAmount;\\r\\n        IERC20Upgradeable(_iro.currency).safeTransfer(treasury, listingOwnerAmount_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[41] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0xa35a441ec94d5d06857b9d63904b309462af8b167fef1a6a33d3da1802dfc1e3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b5060805161278761004c60003960008181610847015281816108870152818161094e0152818161098e0152610a2101526127876000f3fe6080604052600436106101c65760003560e01c806372a1e7f6116100f7578063ddd5e1b211610095578063ef217dbd11610064578063ef217dbd1461058d578063f0f44260146105a2578063f2fde38b146105c2578063f8c8765e146105e257600080fd5b8063ddd5e1b214610509578063de9ee90b14610529578063e5a6b10f1461054d578063e915c5591461056d57600080fd5b8063918f8674116100d1578063918f86741461042c5780639a19b73b14610455578063ad91203b14610482578063b276fd4f146104ba57600080fd5b806372a1e7f6146103b6578063885d68a8146103d65780638da5cb5b1461040e57600080fd5b806352d1902d11610164578063606b77db1161013e578063606b77db1461031c57806361d027b314610349578063628f231d14610381578063715018a6146103a157600080fd5b806352d1902d146102ba5780635bf56bc4146102cf5780635c622a0e146102ef57600080fd5b80632f84c391116101a05780632f84c391146102475780633659cfe614610267578063487a2395146102875780634f1ef286146102a757600080fd5b8063171ee95a146101d25780632c82bede146102055780632e1a7d4d1461022557600080fd5b366101cd57005b600080fd5b3480156101de57600080fd5b506101f26101ed36600461220f565b610602565b6040519081526020015b60405180910390f35b34801561021157600080fd5b506101f261022036600461220f565b61063b565b34801561023157600080fd5b5061024561024036600461220f565b61065b565b005b34801561025357600080fd5b5061024561026236600461223f565b6107a6565b34801561027357600080fd5b5061024561028236600461223f565b61083d565b34801561029357600080fd5b506101f26102a236600461225a565b61091c565b6102456102b5366004612292565b610944565b3480156102c657600080fd5b506101f2610a14565b3480156102db57600080fd5b506102456102ea36600461225a565b610ac7565b3480156102fb57600080fd5b5061030f61030a36600461220f565b610cc4565b6040516101fc9190612369565b34801561032857600080fd5b506101f261033736600461220f565b60cf6020526000908152604090205481565b34801561035557600080fd5b5060ca54610369906001600160a01b031681565b6040516001600160a01b0390911681526020016101fc565b34801561038d57600080fd5b5061024561039c3660046123a8565b610d61565b3480156103ad57600080fd5b5061024561101e565b3480156103c257600080fd5b506101f26103d136600461220f565b611032565b3480156103e257600080fd5b506101f26103f1366004612412565b60ce60209081526000928352604080842090915290825290205481565b34801561041a57600080fd5b506033546001600160a01b0316610369565b34801561043857600080fd5b5061044261271081565b60405161ffff90911681526020016101fc565b34801561046157600080fd5b5061047561047036600461220f565b611053565b6040516101fc919061243e565b34801561048e57600080fd5b506104a261049d366004612412565b6111ab565b6040805192835261ffff9091166020830152016101fc565b3480156104c657600080fd5b506104da6104d536600461220f565b611225565b6040805195865260208601949094529284019190915261ffff908116606084015216608082015260a0016101fc565b34801561051557600080fd5b50610245610524366004612412565b61131b565b34801561053557600080fd5b506040516001600160401b03421681526020016101fc565b34801561055957600080fd5b5060c954610369906001600160a01b031681565b34801561057957600080fd5b5060cb54610369906001600160a01b031681565b34801561059957600080fd5b506101f261155f565b3480156105ae57600080fd5b506102456105bd36600461223f565b61156f565b3480156105ce57600080fd5b506102456105dd36600461223f565b611606565b3480156105ee57600080fd5b506102456105fd3660046124d4565b61167c565b60008061060e83611053565b90508060e001518161010001518260c0015161062a919061253e565b6106349190612551565b9392505050565b60008061064783611053565b90506106348160c001518260e0015161189c565b600061066682611053565b90506002610673826118a8565b600381111561068457610684612353565b146106cb5760405162461bcd60e51b8152602060048201526012602482015271125493c81b9bdd081cdd58d8d95cdcd99d5b60721b60448201526064015b60405180910390fd5b600882901c600090815260d06020526040902054600160ff84161b16156107285760405162461bcd60e51b815260206004820152601160248201527020b63932b0b23c903bb4ba34323930bbb760791b60448201526064016106c2565b600061073382611935565b600884901c600090815260d0602052604090208054600160ff87161b1790559050608082015160a0830151604080518481526020810193909352820152339084907f3d6a11453aa9d57866fab68b0aef74499ad1075b4f99ccbfbd7796cb3352991f9060600160405180910390a3505050565b6107ae6119a6565b6001600160a01b0381166107f15760405162461bcd60e51b815260206004820152600a602482015269215f63757272656e637960b01b60448201526064016106c2565b60c980546001600160a01b0319166001600160a01b03831690811790915560405133907f6dde2141be69fabcd84e3864d206ba0f3f2d507125fb2703899c87de4c585d5f90600090a350565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108855760405162461bcd60e51b81526004016106c290612573565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108ce60008051602061270b833981519152546001600160a01b031690565b6001600160a01b0316146108f45760405162461bcd60e51b81526004016106c2906125bf565b6108fd81611a00565b6040805160008082526020820190925261091991839190611a08565b50565b60008061092884611053565b90508060e001518361093a919061260b565b9150505b92915050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361098c5760405162461bcd60e51b81526004016106c290612573565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109d560008051602061270b833981519152546001600160a01b031690565b6001600160a01b0316146109fb5760405162461bcd60e51b81526004016106c2906125bf565b610a0482611a00565b610a1082826001611a08565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ab45760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016106c2565b5060008051602061270b83398151915290565b60008111610b2d5760405162461bcd60e51b815260206004820152602d60248201527f5f616d6f756e74546f50757263686173652073686f756c64206265206772656160448201526c746572207468616e207a65726f60981b60648201526084016106c2565b6000610b3883611053565b90506001610b45826118a8565b6003811115610b5657610b56612353565b14610b975760405162461bcd60e51b815260206004820152601160248201527049524f206973206e6f742061637469766560781b60448201526064016106c2565b60c081015160e0820151610bab908461260b565b826101000151610bbb9190612622565b1115610c025760405162461bcd60e51b815260206004820152601660248201527515185c99d95d08199d5b991a5b99c81c995858da195960521b60448201526064016106c2565b6000610c178260e00151848460600151611b78565b600085815260ce60209081526040808320338452909152812080549293508392909190610c45908490612622565b9091555050600084815260cd602052604081206006018054839290610c6b908490612622565b9091555050606082015160408051838152602081018690526001600160a01b0390921691339187917f5a85eb554fd8d84f35068dd70b72c3eade7b5cd89deb5cd10d936626411beaa4910160405180910390a450505050565b600081815260cd6020908152604080832081516101208101835281546001600160a01b038082168352600160a01b9091046001600160401b0390811695830195909552600183015494851693820193909352600160401b909304909116606083015260028101546080830152600381015460a0830152600481015460c0830152600581015460e083015260060154610100820152610634816118a8565b610d696119a6565b600086610d768786612622565b610d809190612622565b90508083610d8e8183612551565b610d98919061260b565b14610dfe5760405162461bcd60e51b815260206004820152603060248201527f5461726765742066756e64696e672073686f756c64206265206469766973696260448201526f6c6520627920756e697420707269636560801b60648201526084016106c2565b6000610e0861155f565b90506000610e168442612635565b90506000610e248883612635565b90506040518061012001604052808c6001600160a01b03168152602001836001600160401b03168152602001826001600160401b0316815260200160c960009054906101000a90046001600160a01b03166001600160a01b031681526020018b81526020018a8152602001858152602001878152602001600081525060cd600085815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a8154816001600160401b0302191690836001600160401b0316021790555060408201518160010160006101000a8154816001600160401b0302191690836001600160401b0316021790555060608201518160010160086101000a8154816001600160a01b0302191690836001600160a01b031602179055506080820151816002015560a0820151816003015560c0820151816004015560e082015181600501556101008201518160060155905050610fab60cc80546001019055565b60c954604080516001600160401b03808616825284166020820152908101889052606081018690526001600160a01b03918216918d169085907fd0622d7bdced1f77b9f903421ce8ffc86f86176fec95befdad41d820ac23f3719060800160405180910390a45050505050505050505050565b6110266119a6565b6110306000611b9b565b565b60008061103e83611053565b90506106348161010001518260e0015161189c565b6110c660405180610120016040528060006001600160a01b0316815260200160006001600160401b0316815260200160006001600160401b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b6110ce61155f565b82106111135760405162461bcd60e51b81526020600482015260146024820152735f69726f4964206f75742d6f662d626f756e647360601b60448201526064016106c2565b50600090815260cd602090815260409182902082516101208101845281546001600160a01b0380821683526001600160401b03600160a01b909204821694830194909452600183015490811694820194909452600160401b909304909116606083015260028101546080830152600381015460a0830152600481015460c0830152600581015460e08301526006015461010082015290565b60008060006111b985611053565b600086815260ce602090815260408083206001600160a01b038916845290915290205460e0820151919250906111ef9082612551565b93506112048261010001518360e0015161189c565b6112106127108661260b565b61121a9190612551565b925050509250929050565b600081815260cd6020908152604080832081516101208101835281546001600160a01b0380821683526001600160401b03600160a01b909204821695830195909552600183015490811693820193909352600160401b9092049092166060820152600282015460808201819052600383015460a08301819052600484015460c0840152600584015460e08401526006909301546101008301529190839081906112ce8486612622565b8160c001516112dd919061253e565b9550856112ec6127108761260b565b6112f69190612551565b9250856113056127108661260b565b61130f9190612551565b91505091939590929450565b600061132683611053565b90506000611333826118a8565b9050600181600381111561134957611349612353565b116113895760405162461bcd60e51b815260206004820152601060248201526f125493c81b9bdd08199a5b9a5cda195960821b60448201526064016106c2565b600084815260ce60209081526040808320338452909152902054806113e25760405162461bcd60e51b815260206004820152600f60248201526e139bdd1a1a5b99c81d1bc81b5a5b9d608a1b60448201526064016106c2565b60028260038111156113f6576113f6612353565b036114e55760008360e001518261140d9190612551565b60cb549091506001600160a01b031663836a104061142a88611bed565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b038816602482015260448101849052606401600060405180830381600087803b15801561147957600080fd5b505af115801561148d573d6000803e3d6000fd5b50505050846001600160a01b0316336001600160a01b0316877f9c4945d842cc8c6704877a0defcd9ab09f6d77b24a369a95c2610506c6c38ee7846040516114d791815260200190565b60405180910390a450611558565b60c9546114fc906001600160a01b03168583611cf9565b600085815260ce602090815260408083203380855290835281842093909355518381526001600160a01b038716929188917e13b41c02877cabf07b7d6154ea39ec4503af8922f651f7a81f4afacd0c664f910160405180910390a45b5050505050565b600061156a60cc5490565b905090565b6115776119a6565b6001600160a01b0381166115ba5760405162461bcd60e51b815260206004820152600a602482015269215f747265617375727960b01b60448201526064016106c2565b60ca80546001600160a01b0319166001600160a01b03831690811790915560405133907f190c262dc6f09322c68a13bf67c9659e58367755ba6190fa7ce5ca8aa45a877d90600090a350565b61160e6119a6565b6001600160a01b0381166116735760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106c2565b61091981611b9b565b600054610100900460ff161580801561169c5750600054600160ff909116105b806116b65750303b1580156116b6575060005460ff166001145b6117195760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106c2565b6000805460ff19166001179055801561173c576000805461ff0019166101001790555b6001600160a01b0384166117845760405162461bcd60e51b815260206004820152600f60248201526e0857dc99585b115cdd185d1953999d608a1b60448201526064016106c2565b6001600160a01b0383166117c75760405162461bcd60e51b815260206004820152600a602482015269215f747265617375727960b01b60448201526064016106c2565b6001600160a01b03821661180a5760405162461bcd60e51b815260206004820152600a602482015269215f63757272656e637960b01b60448201526064016106c2565b60cb80546001600160a01b038087166001600160a01b03199283161790925560ca805486841690831617905560c980549285169290911691909117905561185085611b9b565b8015611558576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b60006106348284612551565b600081602001516001600160401b03166118bf4290565b6001600160401b031610156118d657506000919050565b60408201516001600160401b0316426001600160401b03161015611914578160c001518261010001510361190c57506002919050565b506001919050565b8160c00151826101000151101561192d57506003919050565b506002919050565b6000808260a00151836080015161194c9190612622565b60ca54606085015191925061196e916001600160a01b03908116911683611cf9565b808360c0015161197e919061253e565b60ca5460608501519193506119a0916001600160a01b03908116911684611cf9565b50919050565b6033546001600160a01b031633146110305760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106c2565b6109196119a6565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611a4057611a3b83611d5c565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611a9a575060408051601f3d908101601f19168201909252611a979181019061265c565b60015b611afd5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016106c2565b60008051602061270b8339815191528114611b6c5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016106c2565b50611a3b838383611df8565b6000611b84848461260b565b90506106346001600160a01b038316333084611e23565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600881901c600090815260d16020526040812054600160ff84161b16611ce35760cb60009054906101000a90046001600160a01b03166001600160a01b0316631579c1336040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c84919061265c565b600083815260cf60209081526040808320849055600886901c835260d19091528082208054600160ff88161b17905551919250829184917fe845f90872d41131b00e56189f857584a09b017ea97c14fe1c84b118d62d8e5191a3919050565b50600081815260cf60205260409020545b919050565b6040516001600160a01b038316602482015260448101829052611a3b90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611e5b565b6001600160a01b0381163b611dc95760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016106c2565b60008051602061270b83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611e0183611f2d565b600082511180611e0e5750805b15611a3b57611e1d8383611f6d565b50505050565b6040516001600160a01b0380851660248301528316604482015260648101829052611e1d9085906323b872dd60e01b90608401611d25565b6000611eb0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166120619092919063ffffffff16565b805190915015611a3b5780806020019051810190611ece9190612675565b611a3b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106c2565b611f3681611d5c565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b611fd55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016106c2565b600080846001600160a01b031684604051611ff091906126bb565b600060405180830381855af49150503d806000811461202b576040519150601f19603f3d011682016040523d82523d6000602084013e612030565b606091505b5091509150612058828260405180606001604052806027815260200161272b60279139612078565b95945050505050565b60606120708484600085612091565b949350505050565b60608315612087575081610634565b610634838361216c565b6060824710156120f25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106c2565b600080866001600160a01b0316858760405161210e91906126bb565b60006040518083038185875af1925050503d806000811461214b576040519150601f19603f3d011682016040523d82523d6000602084013e612150565b606091505b509150915061216187838387612196565b979650505050505050565b81511561217c5781518083602001fd5b8060405162461bcd60e51b81526004016106c291906126d7565b606083156122055782516000036121fe576001600160a01b0385163b6121fe5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106c2565b5081612070565b612070838361216c565b60006020828403121561222157600080fd5b5035919050565b80356001600160a01b0381168114611cf457600080fd5b60006020828403121561225157600080fd5b61063482612228565b6000806040838503121561226d57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156122a557600080fd5b6122ae83612228565b915060208301356001600160401b03808211156122ca57600080fd5b818501915085601f8301126122de57600080fd5b8135818111156122f0576122f061227c565b604051601f8201601f19908116603f011681019083821181831017156123185761231861227c565b8160405282815288602084870101111561233157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b634e487b7160e01b600052602160045260246000fd5b602081016004831061238b57634e487b7160e01b600052602160045260246000fd5b91905290565b80356001600160401b0381168114611cf457600080fd5b600080600080600080600060e0888a0312156123c357600080fd5b6123cc88612228565b965060208801359550604088013594506123e860608901612391565b93506080880135925060a0880135915061240460c08901612391565b905092959891949750929550565b6000806040838503121561242557600080fd5b8235915061243560208401612228565b90509250929050565b81516001600160a01b031681526020808301516001600160401b03169082015260408083015161012083019161247e908401826001600160401b03169052565b50606083015161249960608401826001600160a01b03169052565b506080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525092915050565b600080600080608085870312156124ea57600080fd5b6124f385612228565b935061250160208601612228565b925061250f60408601612228565b915061251d60608601612228565b905092959194509250565b634e487b7160e01b600052601160045260246000fd5b8181038181111561093e5761093e612528565b60008261256e57634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b808202811582820484141761093e5761093e612528565b8082018082111561093e5761093e612528565b6001600160401b0381811683821601908082111561265557612655612528565b5092915050565b60006020828403121561266e57600080fd5b5051919050565b60006020828403121561268757600080fd5b8151801515811461063457600080fd5b60005b838110156126b257818101518382015260200161269a565b50506000910152565b600082516126cd818460208701612697565b9190910192915050565b60208152600082518060208401526126f6816040850160208701612697565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220aedb84bd8c923b92db255213033fb1e1372be49deb78387760ea9edd95499eda64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101c65760003560e01c806372a1e7f6116100f7578063ddd5e1b211610095578063ef217dbd11610064578063ef217dbd1461058d578063f0f44260146105a2578063f2fde38b146105c2578063f8c8765e146105e257600080fd5b8063ddd5e1b214610509578063de9ee90b14610529578063e5a6b10f1461054d578063e915c5591461056d57600080fd5b8063918f8674116100d1578063918f86741461042c5780639a19b73b14610455578063ad91203b14610482578063b276fd4f146104ba57600080fd5b806372a1e7f6146103b6578063885d68a8146103d65780638da5cb5b1461040e57600080fd5b806352d1902d11610164578063606b77db1161013e578063606b77db1461031c57806361d027b314610349578063628f231d14610381578063715018a6146103a157600080fd5b806352d1902d146102ba5780635bf56bc4146102cf5780635c622a0e146102ef57600080fd5b80632f84c391116101a05780632f84c391146102475780633659cfe614610267578063487a2395146102875780634f1ef286146102a757600080fd5b8063171ee95a146101d25780632c82bede146102055780632e1a7d4d1461022557600080fd5b366101cd57005b600080fd5b3480156101de57600080fd5b506101f26101ed36600461220f565b610602565b6040519081526020015b60405180910390f35b34801561021157600080fd5b506101f261022036600461220f565b61063b565b34801561023157600080fd5b5061024561024036600461220f565b61065b565b005b34801561025357600080fd5b5061024561026236600461223f565b6107a6565b34801561027357600080fd5b5061024561028236600461223f565b61083d565b34801561029357600080fd5b506101f26102a236600461225a565b61091c565b6102456102b5366004612292565b610944565b3480156102c657600080fd5b506101f2610a14565b3480156102db57600080fd5b506102456102ea36600461225a565b610ac7565b3480156102fb57600080fd5b5061030f61030a36600461220f565b610cc4565b6040516101fc9190612369565b34801561032857600080fd5b506101f261033736600461220f565b60cf6020526000908152604090205481565b34801561035557600080fd5b5060ca54610369906001600160a01b031681565b6040516001600160a01b0390911681526020016101fc565b34801561038d57600080fd5b5061024561039c3660046123a8565b610d61565b3480156103ad57600080fd5b5061024561101e565b3480156103c257600080fd5b506101f26103d136600461220f565b611032565b3480156103e257600080fd5b506101f26103f1366004612412565b60ce60209081526000928352604080842090915290825290205481565b34801561041a57600080fd5b506033546001600160a01b0316610369565b34801561043857600080fd5b5061044261271081565b60405161ffff90911681526020016101fc565b34801561046157600080fd5b5061047561047036600461220f565b611053565b6040516101fc919061243e565b34801561048e57600080fd5b506104a261049d366004612412565b6111ab565b6040805192835261ffff9091166020830152016101fc565b3480156104c657600080fd5b506104da6104d536600461220f565b611225565b6040805195865260208601949094529284019190915261ffff908116606084015216608082015260a0016101fc565b34801561051557600080fd5b50610245610524366004612412565b61131b565b34801561053557600080fd5b506040516001600160401b03421681526020016101fc565b34801561055957600080fd5b5060c954610369906001600160a01b031681565b34801561057957600080fd5b5060cb54610369906001600160a01b031681565b34801561059957600080fd5b506101f261155f565b3480156105ae57600080fd5b506102456105bd36600461223f565b61156f565b3480156105ce57600080fd5b506102456105dd36600461223f565b611606565b3480156105ee57600080fd5b506102456105fd3660046124d4565b61167c565b60008061060e83611053565b90508060e001518161010001518260c0015161062a919061253e565b6106349190612551565b9392505050565b60008061064783611053565b90506106348160c001518260e0015161189c565b600061066682611053565b90506002610673826118a8565b600381111561068457610684612353565b146106cb5760405162461bcd60e51b8152602060048201526012602482015271125493c81b9bdd081cdd58d8d95cdcd99d5b60721b60448201526064015b60405180910390fd5b600882901c600090815260d06020526040902054600160ff84161b16156107285760405162461bcd60e51b815260206004820152601160248201527020b63932b0b23c903bb4ba34323930bbb760791b60448201526064016106c2565b600061073382611935565b600884901c600090815260d0602052604090208054600160ff87161b1790559050608082015160a0830151604080518481526020810193909352820152339084907f3d6a11453aa9d57866fab68b0aef74499ad1075b4f99ccbfbd7796cb3352991f9060600160405180910390a3505050565b6107ae6119a6565b6001600160a01b0381166107f15760405162461bcd60e51b815260206004820152600a602482015269215f63757272656e637960b01b60448201526064016106c2565b60c980546001600160a01b0319166001600160a01b03831690811790915560405133907f6dde2141be69fabcd84e3864d206ba0f3f2d507125fb2703899c87de4c585d5f90600090a350565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108855760405162461bcd60e51b81526004016106c290612573565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108ce60008051602061270b833981519152546001600160a01b031690565b6001600160a01b0316146108f45760405162461bcd60e51b81526004016106c2906125bf565b6108fd81611a00565b6040805160008082526020820190925261091991839190611a08565b50565b60008061092884611053565b90508060e001518361093a919061260b565b9150505b92915050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361098c5760405162461bcd60e51b81526004016106c290612573565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109d560008051602061270b833981519152546001600160a01b031690565b6001600160a01b0316146109fb5760405162461bcd60e51b81526004016106c2906125bf565b610a0482611a00565b610a1082826001611a08565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ab45760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016106c2565b5060008051602061270b83398151915290565b60008111610b2d5760405162461bcd60e51b815260206004820152602d60248201527f5f616d6f756e74546f50757263686173652073686f756c64206265206772656160448201526c746572207468616e207a65726f60981b60648201526084016106c2565b6000610b3883611053565b90506001610b45826118a8565b6003811115610b5657610b56612353565b14610b975760405162461bcd60e51b815260206004820152601160248201527049524f206973206e6f742061637469766560781b60448201526064016106c2565b60c081015160e0820151610bab908461260b565b826101000151610bbb9190612622565b1115610c025760405162461bcd60e51b815260206004820152601660248201527515185c99d95d08199d5b991a5b99c81c995858da195960521b60448201526064016106c2565b6000610c178260e00151848460600151611b78565b600085815260ce60209081526040808320338452909152812080549293508392909190610c45908490612622565b9091555050600084815260cd602052604081206006018054839290610c6b908490612622565b9091555050606082015160408051838152602081018690526001600160a01b0390921691339187917f5a85eb554fd8d84f35068dd70b72c3eade7b5cd89deb5cd10d936626411beaa4910160405180910390a450505050565b600081815260cd6020908152604080832081516101208101835281546001600160a01b038082168352600160a01b9091046001600160401b0390811695830195909552600183015494851693820193909352600160401b909304909116606083015260028101546080830152600381015460a0830152600481015460c0830152600581015460e083015260060154610100820152610634816118a8565b610d696119a6565b600086610d768786612622565b610d809190612622565b90508083610d8e8183612551565b610d98919061260b565b14610dfe5760405162461bcd60e51b815260206004820152603060248201527f5461726765742066756e64696e672073686f756c64206265206469766973696260448201526f6c6520627920756e697420707269636560801b60648201526084016106c2565b6000610e0861155f565b90506000610e168442612635565b90506000610e248883612635565b90506040518061012001604052808c6001600160a01b03168152602001836001600160401b03168152602001826001600160401b0316815260200160c960009054906101000a90046001600160a01b03166001600160a01b031681526020018b81526020018a8152602001858152602001878152602001600081525060cd600085815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a8154816001600160401b0302191690836001600160401b0316021790555060408201518160010160006101000a8154816001600160401b0302191690836001600160401b0316021790555060608201518160010160086101000a8154816001600160a01b0302191690836001600160a01b031602179055506080820151816002015560a0820151816003015560c0820151816004015560e082015181600501556101008201518160060155905050610fab60cc80546001019055565b60c954604080516001600160401b03808616825284166020820152908101889052606081018690526001600160a01b03918216918d169085907fd0622d7bdced1f77b9f903421ce8ffc86f86176fec95befdad41d820ac23f3719060800160405180910390a45050505050505050505050565b6110266119a6565b6110306000611b9b565b565b60008061103e83611053565b90506106348161010001518260e0015161189c565b6110c660405180610120016040528060006001600160a01b0316815260200160006001600160401b0316815260200160006001600160401b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b6110ce61155f565b82106111135760405162461bcd60e51b81526020600482015260146024820152735f69726f4964206f75742d6f662d626f756e647360601b60448201526064016106c2565b50600090815260cd602090815260409182902082516101208101845281546001600160a01b0380821683526001600160401b03600160a01b909204821694830194909452600183015490811694820194909452600160401b909304909116606083015260028101546080830152600381015460a0830152600481015460c0830152600581015460e08301526006015461010082015290565b60008060006111b985611053565b600086815260ce602090815260408083206001600160a01b038916845290915290205460e0820151919250906111ef9082612551565b93506112048261010001518360e0015161189c565b6112106127108661260b565b61121a9190612551565b925050509250929050565b600081815260cd6020908152604080832081516101208101835281546001600160a01b0380821683526001600160401b03600160a01b909204821695830195909552600183015490811693820193909352600160401b9092049092166060820152600282015460808201819052600383015460a08301819052600484015460c0840152600584015460e08401526006909301546101008301529190839081906112ce8486612622565b8160c001516112dd919061253e565b9550856112ec6127108761260b565b6112f69190612551565b9250856113056127108661260b565b61130f9190612551565b91505091939590929450565b600061132683611053565b90506000611333826118a8565b9050600181600381111561134957611349612353565b116113895760405162461bcd60e51b815260206004820152601060248201526f125493c81b9bdd08199a5b9a5cda195960821b60448201526064016106c2565b600084815260ce60209081526040808320338452909152902054806113e25760405162461bcd60e51b815260206004820152600f60248201526e139bdd1a1a5b99c81d1bc81b5a5b9d608a1b60448201526064016106c2565b60028260038111156113f6576113f6612353565b036114e55760008360e001518261140d9190612551565b60cb549091506001600160a01b031663836a104061142a88611bed565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b038816602482015260448101849052606401600060405180830381600087803b15801561147957600080fd5b505af115801561148d573d6000803e3d6000fd5b50505050846001600160a01b0316336001600160a01b0316877f9c4945d842cc8c6704877a0defcd9ab09f6d77b24a369a95c2610506c6c38ee7846040516114d791815260200190565b60405180910390a450611558565b60c9546114fc906001600160a01b03168583611cf9565b600085815260ce602090815260408083203380855290835281842093909355518381526001600160a01b038716929188917e13b41c02877cabf07b7d6154ea39ec4503af8922f651f7a81f4afacd0c664f910160405180910390a45b5050505050565b600061156a60cc5490565b905090565b6115776119a6565b6001600160a01b0381166115ba5760405162461bcd60e51b815260206004820152600a602482015269215f747265617375727960b01b60448201526064016106c2565b60ca80546001600160a01b0319166001600160a01b03831690811790915560405133907f190c262dc6f09322c68a13bf67c9659e58367755ba6190fa7ce5ca8aa45a877d90600090a350565b61160e6119a6565b6001600160a01b0381166116735760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106c2565b61091981611b9b565b600054610100900460ff161580801561169c5750600054600160ff909116105b806116b65750303b1580156116b6575060005460ff166001145b6117195760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106c2565b6000805460ff19166001179055801561173c576000805461ff0019166101001790555b6001600160a01b0384166117845760405162461bcd60e51b815260206004820152600f60248201526e0857dc99585b115cdd185d1953999d608a1b60448201526064016106c2565b6001600160a01b0383166117c75760405162461bcd60e51b815260206004820152600a602482015269215f747265617375727960b01b60448201526064016106c2565b6001600160a01b03821661180a5760405162461bcd60e51b815260206004820152600a602482015269215f63757272656e637960b01b60448201526064016106c2565b60cb80546001600160a01b038087166001600160a01b03199283161790925560ca805486841690831617905560c980549285169290911691909117905561185085611b9b565b8015611558576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b60006106348284612551565b600081602001516001600160401b03166118bf4290565b6001600160401b031610156118d657506000919050565b60408201516001600160401b0316426001600160401b03161015611914578160c001518261010001510361190c57506002919050565b506001919050565b8160c00151826101000151101561192d57506003919050565b506002919050565b6000808260a00151836080015161194c9190612622565b60ca54606085015191925061196e916001600160a01b03908116911683611cf9565b808360c0015161197e919061253e565b60ca5460608501519193506119a0916001600160a01b03908116911684611cf9565b50919050565b6033546001600160a01b031633146110305760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106c2565b6109196119a6565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611a4057611a3b83611d5c565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611a9a575060408051601f3d908101601f19168201909252611a979181019061265c565b60015b611afd5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016106c2565b60008051602061270b8339815191528114611b6c5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016106c2565b50611a3b838383611df8565b6000611b84848461260b565b90506106346001600160a01b038316333084611e23565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600881901c600090815260d16020526040812054600160ff84161b16611ce35760cb60009054906101000a90046001600160a01b03166001600160a01b0316631579c1336040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c84919061265c565b600083815260cf60209081526040808320849055600886901c835260d19091528082208054600160ff88161b17905551919250829184917fe845f90872d41131b00e56189f857584a09b017ea97c14fe1c84b118d62d8e5191a3919050565b50600081815260cf60205260409020545b919050565b6040516001600160a01b038316602482015260448101829052611a3b90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611e5b565b6001600160a01b0381163b611dc95760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016106c2565b60008051602061270b83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611e0183611f2d565b600082511180611e0e5750805b15611a3b57611e1d8383611f6d565b50505050565b6040516001600160a01b0380851660248301528316604482015260648101829052611e1d9085906323b872dd60e01b90608401611d25565b6000611eb0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166120619092919063ffffffff16565b805190915015611a3b5780806020019051810190611ece9190612675565b611a3b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106c2565b611f3681611d5c565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b611fd55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016106c2565b600080846001600160a01b031684604051611ff091906126bb565b600060405180830381855af49150503d806000811461202b576040519150601f19603f3d011682016040523d82523d6000602084013e612030565b606091505b5091509150612058828260405180606001604052806027815260200161272b60279139612078565b95945050505050565b60606120708484600085612091565b949350505050565b60608315612087575081610634565b610634838361216c565b6060824710156120f25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106c2565b600080866001600160a01b0316858760405161210e91906126bb565b60006040518083038185875af1925050503d806000811461214b576040519150601f19603f3d011682016040523d82523d6000602084013e612150565b606091505b509150915061216187838387612196565b979650505050505050565b81511561217c5781518083602001fd5b8060405162461bcd60e51b81526004016106c291906126d7565b606083156122055782516000036121fe576001600160a01b0385163b6121fe5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106c2565b5081612070565b612070838361216c565b60006020828403121561222157600080fd5b5035919050565b80356001600160a01b0381168114611cf457600080fd5b60006020828403121561225157600080fd5b61063482612228565b6000806040838503121561226d57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156122a557600080fd5b6122ae83612228565b915060208301356001600160401b03808211156122ca57600080fd5b818501915085601f8301126122de57600080fd5b8135818111156122f0576122f061227c565b604051601f8201601f19908116603f011681019083821181831017156123185761231861227c565b8160405282815288602084870101111561233157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b634e487b7160e01b600052602160045260246000fd5b602081016004831061238b57634e487b7160e01b600052602160045260246000fd5b91905290565b80356001600160401b0381168114611cf457600080fd5b600080600080600080600060e0888a0312156123c357600080fd5b6123cc88612228565b965060208801359550604088013594506123e860608901612391565b93506080880135925060a0880135915061240460c08901612391565b905092959891949750929550565b6000806040838503121561242557600080fd5b8235915061243560208401612228565b90509250929050565b81516001600160a01b031681526020808301516001600160401b03169082015260408083015161012083019161247e908401826001600160401b03169052565b50606083015161249960608401826001600160a01b03169052565b506080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525092915050565b600080600080608085870312156124ea57600080fd5b6124f385612228565b935061250160208601612228565b925061250f60408601612228565b915061251d60608601612228565b905092959194509250565b634e487b7160e01b600052601160045260246000fd5b8181038181111561093e5761093e612528565b60008261256e57634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b808202811582820484141761093e5761093e612528565b8082018082111561093e5761093e612528565b6001600160401b0381811683821601908082111561265557612655612528565b5092915050565b60006020828403121561266e57600080fd5b5051919050565b60006020828403121561268757600080fd5b8151801515811461063457600080fd5b60005b838110156126b257818101518382015260200161269a565b50506000910152565b600082516126cd818460208701612697565b9190910192915050565b60208152600082518060208401526126f6816040850160208701612697565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220aedb84bd8c923b92db255213033fb1e1372be49deb78387760ea9edd95499eda64736f6c63430008110033",
  "devdoc": {
    "author": "Horizon DAO (Yuri Fernandes)",
    "events": {
      "CashBack(uint256,address,address,uint256)": {
        "details": "Emitted when an investors withdraw it's funds after an IRO fails"
      },
      "Commit(uint256,address,address,uint256,uint256)": {
        "details": "Emitted when a new Commit is made to an IRO"
      },
      "CreateIRO(uint256,address,address,uint64,uint64,uint256,uint256)": {
        "details": "Emitted when a new IRO is created"
      },
      "FundsWithdrawn(uint256,address,uint256,uint256,uint256)": {
        "details": "Emitted when funds from an IRO are withdrawn"
      },
      "RealEstateCreated(uint256,uint256)": {
        "details": "Emitted when a new real estate token ID is created"
      },
      "SetBaseCurrency(address,address)": {
        "details": "Emitted when a new currency is set"
      },
      "SetTreasury(address,address)": {
        "details": "Emitted when the Treasury contract is set"
      },
      "TokensClaimed(uint256,address,address,uint256)": {
        "details": "Emitted when tokens are claimed by investors"
      }
    },
    "kind": "dev",
    "methods": {
      "claim(uint256,address)": {
        "params": {
          "_iroId": "ID of the IRO",
          "_to": "Address to send the claimed tokens"
        }
      },
      "commit(uint256,uint256)": {
        "params": {
          "_amountToPurchase": "Amount of IRO tokens to purchase",
          "_iroId": "ID of the IRO"
        }
      },
      "createIRO(address,uint256,uint256,uint64,uint256,uint256,uint64)": {
        "details": "Create new IRO",
        "params": {
          "_assetPrice": "Price of the asset",
          "_duration": "Duration of the IRO in seconds",
          "_listingOwner": "Listing owner address",
          "_operationFee": "Operation fee in the IRO currency",
          "_startOffset": "Time before IRO begins",
          "_treasuryFee": "Treasury fee in absolute value",
          "_unitPrice": "Price per unit of IRO token in the IRO currency"
        }
      },
      "currentTotalSupply(uint256)": {
        "params": {
          "_iroId": "ID of the IRO"
        }
      },
      "expectedTotalSupply(uint256)": {
        "params": {
          "_iroId": "ID of the IRO"
        }
      },
      "getIRO(uint256)": {
        "params": {
          "_iroId": "ID of the IRO"
        }
      },
      "getStatus(uint256)": {
        "params": {
          "_iroId": "ID of the IRO"
        }
      },
      "initialize(address,address,address,address)": {
        "details": "Initialize IRO contract",
        "params": {
          "_currency": "Currency used to precify the IRO tokens",
          "_realEstateNft": "RealEstateNFT contract address",
          "_treasury": "Treasury contract address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "price(uint256,uint256)": {
        "params": {
          "_amountToPurchase": "Amount of IRO tokens to purchase",
          "_iroId": "ID of the IRO"
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "remainingTokens(uint256)": {
        "params": {
          "_iroId": "ID of the IRO"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setCurrency(address)": {
        "details": "Set a new base price token",
        "params": {
          "_currency": "currency address (ERC20)"
        }
      },
      "setTreasury(address)": {
        "details": "Set new treasury",
        "params": {
          "_treasury": "Treasury address"
        }
      },
      "targetCapInfo(uint256)": {
        "params": {
          "_iroId": "ID of the IRO"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "userAmountAndShare(uint256,address)": {
        "params": {
          "_iroId": "ID of the IRO",
          "_user": "User address"
        },
        "returns": {
          "amount": "Purchased amount",
          "share": "IRO share"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_iroId": "ID of the IRO"
        }
      }
    },
    "stateVariables": {
      "DENOMINATOR": {
        "details": "Denominator used to calculate fees/shares"
      },
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
      },
      "_fundsWithdrawn": {
        "details": "Points out whether funds have been withdrawn from IRO"
      },
      "_iros": {
        "details": "mapping (iroId => iro)"
      },
      "_nextAvailableId": {
        "details": "Next available IRO ID"
      },
      "_realEstateIdSet": {
        "details": "Whether an ID has already been set in the RealEstateNFT contract for the IRO"
      },
      "commits": {
        "details": "mapping (iroId => user => commit)"
      },
      "realEstateId": {
        "details": "mapping (iroId => realEstateId)"
      }
    },
    "title": "Initial Real Estate Offering (IRO)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim(uint256,address)": {
        "notice": "Claim purchased tokens when IRO successful or     get back commit amount in base currency if IRO failed"
      },
      "commit(uint256,uint256)": {
        "notice": "Commit to an IRO"
      },
      "currency()": {
        "notice": "Currency address"
      },
      "currentTotalSupply(uint256)": {
        "notice": "Get the current total supply"
      },
      "expectedTotalSupply(uint256)": {
        "notice": "Get the total supply of an IRO, if successful"
      },
      "getIRO(uint256)": {
        "notice": "Get IRO"
      },
      "getStatus(uint256)": {
        "notice": "Get IRO status"
      },
      "iroLength()": {
        "notice": "Get total amount of IROs"
      },
      "now64()": {
        "notice": "Get current time (uint64)"
      },
      "price(uint256,uint256)": {
        "notice": "Get the total price of a purchase"
      },
      "realEstateNft()": {
        "notice": "RealEstateNFT contract address"
      },
      "remainingTokens(uint256)": {
        "notice": "Get the amount of remaining IRO tokens"
      },
      "targetCapInfo(uint256)": {
        "notice": "Get the targetCap composition"
      },
      "treasury()": {
        "notice": "Treasury contract address"
      },
      "userAmountAndShare(uint256,address)": {
        "notice": "Get an user purchased amount and shares of an IRO"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw and distribute funds from successful IROs"
      }
    },
    "notice": "Used to run IROs, mint tokens to RealEstateNFT     and distribute funds",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 598,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 601,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3548,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 56,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 176,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 580,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 895,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10011,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "currency",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 10014,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "treasury",
        "offset": 0,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 10018,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "realEstateNft",
        "offset": 0,
        "slot": "203",
        "type": "t_contract(IRealEstateERC1155)9437"
      },
      {
        "astId": 10022,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "_nextAvailableId",
        "offset": 0,
        "slot": "204",
        "type": "t_struct(Counter)3555_storage"
      },
      {
        "astId": 10028,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "_iros",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_uint256,t_struct(IRO)10008_storage)"
      },
      {
        "astId": 10035,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "commits",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 10040,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "realEstateId",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 10044,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "_fundsWithdrawn",
        "offset": 0,
        "slot": "208",
        "type": "t_struct(BitMap)4787_storage"
      },
      {
        "astId": 10048,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "_realEstateIdSet",
        "offset": 0,
        "slot": "209",
        "type": "t_struct(BitMap)4787_storage"
      },
      {
        "astId": 11079,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "__gap",
        "offset": 0,
        "slot": "210",
        "type": "t_array(t_uint256)41_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)41_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[41]",
        "numberOfBytes": "1312"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRealEstateERC1155)9437": {
        "encoding": "inplace",
        "label": "contract IRealEstateERC1155",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(IRO)10008_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct InitialRealEstateOffering.IRO)",
        "numberOfBytes": "32",
        "value": "t_struct(IRO)10008_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(BitMap)4787_storage": {
        "encoding": "inplace",
        "label": "struct BitMapsUpgradeable.BitMap",
        "members": [
          {
            "astId": 4786,
            "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
            "label": "_data",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Counter)3555_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 3554,
            "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(IRO)10008_storage": {
        "encoding": "inplace",
        "label": "struct InitialRealEstateOffering.IRO",
        "members": [
          {
            "astId": 9991,
            "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
            "label": "listingOwner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9993,
            "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
            "label": "start",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 9995,
            "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
            "label": "end",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 9997,
            "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
            "label": "currency",
            "offset": 8,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 9999,
            "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
            "label": "treasuryFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10001,
            "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
            "label": "operationFee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10003,
            "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
            "label": "targetFunding",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10005,
            "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
            "label": "unitPrice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 10007,
            "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
            "label": "totalFunding",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
