{
  "address": "0xA6828B2422ab3316400C2FB5a7f97655A6B3d884",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_commitAmount",
          "type": "uint256"
        }
      ],
      "name": "CashBack",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountInBase",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_purchasedTokens",
          "type": "uint256"
        }
      ],
      "name": "Commit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_listingOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_unitPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_listingOwnerShare",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_treasuryFee",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_start",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_end",
          "type": "uint64"
        }
      ],
      "name": "CreateIRO",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "_realEstateFundsSet",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_listingOwnerAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_treasuryAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_realEstateReservesAmount",
          "type": "uint256"
        }
      ],
      "name": "FundsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "OwnerTokensClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_realEstateId",
          "type": "uint256"
        }
      ],
      "name": "RealEstateCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "SetBaseCurrency",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_realEstateReserves",
          "type": "address"
        }
      ],
      "name": "SetRealEstateReserves",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "SetTreasury",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountToPurchase",
          "type": "uint256"
        }
      ],
      "name": "commit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "commits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_listingOwner",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_listingOwnerShare",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_treasuryFee",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_reservesFee",
          "type": "uint16"
        },
        {
          "internalType": "uint64",
          "name": "_duration",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_softCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_hardCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_startOffset",
          "type": "uint64"
        }
      ],
      "name": "createIRO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currency",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        }
      ],
      "name": "getIRO",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "listingOwner",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "start",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "treasuryFee",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "reservesFee",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "listingOwnerShare",
              "type": "uint16"
            },
            {
              "internalType": "uint64",
              "name": "end",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "softCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hardCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalFunding",
              "type": "uint256"
            }
          ],
          "internalType": "struct InitialRealEstateOffering.IRO",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        }
      ],
      "name": "getStatus",
      "outputs": [
        {
          "internalType": "enum InitialRealEstateOffering.Status",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_realEstateNft",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_realEstateReserves",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "iroLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        }
      ],
      "name": "listingOwnerAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "listingOwnerClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "now64",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountToPurchase",
          "type": "uint256"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "realEstateId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realEstateNft",
      "outputs": [
        {
          "internalType": "contract IRealEstateERC1155",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realEstateReserves",
      "outputs": [
        {
          "internalType": "contract IRealEstateReserves",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        }
      ],
      "name": "remainingTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "setCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_realEstateReserves",
          "type": "address"
        }
      ],
      "name": "setRealEstateReserves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        }
      ],
      "name": "totalSupplyInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minTotalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "userAmountAndShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "share",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_iroId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xfb95603e37685767d49ca435156be4bc70e44f0ef34d70ed31e92e2972a32e92",
  "receipt": {
    "to": null,
    "from": "0x39a242169BA3B28623E6d235A4Bdd46287d4bae3",
    "contractAddress": "0xA6828B2422ab3316400C2FB5a7f97655A6B3d884",
    "transactionIndex": 77,
    "gasUsed": "2698785",
    "logsBloom": "0x
    "blockHash": "0x77b633540ca3a9ba70e6b4bfa91ba762d7f039188d15ad9a8acd8d45200e2a3d",
    "transactionHash": "0xfb95603e37685767d49ca435156be4bc70e44f0ef34d70ed31e92e2972a32e92",
    "logs": [],
    "blockNumber": 8161818,
    "cumulativeGasUsed": "15138679",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d43f36dc681802bcc23192177c38c9fd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_commitAmount\",\"type\":\"uint256\"}],\"name\":\"CashBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountInBase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_purchasedTokens\",\"type\":\"uint256\"}],\"name\":\"Commit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_listingOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_listingOwnerShare\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_treasuryFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_start\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_end\",\"type\":\"uint64\"}],\"name\":\"CreateIRO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_realEstateFundsSet\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_listingOwnerAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_treasuryAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_realEstateReservesAmount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"OwnerTokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_realEstateId\",\"type\":\"uint256\"}],\"name\":\"RealEstateCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"SetBaseCurrency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_realEstateReserves\",\"type\":\"address\"}],\"name\":\"SetRealEstateReserves\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"SetTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToPurchase\",\"type\":\"uint256\"}],\"name\":\"commit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"commits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_listingOwner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_listingOwnerShare\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_treasuryFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_reservesFee\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"_duration\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_startOffset\",\"type\":\"uint64\"}],\"name\":\"createIRO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"}],\"name\":\"getIRO\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"listingOwner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"start\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"treasuryFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"reservesFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"listingOwnerShare\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"end\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFunding\",\"type\":\"uint256\"}],\"internalType\":\"struct InitialRealEstateOffering.IRO\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum InitialRealEstateOffering.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_realEstateNft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_realEstateReserves\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iroLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"}],\"name\":\"listingOwnerAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"listingOwnerClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"now64\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToPurchase\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"realEstateId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realEstateNft\",\"outputs\":[{\"internalType\":\"contract IRealEstateERC1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realEstateReserves\",\"outputs\":[{\"internalType\":\"contract IRealEstateReserves\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"}],\"name\":\"remainingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"setCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_realEstateReserves\",\"type\":\"address\"}],\"name\":\"setRealEstateReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"}],\"name\":\"totalSupplyInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userAmountAndShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"share\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_iroId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Horizon DAO (Yuri Fernandes)\",\"events\":{\"CashBack(uint256,address,address,uint256)\":{\"details\":\"Emitted when an investors withdraw it's funds after an IRO fails\"},\"Commit(uint256,address,address,uint256,uint256)\":{\"details\":\"Emitted when a new Commit is made to an IRO\"},\"CreateIRO(uint256,address,uint256,uint16,uint16,uint64,uint64)\":{\"details\":\"Emitted when a new IRO is created\"},\"FundsWithdrawn(uint256,address,bool,uint256,uint256,uint256)\":{\"details\":\"Emitted when funds from an IRO are withdrawn\"},\"OwnerTokensClaimed(uint256,address,address,uint256)\":{\"details\":\"Emitted when the listing owner claims it's shares of the tokens\"},\"RealEstateCreated(uint256,uint256)\":{\"details\":\"Emitted when a new real estate token ID is created\"},\"SetBaseCurrency(address,address)\":{\"details\":\"Emitted when a new currency is set\"},\"SetRealEstateReserves(address,address)\":{\"details\":\"Emitted when the RealEstateReserves contract is set\"},\"SetTreasury(address,address)\":{\"details\":\"Emitted when the Treasury contract is set\"},\"TokensClaimed(uint256,address,address,uint256)\":{\"details\":\"Emitted when tokens are claimed by investors\"}},\"kind\":\"dev\",\"methods\":{\"claim(uint256,address)\":{\"params\":{\"_iroId\":\"ID of the IRO\",\"_to\":\"Address to send the claimed tokens\"}},\"commit(uint256,uint256)\":{\"params\":{\"_amountToPurchase\":\"Amount of IRO tokens to purchase\",\"_iroId\":\"ID of the IRO\"}},\"createIRO(address,uint16,uint16,uint16,uint64,uint256,uint256,uint256,uint64)\":{\"details\":\"Create new IRO\",\"params\":{\"_duration\":\"Duration of the IRO in seconds\",\"_hardCap\":\"Maximum fundraising in base price token\",\"_listingOwner\":\"Listing owner address\",\"_listingOwnerShare\":\"Listing owner share of IRO tokens in basis points\",\"_softCap\":\"Minimum fundraising in base price token\",\"_startOffset\":\"Time before IRO begins\",\"_treasuryFee\":\"Treasury fee percentage in basis points\",\"_unitPrice\":\"Price per unit of IRO token in base price token\"}},\"getIRO(uint256)\":{\"params\":{\"_iroId\":\"ID of the IRO\"}},\"getStatus(uint256)\":{\"params\":{\"_iroId\":\"ID of the IRO\"}},\"initialize(address,address,address,address,address)\":{\"details\":\"Initialize IRO contract\",\"params\":{\"_currency\":\"Currency used to precify the IRO tokens\",\"_realEstateNft\":\"RealEstateNFT contract address\",\"_realEstateReserves\":\"RealEstateReserves contract address\",\"_treasury\":\"Treasury contract address\"}},\"listingOwnerAmount(uint256)\":{\"params\":{\"_iroId\":\"ID of the IRO\"}},\"listingOwnerClaim(uint256,address)\":{\"params\":{\"_iroId\":\"ID of the IRO\",\"_to\":\"Address to send the tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"price(uint256,uint256)\":{\"params\":{\"_amountToPurchase\":\"Amount of IRO tokens to purchase\",\"_iroId\":\"ID of the IRO\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"remainingTokens(uint256)\":{\"params\":{\"_iroId\":\"ID of the IRO\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setCurrency(address)\":{\"details\":\"Set a new base price token\",\"params\":{\"_currency\":\"currency address (ERC20)\"}},\"setRealEstateReserves(address)\":{\"details\":\"Set new real estate reserves\",\"params\":{\"_realEstateReserves\":\"RealEstateReseres address\"}},\"setTreasury(address)\":{\"details\":\"Set new treasury\",\"params\":{\"_treasury\":\"Treasury address\"}},\"totalSupply(uint256)\":{\"params\":{\"_iroId\":\"ID of the IRO\"}},\"totalSupplyInterval(uint256)\":{\"params\":{\"_iroId\":\"ID of the IRO\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"userAmountAndShare(uint256,address)\":{\"params\":{\"_iroId\":\"ID of the IRO\",\"_user\":\"User address\"},\"returns\":{\"amount\":\"Purchased amount\",\"share\":\"IRO share\"}},\"withdraw(uint256)\":{\"params\":{\"_iroId\":\"ID of the IRO\"}}},\"stateVariables\":{\"DENOMINATOR\":{\"details\":\"Denominator used to calculate fees/shares\"},\"_fundsWithdrawn\":{\"details\":\"Points out whether funds have been withdrawn from IRO\"},\"_iros\":{\"details\":\"mapping (iroId => iro)\"},\"_listingOwnerClaimed\":{\"details\":\"Points out whether the listingOwner has claimed it's share\"},\"_nextAvailableId\":{\"details\":\"Next available IRO ID\"},\"_realEstateIdSet\":{\"details\":\"Whether an ID has already been set in the RealEstateNFT contract for the IRO\"},\"commits\":{\"details\":\"mapping (iroId => user => commit)\"},\"realEstateId\":{\"details\":\"mapping (iroId => realEstateId)\"}},\"title\":\"Initial Real Estate Offering (IRO)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(uint256,address)\":{\"notice\":\"Claim purchased tokens when IRO successful or     get back commit amount in base currency if IRO failed\"},\"commit(uint256,uint256)\":{\"notice\":\"Commit to an IRO\"},\"currency()\":{\"notice\":\"Currency address\"},\"getIRO(uint256)\":{\"notice\":\"Get IRO\"},\"getStatus(uint256)\":{\"notice\":\"Get IRO status\"},\"iroLength()\":{\"notice\":\"Get total amount of IROs\"},\"listingOwnerAmount(uint256)\":{\"notice\":\"Get current listing owner reNFT amount\"},\"listingOwnerClaim(uint256,address)\":{\"notice\":\"Claim listing owner tokens\"},\"now64()\":{\"notice\":\"Get current time (uint64)\"},\"price(uint256,uint256)\":{\"notice\":\"Get the total price of a purchase\"},\"realEstateNft()\":{\"notice\":\"RealEstateNFT contract address\"},\"realEstateReserves()\":{\"notice\":\"RealEstateReserves contract address\"},\"remainingTokens(uint256)\":{\"notice\":\"Get the amount of remaining IRO tokens\"},\"totalSupply(uint256)\":{\"notice\":\"Get the current total supply\"},\"totalSupplyInterval(uint256)\":{\"notice\":\"Get minimum and maximum supply\"},\"treasury()\":{\"notice\":\"Treasury contract address\"},\"userAmountAndShare(uint256,address)\":{\"notice\":\"Get an user purchased amount and shares of an IRO\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw and distribute funds from successful IROs\"}},\"notice\":\"Used to run IROs, mint tokens to RealEstateNFT     and distribute funds\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/InitialRealEstateOffering.sol\":\"InitialRealEstateOffering\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/BitMapsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMapsUpgradeable {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(\\n        BitMap storage bitmap,\\n        uint256 index,\\n        bool value\\n    ) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0x93282769cdd2804524608a8a23f6d42b888ec0acb36eabd1d5f84b2bf1f374f3\",\"license\":\"MIT\"},\"contracts/interfaces/IRealEstateERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IRealEstateERC1155 {\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function nextRealEstateId() external view returns (uint256);\\r\\n\\r\\n    function setMinter(address _minter) external;\\r\\n\\r\\n    function setBurner(address _burner) external;\\r\\n\\r\\n    function mint(uint256 _id, address _to, uint256 _amount) external;\\r\\n\\r\\n    function burn(uint256 _id, uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x401e634d9d3657586b855573a14bea603306809132bc93b343319d62b8146321\",\"license\":\"MIT\"},\"contracts/interfaces/IRealEstateReserves.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IRealEstateReserves {\\r\\n    function deposit(uint256 _id, uint256 _amount, address _currency) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x2787ddc5c24259281fd22406df82be3bd4943492bd14c1eb6af05520e5a78ca7\",\"license\":\"MIT\"},\"contracts/protocol/InitialRealEstateOffering.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport { CountersUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\r\\nimport { BitMapsUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/structs/BitMapsUpgradeable.sol\\\";\\r\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport { SafeERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\n\\r\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\n\\r\\nimport { IRealEstateERC1155 } from \\\"../interfaces/IRealEstateERC1155.sol\\\";\\r\\nimport { IRealEstateReserves } from \\\"../interfaces/IRealEstateReserves.sol\\\";\\r\\n\\r\\n/// @title Initial Real Estate Offering (IRO)\\r\\n/// @author Horizon DAO (Yuri Fernandes)\\r\\n/// @notice Used to run IROs, mint tokens to RealEstateNFT\\r\\n///     and distribute funds\\r\\ncontract InitialRealEstateOffering is OwnableUpgradeable, UUPSUpgradeable {\\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\r\\n    using BitMapsUpgradeable for BitMapsUpgradeable.BitMap;\\r\\n\\r\\n    /// @dev Denominator used to calculate fees/shares\\r\\n    uint16 public constant DENOMINATOR = 10000;\\r\\n\\r\\n    /// @dev IRO status enum\\r\\n    /// @dev Status descriptions:\\r\\n    ///     - PENDING: IRO hasn't started\\r\\n    ///     - ONGOING: IRO is active, commits are allowed\\r\\n    ///     - SUCCESS: IRO has been successful, claiming is allowed\\r\\n    ///     - FAIL: IRO failed, committed funds are withdrawable\\r\\n    enum Status {\\r\\n        PENDING,\\r\\n        ONGOING,\\r\\n        SUCCESS,\\r\\n        FAIL\\r\\n    }\\r\\n\\r\\n    /// @dev Initial Real Estate Offerring structure\\r\\n    /// @dev Since timestamps are 64 bit integers, last IRO\\r\\n    ///     should finish at 21 de julho de 2554 11:34:33.709 UTC.\\r\\n    /// @dev Field description:\\r\\n    ///     - listingOwner: Address of the IRO listing owner\\r\\n    ///     - start: IRO start time\\r\\n    ///     - treasuryFee: Basis point treasury fee over total funds\\r\\n    ///     - reservesFee: Basis point real estate reserves fee over total funds\\r\\n    ///     - end: IRO end time\\r\\n    ///     - currency: IRO currency, used as a security measurement, if\\r\\n    ///         the contract-level currency has changed during active IROs\\r\\n    ///     - softCap: Minimum amount of funds necessary for the IRO to be\\r\\n    ///         successful\\r\\n    ///     - hardCap: Maximum amount of funds possible to the IRO\\r\\n    ///     - unitPrice: IRO price per token\\r\\n    ///     - totalFunding: Total amount of funds collected during an IRO\\r\\n    struct IRO {\\r\\n        address listingOwner;\\r\\n        uint64 start;\\r\\n        uint16 treasuryFee;\\r\\n        uint16 reservesFee;\\r\\n        uint16 listingOwnerShare;\\r\\n        uint64 end;\\r\\n        address currency;\\r\\n        uint256 softCap;\\r\\n        uint256 hardCap;\\r\\n        uint256 unitPrice;\\r\\n        uint256 totalFunding;\\r\\n    }\\r\\n\\r\\n    /// @notice Currency address\\r\\n    address public currency;\\r\\n\\r\\n    /// @notice Treasury contract address\\r\\n    address public treasury;\\r\\n\\r\\n    /// @notice RealEstateNFT contract address\\r\\n    IRealEstateERC1155 public realEstateNft;\\r\\n\\r\\n    /// @notice RealEstateReserves contract address\\r\\n    IRealEstateReserves public realEstateReserves;\\r\\n\\r\\n    /// @dev Next available IRO ID\\r\\n    CountersUpgradeable.Counter private _nextAvailableId;\\r\\n\\r\\n    /// @dev mapping (iroId => iro)\\r\\n    mapping(uint256 => IRO) private _iros;\\r\\n\\r\\n    /// @dev mapping (iroId => user => commit)\\r\\n    mapping(uint256 => mapping(address => uint256)) public commits;\\r\\n\\r\\n    /// @dev mapping (iroId => realEstateId)\\r\\n    mapping(uint256 => uint256) public realEstateId;\\r\\n\\r\\n    /// @dev Points out whether funds have been withdrawn from IRO\\r\\n    BitMapsUpgradeable.BitMap private _fundsWithdrawn;\\r\\n\\r\\n    /// @dev Points out whether the listingOwner has claimed it's share\\r\\n    BitMapsUpgradeable.BitMap private _listingOwnerClaimed;\\r\\n\\r\\n    /// @dev Whether an ID has already been set in the RealEstateNFT contract for the IRO\\r\\n    BitMapsUpgradeable.BitMap private _realEstateIdSet;\\r\\n\\r\\n    /// @dev Emitted when a new IRO is created\\r\\n    event CreateIRO(\\r\\n        uint256 indexed _iroId,\\r\\n        address indexed _listingOwner,\\r\\n        uint256 _unitPrice,\\r\\n        uint16 _listingOwnerShare,\\r\\n        uint16 _treasuryFee,\\r\\n        uint64 _start,\\r\\n        uint64 _end\\r\\n    );\\r\\n\\r\\n    /// @dev Emitted when a new Commit is made to an IRO\\r\\n    event Commit(\\r\\n        uint256 indexed _iroId,\\r\\n        address indexed _user,\\r\\n        address indexed _currency,\\r\\n        uint256 _amountInBase,\\r\\n        uint256 _purchasedTokens\\r\\n    );\\r\\n\\r\\n    /// @dev Emitted when tokens are claimed by investors\\r\\n    event TokensClaimed(uint256 indexed _iroId, address indexed _by, address indexed _to, uint256 _amount);\\r\\n\\r\\n    /// @dev Emitted when the listing owner claims it's shares of the tokens\\r\\n    event OwnerTokensClaimed(uint256 indexed _iroId, address indexed _by, address indexed _to, uint256 _amount);\\r\\n\\r\\n    /// @dev Emitted when an investors withdraw it's funds after an IRO fails\\r\\n    event CashBack(uint256 indexed _iroId, address indexed _by, address indexed _to, uint256 _commitAmount);\\r\\n\\r\\n    /// @dev Emitted when a new currency is set\\r\\n    event SetBaseCurrency(address indexed _by, address indexed _currency);\\r\\n\\r\\n    /// @dev Emitted when the Treasury contract is set\\r\\n    event SetTreasury(address indexed _by, address indexed _treasury);\\r\\n\\r\\n    /// @dev Emitted when the RealEstateReserves contract is set\\r\\n    event SetRealEstateReserves(address indexed _by, address indexed _realEstateReserves);\\r\\n\\r\\n    /// @dev Emitted when a new real estate token ID is created\\r\\n    event RealEstateCreated(uint256 indexed _iroId, uint256 indexed _realEstateId);\\r\\n\\r\\n    /// @dev Emitted when funds from an IRO are withdrawn\\r\\n    event FundsWithdrawn(\\r\\n        uint256 indexed _iroId,\\r\\n        address indexed _by,\\r\\n        bool indexed _realEstateFundsSet,\\r\\n        uint256 _listingOwnerAmount,\\r\\n        uint256 _treasuryAmount,\\r\\n        uint256 _realEstateReservesAmount\\r\\n    );\\r\\n\\r\\n    /// @dev Initialize IRO contract\\r\\n    /// @param _realEstateNft RealEstateNFT contract address\\r\\n    /// @param _treasury Treasury contract address\\r\\n    /// @param _realEstateReserves RealEstateReserves contract address\\r\\n    /// @param _currency Currency used to precify the IRO tokens\\r\\n    function initialize(\\r\\n        address _owner,\\r\\n        address _realEstateNft,\\r\\n        address _treasury,\\r\\n        address _realEstateReserves,\\r\\n        address _currency\\r\\n    ) external initializer {\\r\\n        require(_realEstateNft != address(0), \\\"!_realEstateNft\\\");\\r\\n        require(_treasury != address(0), \\\"!_treasury\\\");\\r\\n        require(_currency != address(0), \\\"!_currency\\\");\\r\\n        realEstateNft = IRealEstateERC1155(_realEstateNft);\\r\\n        treasury = _treasury;\\r\\n        currency = _currency;\\r\\n        realEstateReserves = IRealEstateReserves(_realEstateReserves);\\r\\n        _transferOwnership(_owner);\\r\\n    }\\r\\n\\r\\n    /// @dev Set a new base price token\\r\\n    /// @param _currency currency address (ERC20)\\r\\n    function setCurrency(address _currency) external onlyOwner {\\r\\n        require(_currency != address(0), \\\"!_currency\\\");\\r\\n        currency = _currency;\\r\\n        emit SetBaseCurrency(msg.sender, _currency);\\r\\n    }\\r\\n\\r\\n    /// @dev Set new treasury\\r\\n    /// @param _treasury Treasury address\\r\\n    function setTreasury(address _treasury) external onlyOwner {\\r\\n        require(_treasury != address(0), \\\"!_treasury\\\");\\r\\n        treasury = _treasury;\\r\\n        emit SetTreasury(msg.sender, _treasury);\\r\\n    }\\r\\n\\r\\n    /// @dev Set new real estate reserves\\r\\n    /// @param _realEstateReserves RealEstateReseres address\\r\\n    function setRealEstateReserves(address _realEstateReserves) external onlyOwner {\\r\\n        require(_realEstateReserves != address(0), \\\"!_realEstateReserves\\\");\\r\\n        realEstateReserves = IRealEstateReserves(_realEstateReserves);\\r\\n        emit SetRealEstateReserves(msg.sender, _realEstateReserves);\\r\\n    }\\r\\n\\r\\n    /// @dev Create new IRO\\r\\n    /// @param _listingOwner Listing owner address\\r\\n    /// @param _listingOwnerShare Listing owner share of IRO tokens in basis points\\r\\n    /// @param _treasuryFee Treasury fee percentage in basis points\\r\\n    /// @param _duration Duration of the IRO in seconds\\r\\n    /// @param _softCap Minimum fundraising in base price token\\r\\n    /// @param _hardCap Maximum fundraising in base price token\\r\\n    /// @param _unitPrice Price per unit of IRO token in base price token\\r\\n    /// @param _startOffset Time before IRO begins\\r\\n    function createIRO(\\r\\n        address _listingOwner,\\r\\n        uint16 _listingOwnerShare,\\r\\n        uint16 _treasuryFee,\\r\\n        uint16 _reservesFee,\\r\\n        uint64 _duration,\\r\\n        uint256 _softCap,\\r\\n        uint256 _hardCap,\\r\\n        uint256 _unitPrice,\\r\\n        uint64 _startOffset\\r\\n    ) external onlyOwner {\\r\\n        require(_listingOwnerShare <= DENOMINATOR, \\\"Invalid basis point\\\");\\r\\n        require(_treasuryFee + _reservesFee <= DENOMINATOR, \\\"Fees should be less than 100%\\\");\\r\\n        require((_hardCap - _softCap) % _unitPrice == 0, \\\"Caps should be multiples of unitPrice\\\");\\r\\n\\r\\n        uint256 currentId = iroLength();\\r\\n        uint64 start_ = now64() + _startOffset;\\r\\n        uint64 end_ = start_ + _duration;\\r\\n        _iros[currentId] = IRO({\\r\\n            listingOwner: _listingOwner,\\r\\n            start: start_,\\r\\n            treasuryFee: _treasuryFee,\\r\\n            reservesFee: _reservesFee,\\r\\n            listingOwnerShare: _listingOwnerShare,\\r\\n            end: end_,\\r\\n            softCap: _softCap,\\r\\n            hardCap: _hardCap,\\r\\n            unitPrice: _unitPrice,\\r\\n            totalFunding: 0,\\r\\n            currency: currency\\r\\n        });\\r\\n        _nextAvailableId.increment();\\r\\n\\r\\n        emit CreateIRO(currentId, _listingOwner, _unitPrice, _listingOwnerShare, _treasuryFee, start_, end_);\\r\\n    }\\r\\n\\r\\n    /// @notice Commit to an IRO\\r\\n    /// @param _iroId ID of the IRO\\r\\n    /// @param _amountToPurchase Amount of IRO tokens to purchase\\r\\n    function commit(uint256 _iroId, uint256 _amountToPurchase) external {\\r\\n        require(_amountToPurchase > 0, \\\"_amountToPurchase should be greater than zero\\\");\\r\\n        IRO memory iro = getIRO(_iroId);\\r\\n        require(_getStatus(iro) == Status.ONGOING, \\\"IRO is not active\\\");\\r\\n        require(iro.totalFunding + _amountToPurchase * iro.unitPrice <= iro.hardCap, \\\"Hardcap reached\\\");\\r\\n\\r\\n        uint256 valueInBase = _processPayment(iro.unitPrice, _amountToPurchase, iro.currency);\\r\\n\\r\\n        commits[_iroId][msg.sender] += valueInBase;\\r\\n        _iros[_iroId].totalFunding += valueInBase;\\r\\n\\r\\n        emit Commit(_iroId, msg.sender, iro.currency, valueInBase, _amountToPurchase);\\r\\n    }\\r\\n\\r\\n    /// @dev Enable receiving ETH\\r\\n    receive() external payable {}\\r\\n\\r\\n    /// @notice Claim purchased tokens when IRO successful or\\r\\n    ///     get back commit amount in base currency if IRO failed\\r\\n    /// @param _iroId ID of the IRO\\r\\n    /// @param _to Address to send the claimed tokens\\r\\n    function claim(uint256 _iroId, address _to) external {\\r\\n        IRO memory iro = getIRO(_iroId);\\r\\n        Status status = _getStatus(iro);\\r\\n        require(status > Status.ONGOING, \\\"IRO not finished\\\");\\r\\n        uint256 commitAmount = commits[_iroId][msg.sender];\\r\\n        require(commitAmount > 0, \\\"Nothing to mint\\\");\\r\\n        if (status == Status.SUCCESS) {\\r\\n            uint256 amountToMint = commitAmount / iro.unitPrice;\\r\\n            realEstateNft.mint(_retrieveRealEstateId(_iroId), _to, amountToMint);\\r\\n            emit TokensClaimed(_iroId, msg.sender, _to, amountToMint);\\r\\n        } else {\\r\\n            IERC20Upgradeable(currency).safeTransfer(_to, commitAmount);\\r\\n            commits[_iroId][msg.sender] = 0;\\r\\n            emit CashBack(_iroId, msg.sender, _to, commitAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Claim listing owner tokens\\r\\n    /// @param _iroId ID of the IRO\\r\\n    /// @param _to Address to send the tokens\\r\\n    function listingOwnerClaim(uint256 _iroId, address _to) external {\\r\\n        IRO memory iro = getIRO(_iroId);\\r\\n        require(msg.sender == iro.listingOwner, \\\"!allowed\\\");\\r\\n        require(!_listingOwnerClaimed.get(_iroId), \\\"Already claimed\\\");\\r\\n        require(_getStatus(iro) == Status.SUCCESS, \\\"IRO not successful\\\");\\r\\n        require(iro.listingOwnerShare > 0, \\\"Nothing to claim\\\");\\r\\n        uint256 listingOwnerAmount_ = _listingOwnerAmount(iro.totalFunding, iro.unitPrice, iro.listingOwnerShare);\\r\\n        realEstateNft.mint(_retrieveRealEstateId(_iroId), _to, listingOwnerAmount_);\\r\\n        _listingOwnerClaimed.set(_iroId);\\r\\n        emit OwnerTokensClaimed(_iroId, msg.sender, _to, listingOwnerAmount_);\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraw and distribute funds from successful IROs\\r\\n    /// @param _iroId ID of the IRO\\r\\n    function withdraw(uint256 _iroId) external {\\r\\n        IRO memory iro = getIRO(_iroId);\\r\\n        require(_getStatus(iro) == Status.SUCCESS, \\\"IRO not successful\\\");\\r\\n        require(!_fundsWithdrawn.get(_iroId), \\\"Already withdrawn\\\");\\r\\n        (\\r\\n            uint256 listingOwnerAmount_,\\r\\n            uint256 treasuryAmount,\\r\\n            uint256 realEstateReservesAmount,\\r\\n            bool realEstateReservesSet\\r\\n        ) = _distributeFunds(\\r\\n                iro.listingOwner,\\r\\n                treasury,\\r\\n                realEstateReserves,\\r\\n                _retrieveRealEstateId(_iroId),\\r\\n                iro.totalFunding,\\r\\n                iro.treasuryFee,\\r\\n                iro.reservesFee,\\r\\n                iro.currency\\r\\n            );\\r\\n        _fundsWithdrawn.set(_iroId);\\r\\n        emit FundsWithdrawn(\\r\\n            _iroId,\\r\\n            msg.sender,\\r\\n            realEstateReservesSet,\\r\\n            listingOwnerAmount_,\\r\\n            treasuryAmount,\\r\\n            realEstateReservesAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Get an user purchased amount and shares of an IRO\\r\\n    /// @param _iroId ID of the IRO\\r\\n    /// @param _user User address\\r\\n    /// @return amount Purchased amount\\r\\n    /// @return share IRO share\\r\\n    function userAmountAndShare(uint256 _iroId, address _user) external view returns (uint256 amount, uint16 share) {\\r\\n        IRO memory iro = getIRO(_iroId);\\r\\n        uint256 userCommit = commits[_iroId][_user];\\r\\n        amount = userCommit / iro.unitPrice;\\r\\n        share = uint16(\\r\\n            (amount * DENOMINATOR) / _calculateSupply(iro.totalFunding, iro.unitPrice, iro.listingOwnerShare)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Get the total price of a purchase\\r\\n    /// @param _iroId ID of the IRO\\r\\n    /// @param _amountToPurchase Amount of IRO tokens to purchase\\r\\n    function price(uint256 _iroId, uint256 _amountToPurchase) external view returns (uint256) {\\r\\n        IRO memory iro = getIRO(_iroId);\\r\\n        return _amountToPurchase * iro.unitPrice;\\r\\n    }\\r\\n\\r\\n    /// @notice Get the current total supply\\r\\n    /// @param _iroId ID of the IRO\\r\\n    function totalSupply(uint256 _iroId) external view returns (uint256) {\\r\\n        IRO memory iro = getIRO(_iroId);\\r\\n        return _calculateSupply(iro.totalFunding, iro.unitPrice, iro.listingOwnerShare);\\r\\n    }\\r\\n\\r\\n    /// @notice Get minimum and maximum supply\\r\\n    /// @param _iroId ID of the IRO\\r\\n    function totalSupplyInterval(\\r\\n        uint256 _iroId\\r\\n    ) external view returns (uint256 minTotalSupply, uint256 maxTotalSupply) {\\r\\n        IRO memory iro = getIRO(_iroId);\\r\\n        minTotalSupply = _calculateSupply(iro.softCap, iro.unitPrice, iro.listingOwnerShare);\\r\\n        maxTotalSupply = _calculateSupply(iro.hardCap, iro.unitPrice, iro.listingOwnerShare);\\r\\n    }\\r\\n\\r\\n    /// @notice Get the amount of remaining IRO tokens\\r\\n    /// @param _iroId ID of the IRO\\r\\n    function remainingTokens(uint256 _iroId) external view returns (uint256) {\\r\\n        IRO memory iro = getIRO(_iroId);\\r\\n        return (iro.hardCap - iro.totalFunding) / iro.unitPrice;\\r\\n    }\\r\\n\\r\\n    /// @notice Get IRO status\\r\\n    /// @param _iroId ID of the IRO\\r\\n    function getStatus(uint256 _iroId) external view returns (Status) {\\r\\n        IRO memory iro = _iros[_iroId];\\r\\n        return _getStatus(iro);\\r\\n    }\\r\\n\\r\\n    /// @notice Get IRO\\r\\n    /// @param _iroId ID of the IRO\\r\\n    function getIRO(uint256 _iroId) public view returns (IRO memory) {\\r\\n        require(_iroId < iroLength(), \\\"_iroId out-of-bounds\\\");\\r\\n        return _iros[_iroId];\\r\\n    }\\r\\n\\r\\n    /// @notice Get current time (uint64)\\r\\n    function now64() public view returns (uint64) {\\r\\n        return uint64(block.timestamp);\\r\\n    }\\r\\n\\r\\n    /// @notice Get total amount of IROs\\r\\n    function iroLength() public view returns (uint256) {\\r\\n        return _nextAvailableId.current();\\r\\n    }\\r\\n\\r\\n    /// @notice Get current listing owner reNFT amount\\r\\n    /// @param _iroId ID of the IRO\\r\\n    function listingOwnerAmount(uint256 _iroId) public view returns (uint256 amount) {\\r\\n        IRO memory iro = _iros[_iroId];\\r\\n        amount = _listingOwnerAmount(iro.totalFunding, iro.unitPrice, iro.listingOwnerShare);\\r\\n    }\\r\\n\\r\\n    /// @dev Retrieve the realEstateId associated with a given IRO\\r\\n    /// @dev If none is assigned, assigns a new one\\r\\n    /// @param _iroId ID of the IRO\\r\\n    function _retrieveRealEstateId(uint256 _iroId) internal returns (uint256 _realEstateId) {\\r\\n        if (!_realEstateIdSet.get(_iroId)) {\\r\\n            _realEstateId = realEstateNft.nextRealEstateId();\\r\\n            realEstateId[_iroId] = _realEstateId;\\r\\n            _realEstateIdSet.set(_iroId);\\r\\n            emit RealEstateCreated(_iroId, _realEstateId);\\r\\n        } else {\\r\\n            _realEstateId = realEstateId[_iroId];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc UUPSUpgradeable\\r\\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyOwner {}\\r\\n\\r\\n    /// @dev Get status of an IRO\\r\\n    /// @param _iro IRO structure\\r\\n    function _getStatus(IRO memory _iro) internal view returns (Status) {\\r\\n        if (now64() <= _iro.start) return Status.PENDING;\\r\\n        if (now64() < _iro.end) {\\r\\n            if (_iro.totalFunding == _iro.hardCap) return Status.SUCCESS;\\r\\n            return Status.ONGOING;\\r\\n        }\\r\\n        if (now64() >= _iro.end) {\\r\\n            if (_iro.totalFunding < _iro.softCap) return Status.FAIL;\\r\\n            return Status.SUCCESS;\\r\\n        }\\r\\n        return Status.FAIL;\\r\\n    }\\r\\n\\r\\n    /// @dev Calculate total supply\\r\\n    /// @param _totalFunding Total IRO funding\\r\\n    /// @param _unitPrice IRO token unit price\\r\\n    /// @param _listingOwnerShare Listing owner token share\\r\\n    function _calculateSupply(\\r\\n        uint256 _totalFunding,\\r\\n        uint256 _unitPrice,\\r\\n        uint16 _listingOwnerShare\\r\\n    ) internal pure returns (uint256) {\\r\\n        return _totalFunding / _unitPrice + _listingOwnerAmount(_totalFunding, _unitPrice, _listingOwnerShare);\\r\\n    }\\r\\n\\r\\n    /// @dev Calculate listing owner amount\\r\\n    /// @dev Should be less than 100% or it will overflows\\r\\n    /// @param _totalFunding Total IRO funding\\r\\n    /// @param _unitPrice IRO token unit price\\r\\n    /// @param _share Listing owner token share\\r\\n    /// @return amount Amount of tokens\\r\\n    function _listingOwnerAmount(\\r\\n        uint256 _totalFunding,\\r\\n        uint256 _unitPrice,\\r\\n        uint16 _share\\r\\n    ) internal pure returns (uint256 amount) {\\r\\n        uint256 totalPurchased = _totalFunding / _unitPrice;\\r\\n        amount = (totalPurchased * _share) / (DENOMINATOR - _share);\\r\\n    }\\r\\n\\r\\n    /// @dev Process commit payment\\r\\n    /// @param _unitPrice Unit price of the token\\r\\n    /// @param _amountToPurchase Amount of tokens to purchase\\r\\n    /// @param _currency Payment currency address\\r\\n    function _processPayment(\\r\\n        uint256 _unitPrice,\\r\\n        uint256 _amountToPurchase,\\r\\n        address _currency\\r\\n    ) private returns (uint256 value) {\\r\\n        value = _amountToPurchase * _unitPrice;\\r\\n        IERC20Upgradeable(_currency).safeTransferFrom(msg.sender, address(this), value);\\r\\n    }\\r\\n\\r\\n    /// @dev Distribute funds during IRO withdrawal\\r\\n    /// @param _listingOwner The listing owner of the IRO\\r\\n    /// @param _treasury Treasury contract address\\r\\n    /// @param _realEstateReserves RealEstateReserves contract address\\r\\n    /// @param _realEstateId ID of the RealEstate token to receive the funds\\r\\n    /// @param _totalFunding Total funds from the IRO\\r\\n    /// @param _treasuryFee Treasury fee\\r\\n    /// @param _currency IRO currency address\\r\\n    function _distributeFunds(\\r\\n        address _listingOwner,\\r\\n        address _treasury,\\r\\n        IRealEstateReserves _realEstateReserves,\\r\\n        uint256 _realEstateId,\\r\\n        uint256 _totalFunding,\\r\\n        uint16 _treasuryFee,\\r\\n        uint16 _reservesFee,\\r\\n        address _currency\\r\\n    )\\r\\n        private\\r\\n        returns (\\r\\n            uint256 listingOwnerAmount_,\\r\\n            uint256 treasuryAmount,\\r\\n            uint256 realEstateReservesAmount,\\r\\n            bool realEstateReservesSet\\r\\n        )\\r\\n    {\\r\\n        treasuryAmount = (_treasuryFee * _totalFunding) / DENOMINATOR;\\r\\n        realEstateReservesAmount = (_reservesFee * _totalFunding) / DENOMINATOR;\\r\\n        if (address(_realEstateReserves) != address(0)) {\\r\\n            realEstateReservesSet = true;\\r\\n            if (treasuryAmount > 0) {\\r\\n                IERC20Upgradeable(_currency).safeTransfer(_treasury, treasuryAmount);\\r\\n            }\\r\\n\\r\\n            if (realEstateReservesAmount > 0) {\\r\\n                IERC20Upgradeable(_currency).safeApprove(address(_realEstateReserves), realEstateReservesAmount);\\r\\n                _realEstateReserves.deposit(_realEstateId, realEstateReservesAmount, _currency);\\r\\n            }\\r\\n        } else {\\r\\n            IERC20Upgradeable(_currency).safeTransfer(_treasury, treasuryAmount + realEstateReservesAmount);\\r\\n        }\\r\\n        listingOwnerAmount_ = _totalFunding - (treasuryAmount + realEstateReservesAmount);\\r\\n        IERC20Upgradeable(_currency).safeTransfer(_listingOwner, listingOwnerAmount_);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2b7329cabfd95d335d5e0d56414916fa05d3be20bc330f699939558320418967\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b50608051612fde61004c60003960008181610d5f01528181610d9f01528181610e6701528181610ea70152610f3a0152612fde6000f3fe6080604052600436106101e75760003560e01c80638da5cb5b11610102578063ddd5e1b211610095578063ef217dbd11610064578063ef217dbd146105f4578063f0f4426014610609578063f1d909a114610629578063f2fde38b1461064957600080fd5b8063ddd5e1b214610570578063de9ee90b14610590578063e5a6b10f146105b4578063e915c559146105d457600080fd5b80639a19b73b116100d15780639a19b73b146104cb578063a412487d146104f8578063ad91203b14610518578063bd85b0391461055057600080fd5b80638da5cb5b14610444578063918f86741461046257806395ba7c5a1461048b578063976d1629146104ab57600080fd5b806352d1902d1161017a57806361d027b31161014957806361d027b31461038a57806364ef7f22146103c2578063715018a6146103f7578063885d68a81461040c57600080fd5b806352d1902d146102fb5780635bf56bc4146103105780635c622a0e14610330578063606b77db1461035d57600080fd5b80632f84c391116101b65780632f84c391146102885780633659cfe6146102a8578063487a2395146102c85780634f1ef286146102e857600080fd5b80631459457a146101f3578063171ee95a1461021557806323b3359f146102485780632e1a7d4d1461026857600080fd5b366101ee57005b600080fd5b3480156101ff57600080fd5b5061021361020e36600461299e565b610669565b005b34801561022157600080fd5b50610235610230366004612a03565b61089d565b6040519081526020015b60405180910390f35b34801561025457600080fd5b50610213610263366004612a1c565b6108d8565b34801561027457600080fd5b50610213610283366004612a03565b610b35565b34801561029457600080fd5b506102136102a3366004612a48565b610cbe565b3480156102b457600080fd5b506102136102c3366004612a48565b610d55565b3480156102d457600080fd5b506102356102e3366004612a63565b610e34565b6102136102f6366004612a9b565b610e5d565b34801561030757600080fd5b50610235610f2d565b34801561031c57600080fd5b5061021361032b366004612a63565b610fe0565b34801561033c57600080fd5b5061035061034b366004612a03565b6111d0565b60405161023f9190612b72565b34801561036957600080fd5b50610235610378366004612a03565b60d06020526000908152604090205481565b34801561039657600080fd5b5060ca546103aa906001600160a01b031681565b6040516001600160a01b03909116815260200161023f565b3480156103ce57600080fd5b506103e26103dd366004612a03565b611293565b6040805192835260208301919091520161023f565b34801561040357600080fd5b506102136112de565b34801561041857600080fd5b50610235610427366004612a1c565b60cf60209081526000928352604080842090915290825290205481565b34801561045057600080fd5b506033546001600160a01b03166103aa565b34801561046e57600080fd5b5061047861271081565b60405161ffff909116815260200161023f565b34801561049757600080fd5b506102136104a6366004612bc3565b6112f2565b3480156104b757600080fd5b5060cc546103aa906001600160a01b031681565b3480156104d757600080fd5b506104eb6104e6366004612a03565b6116b1565b60405161023f9190612c56565b34801561050457600080fd5b50610235610513366004612a03565b611814565b34801561052457600080fd5b50610538610533366004612a1c565b6118e1565b6040805192835261ffff90911660208301520161023f565b34801561055c57600080fd5b5061023561056b366004612a03565b611962565b34801561057c57600080fd5b5061021361058b366004612a1c565b611989565b34801561059c57600080fd5b506040516001600160401b034216815260200161023f565b3480156105c057600080fd5b5060c9546103aa906001600160a01b031681565b3480156105e057600080fd5b5060cb546103aa906001600160a01b031681565b34801561060057600080fd5b50610235611bce565b34801561061557600080fd5b50610213610624366004612a48565b611bde565b34801561063557600080fd5b50610213610644366004612a48565b611c75565b34801561065557600080fd5b50610213610664366004612a48565b611d16565b600054610100900460ff16158080156106895750600054600160ff909116105b806106a35750303b1580156106a3575060005460ff166001145b61070b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801561072e576000805461ff0019166101001790555b6001600160a01b0385166107765760405162461bcd60e51b815260206004820152600f60248201526e0857dc99585b115cdd185d1953999d608a1b6044820152606401610702565b6001600160a01b0384166107b95760405162461bcd60e51b815260206004820152600a602482015269215f747265617375727960b01b6044820152606401610702565b6001600160a01b0382166107fc5760405162461bcd60e51b815260206004820152600a602482015269215f63757272656e637960b01b6044820152606401610702565b60cb80546001600160a01b038088166001600160a01b03199283161790925560ca805487841690831617905560c9805485841690831617905560cc80549286169290911691909117905561084f86611d88565b8015610895576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b6000806108a9836116b1565b90508061012001518161014001518261010001516108c79190612d43565b6108d19190612d6c565b9392505050565b60006108e3836116b1565b80519091506001600160a01b0316331461092a5760405162461bcd60e51b815260206004820152600860248201526708585b1b1bddd95960c21b6044820152606401610702565b600883901c600090815260d26020526040902054600160ff85161b16156109855760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e4818db185a5b5959608a1b6044820152606401610702565b600261099082611dda565b60038111156109a1576109a1612b5c565b146109e35760405162461bcd60e51b8152602060048201526012602482015271125493c81b9bdd081cdd58d8d95cdcd99d5b60721b6044820152606401610702565b6000816080015161ffff1611610a2e5760405162461bcd60e51b815260206004820152601060248201526f4e6f7468696e6720746f20636c61696d60801b6044820152606401610702565b6000610a498261014001518361012001518460800151611e8c565b60cb549091506001600160a01b031663836a1040610a6686611ece565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b038616602482015260448101849052606401600060405180830381600087803b158015610ab557600080fd5b505af1158015610ac9573d6000803e3d6000fd5b50505050610ae18460d2611fda90919063ffffffff16565b826001600160a01b0316336001600160a01b0316857f5e789de02041c87403c6f48bfd49a8cb3e5a5e8a53bcdef4f2fb597992326b4f84604051610b2791815260200190565b60405180910390a450505050565b6000610b40826116b1565b90506002610b4d82611dda565b6003811115610b5e57610b5e612b5c565b14610ba05760405162461bcd60e51b8152602060048201526012602482015271125493c81b9bdd081cdd58d8d95cdcd99d5b60721b6044820152606401610702565b600882901c600090815260d16020526040902054600160ff84161b1615610bfd5760405162461bcd60e51b815260206004820152601160248201527020b63932b0b23c903bb4ba34323930bbb760791b6044820152606401610702565b805160ca5460cc54600092839283928392610c449290916001600160a01b039182169116610c2a8a611ece565b8961014001518a604001518b606001518c60c00151612003565b60088a901c600090815260d1602052604090208054600160ff8d161b17905592965090945092509050604080518581526020810185905290810183905281151590339088907ff51dce7865db25a2ec6b47f91f3e97b1626e1e085200f50031aaceb3eda8df379060600160405180910390a4505050505050565b610cc661214f565b6001600160a01b038116610d095760405162461bcd60e51b815260206004820152600a602482015269215f63757272656e637960b01b6044820152606401610702565b60c980546001600160a01b0319166001600160a01b03831690811790915560405133907f6dde2141be69fabcd84e3864d206ba0f3f2d507125fb2703899c87de4c585d5f90600090a350565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610d9d5760405162461bcd60e51b815260040161070290612d80565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610de6600080516020612f62833981519152546001600160a01b031690565b6001600160a01b031614610e0c5760405162461bcd60e51b815260040161070290612dcc565b610e15816121a9565b60408051600080825260208201909252610e31918391906121b1565b50565b600080610e40846116b1565b905080610120015183610e539190612e18565b9150505b92915050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610ea55760405162461bcd60e51b815260040161070290612d80565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610eee600080516020612f62833981519152546001600160a01b031690565b6001600160a01b031614610f145760405162461bcd60e51b815260040161070290612dcc565b610f1d826121a9565b610f29828260016121b1565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610fcd5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610702565b50600080516020612f6283398151915290565b600081116110465760405162461bcd60e51b815260206004820152602d60248201527f5f616d6f756e74546f50757263686173652073686f756c64206265206772656160448201526c746572207468616e207a65726f60981b6064820152608401610702565b6000611051836116b1565b9050600161105e82611dda565b600381111561106f5761106f612b5c565b146110b05760405162461bcd60e51b815260206004820152601160248201527049524f206973206e6f742061637469766560781b6044820152606401610702565b6101008101516101208201516110c69084612e18565b8261014001516110d69190612e2f565b11156111165760405162461bcd60e51b815260206004820152600f60248201526e12185c9918d85c081c995858da1959608a1b6044820152606401610702565b600061112c826101200151848460c00151612321565b600085815260cf6020908152604080832033845290915281208054929350839290919061115a908490612e2f565b9091555050600084815260ce602052604081206005018054839290611180908490612e2f565b909155505060c082015160408051838152602081018690526001600160a01b0390921691339187917f5a85eb554fd8d84f35068dd70b72c3eade7b5cd89deb5cd10d936626411beaa49101610b27565b600081815260ce6020908152604080832081516101608101835281546001600160a01b0380821683526001600160401b03600160a01b830481169684019690965261ffff600160e01b8304811695840195909552600160f01b909104841660608301526001830154938416608083015262010000840490941660a0820152600160501b90920490921660c0820152600282015460e0820152600382015461010082015260048201546101208201526005909101546101408201526108d181611dda565b60008060006112a1846116b1565b90506112bb8160e001518261012001518360800151612344565b92506112d68161010001518261012001518360800151612344565b915050915091565b6112e661214f565b6112f06000611d88565b565b6112fa61214f565b61271061ffff891611156113465760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a590818985cda5cc81c1bda5b9d606a1b6044820152606401610702565b6127106113538789612e42565b61ffff1611156113a55760405162461bcd60e51b815260206004820152601d60248201527f466565732073686f756c64206265206c657373207468616e20313030250000006044820152606401610702565b816113b08585612d43565b6113ba9190612e64565b156114155760405162461bcd60e51b815260206004820152602560248201527f436170732073686f756c64206265206d756c7469706c6573206f6620756e6974604482015264507269636560d81b6064820152608401610702565b600061141f611bce565b9050600061142d8342612e78565b9050600061143b8883612e78565b90506040518061016001604052808d6001600160a01b03168152602001836001600160401b031681526020018b61ffff1681526020018a61ffff1681526020018c61ffff168152602001826001600160401b0316815260200160c960009054906101000a90046001600160a01b03166001600160a01b03168152602001888152602001878152602001868152602001600081525060ce600085815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a8154816001600160401b0302191690836001600160401b03160217905550604082015181600001601c6101000a81548161ffff021916908361ffff160217905550606082015181600001601e6101000a81548161ffff021916908361ffff16021790555060808201518160010160006101000a81548161ffff021916908361ffff16021790555060a08201518160010160026101000a8154816001600160401b0302191690836001600160401b0316021790555060c082015181600101600a6101000a8154816001600160a01b0302191690836001600160a01b0316021790555060e0820151816002015561010082015181600301556101208201518160040155610140820151816005015590505061163b60cd80546001019055565b6040805186815261ffff8d811660208301528c16818301526001600160401b0384811660608301528316608082015290516001600160a01b038e169185917f47623e9a1ac1276299a411e313416730652c442497bd1f561dba6cbc62857f7c9181900360a00190a3505050505050505050505050565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810191909152611712611bce565b82106117575760405162461bcd60e51b81526020600482015260146024820152735f69726f4964206f75742d6f662d626f756e647360601b6044820152606401610702565b50600090815260ce602090815260409182902082516101608101845281546001600160a01b0380821683526001600160401b03600160a01b830481169584019590955261ffff600160e01b8304811696840196909652600160f01b909104851660608301526001830154948516608083015262010000850490931660a0820152600160501b90930490911660c0830152600281015460e0830152600381015461010083015260048101546101208301526005015461014082015290565b600081815260ce6020908152604080832081516101608101835281546001600160a01b0380821683526001600160401b03600160a01b830481169684019690965261ffff600160e01b8304811695840195909552600160f01b9091048416606083015260018301549384166080830181905262010000850490951660a0830152600160501b90930490921660c0830152600281015460e0830152600381015461010083015260048101546101208301819052600590910154610140830181905291926108d1929190611e8c565b60008060006118ef856116b1565b600086815260cf602090815260408083206001600160a01b0389168452909152902054610120820151919250906119269082612d6c565b93506119418261014001518361012001518460800151612344565b61194d61271086612e18565b6119579190612d6c565b925050509250929050565b60008061196e836116b1565b90506108d18161014001518261012001518360800151612344565b6000611994836116b1565b905060006119a182611dda565b905060018160038111156119b7576119b7612b5c565b116119f75760405162461bcd60e51b815260206004820152601060248201526f125493c81b9bdd08199a5b9a5cda195960821b6044820152606401610702565b600084815260cf6020908152604080832033845290915290205480611a505760405162461bcd60e51b815260206004820152600f60248201526e139bdd1a1a5b99c81d1bc81b5a5b9d608a1b6044820152606401610702565b6002826003811115611a6457611a64612b5c565b03611b5457600083610120015182611a7c9190612d6c565b60cb549091506001600160a01b031663836a1040611a9988611ece565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b038816602482015260448101849052606401600060405180830381600087803b158015611ae857600080fd5b505af1158015611afc573d6000803e3d6000fd5b50505050846001600160a01b0316336001600160a01b0316877f9c4945d842cc8c6704877a0defcd9ab09f6d77b24a369a95c2610506c6c38ee784604051611b4691815260200190565b60405180910390a450611bc7565b60c954611b6b906001600160a01b0316858361236d565b600085815260cf602090815260408083203380855290835281842093909355518381526001600160a01b038716929188917e13b41c02877cabf07b7d6154ea39ec4503af8922f651f7a81f4afacd0c664f910160405180910390a45b5050505050565b6000611bd960cd5490565b905090565b611be661214f565b6001600160a01b038116611c295760405162461bcd60e51b815260206004820152600a602482015269215f747265617375727960b01b6044820152606401610702565b60ca80546001600160a01b0319166001600160a01b03831690811790915560405133907f190c262dc6f09322c68a13bf67c9659e58367755ba6190fa7ce5ca8aa45a877d90600090a350565b611c7d61214f565b6001600160a01b038116611cca5760405162461bcd60e51b8152602060048201526014602482015273215f7265616c457374617465526573657276657360601b6044820152606401610702565b60cc80546001600160a01b0319166001600160a01b03831690811790915560405133907fe2346da89cd742996eca02002552dd4534ad4ad92c3a82dd6a86fd515ee1414c90600090a350565b611d1e61214f565b6001600160a01b038116611d835760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610702565b610e31815b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600081602001516001600160401b0316611df14290565b6001600160401b031611611e0757506000919050565b60a08201516001600160401b0316426001600160401b03161015611e465781610100015182610140015103611e3e57506002919050565b506001919050565b60a08201516001600160401b0316426001600160401b031610611e84578160e001518261014001511015611e7c57506003919050565b506002919050565b506003919050565b600080611e998486612d6c565b9050611ea783612710612e98565b61ffff168361ffff1682611ebb9190612e18565b611ec59190612d6c565b95945050505050565b600881901c600090815260d36020526040812054600160ff84161b16611fc45760cb60009054906101000a90046001600160a01b03166001600160a01b0316631579c1336040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f659190612eb3565b600083815260d060209081526040808320849055600886901c835260d39091528082208054600160ff88161b17905551919250829184917fe845f90872d41131b00e56189f857584a09b017ea97c14fe1c84b118d62d8e5191a3919050565b50600081815260d060205260409020545b919050565b600881901c600090815260209290925260409091208054600160ff9093169290921b9091179055565b60008080806127106120198961ffff8a16612e18565b6120239190612d6c565b92506127106120368961ffff8916612e18565b6120409190612d6c565b91506001600160a01b038a16156120f757506001821561206e5761206e6001600160a01b0386168c8561236d565b81156120f2576120886001600160a01b0386168b846123d0565b604051638dbdbe6d60e01b8152600481018a9052602481018390526001600160a01b0386811660448301528b1690638dbdbe6d90606401600060405180830381600087803b1580156120d957600080fd5b505af11580156120ed573d6000803e3d6000fd5b505050505b612116565b6121168b6121058486612e2f565b6001600160a01b038816919061236d565b6121208284612e2f565b61212a9089612d43565b93506121406001600160a01b0386168d8661236d565b98509850985098945050505050565b6033546001600160a01b031633146112f05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610702565b610e3161214f565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156121e9576121e4836124e5565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612243575060408051601f3d908101601f1916820190925261224091810190612eb3565b60015b6122a65760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610702565b600080516020612f6283398151915281146123155760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610702565b506121e4838383612581565b600061232d8484612e18565b90506108d16001600160a01b0383163330846125ac565b6000612351848484611e8c565b61235b8486612d6c565b6123659190612e2f565b949350505050565b6040516001600160a01b0383166024820152604481018290526121e490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526125e4565b80158061244a5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015612424573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124489190612eb3565b155b6124b55760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610702565b6040516001600160a01b0383166024820152604481018290526121e490849063095ea7b360e01b90606401612399565b6001600160a01b0381163b6125525760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610702565b600080516020612f6283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61258a836126b6565b6000825111806125975750805b156121e4576125a683836126f6565b50505050565b6040516001600160a01b03808516602483015283166044820152606481018290526125a69085906323b872dd60e01b90608401612399565b6000612639826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127e19092919063ffffffff16565b8051909150156121e457808060200190518101906126579190612ecc565b6121e45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610702565b6126bf816124e5565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b61275e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610702565b600080846001600160a01b0316846040516127799190612f12565b600060405180830381855af49150503d80600081146127b4576040519150601f19603f3d011682016040523d82523d6000602084013e6127b9565b606091505b5091509150611ec58282604051806060016040528060278152602001612f82602791396127f0565b60606123658484600085612809565b606083156127ff5750816108d1565b6108d183836128e4565b60608247101561286a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610702565b600080866001600160a01b031685876040516128869190612f12565b60006040518083038185875af1925050503d80600081146128c3576040519150601f19603f3d011682016040523d82523d6000602084013e6128c8565b606091505b50915091506128d98783838761290e565b979650505050505050565b8151156128f45781518083602001fd5b8060405162461bcd60e51b81526004016107029190612f2e565b6060831561297d578251600003612976576001600160a01b0385163b6129765760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610702565b5081612365565b61236583836128e4565b80356001600160a01b0381168114611fd557600080fd5b600080600080600060a086880312156129b657600080fd5b6129bf86612987565b94506129cd60208701612987565b93506129db60408701612987565b92506129e960608701612987565b91506129f760808701612987565b90509295509295909350565b600060208284031215612a1557600080fd5b5035919050565b60008060408385031215612a2f57600080fd5b82359150612a3f60208401612987565b90509250929050565b600060208284031215612a5a57600080fd5b6108d182612987565b60008060408385031215612a7657600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215612aae57600080fd5b612ab783612987565b915060208301356001600160401b0380821115612ad357600080fd5b818501915085601f830112612ae757600080fd5b813581811115612af957612af9612a85565b604051601f8201601f19908116603f01168101908382118183101715612b2157612b21612a85565b81604052828152886020848701011115612b3a57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b634e487b7160e01b600052602160045260246000fd5b6020810160048310612b9457634e487b7160e01b600052602160045260246000fd5b91905290565b803561ffff81168114611fd557600080fd5b80356001600160401b0381168114611fd557600080fd5b60008060008060008060008060006101208a8c031215612be257600080fd5b612beb8a612987565b9850612bf960208b01612b9a565b9750612c0760408b01612b9a565b9650612c1560608b01612b9a565b9550612c2360808b01612bac565b945060a08a0135935060c08a0135925060e08a01359150612c476101008b01612bac565b90509295985092959850929598565b81516001600160a01b0316815261016081016020830151612c8260208401826001600160401b03169052565b506040830151612c98604084018261ffff169052565b506060830151612cae606084018261ffff169052565b506080830151612cc4608084018261ffff169052565b5060a0830151612cdf60a08401826001600160401b03169052565b5060c0830151612cfa60c08401826001600160a01b03169052565b5060e083810151908301526101008084015190830152610120808401519083015261014092830151929091019190915290565b634e487b7160e01b600052601160045260246000fd5b81810381811115610e5757610e57612d2d565b634e487b7160e01b600052601260045260246000fd5b600082612d7b57612d7b612d56565b500490565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b8082028115828204841417610e5757610e57612d2d565b80820180821115610e5757610e57612d2d565b61ffff818116838216019080821115612e5d57612e5d612d2d565b5092915050565b600082612e7357612e73612d56565b500690565b6001600160401b03818116838216019080821115612e5d57612e5d612d2d565b61ffff828116828216039080821115612e5d57612e5d612d2d565b600060208284031215612ec557600080fd5b5051919050565b600060208284031215612ede57600080fd5b815180151581146108d157600080fd5b60005b83811015612f09578181015183820152602001612ef1565b50506000910152565b60008251612f24818460208701612eee565b9190910192915050565b6020815260008251806020840152612f4d816040850160208701612eee565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122064c9480d6428f8a502522c70d40229eaf0b85c98ff359be9150d0d869248bdab64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101e75760003560e01c80638da5cb5b11610102578063ddd5e1b211610095578063ef217dbd11610064578063ef217dbd146105f4578063f0f4426014610609578063f1d909a114610629578063f2fde38b1461064957600080fd5b8063ddd5e1b214610570578063de9ee90b14610590578063e5a6b10f146105b4578063e915c559146105d457600080fd5b80639a19b73b116100d15780639a19b73b146104cb578063a412487d146104f8578063ad91203b14610518578063bd85b0391461055057600080fd5b80638da5cb5b14610444578063918f86741461046257806395ba7c5a1461048b578063976d1629146104ab57600080fd5b806352d1902d1161017a57806361d027b31161014957806361d027b31461038a57806364ef7f22146103c2578063715018a6146103f7578063885d68a81461040c57600080fd5b806352d1902d146102fb5780635bf56bc4146103105780635c622a0e14610330578063606b77db1461035d57600080fd5b80632f84c391116101b65780632f84c391146102885780633659cfe6146102a8578063487a2395146102c85780634f1ef286146102e857600080fd5b80631459457a146101f3578063171ee95a1461021557806323b3359f146102485780632e1a7d4d1461026857600080fd5b366101ee57005b600080fd5b3480156101ff57600080fd5b5061021361020e36600461299e565b610669565b005b34801561022157600080fd5b50610235610230366004612a03565b61089d565b6040519081526020015b60405180910390f35b34801561025457600080fd5b50610213610263366004612a1c565b6108d8565b34801561027457600080fd5b50610213610283366004612a03565b610b35565b34801561029457600080fd5b506102136102a3366004612a48565b610cbe565b3480156102b457600080fd5b506102136102c3366004612a48565b610d55565b3480156102d457600080fd5b506102356102e3366004612a63565b610e34565b6102136102f6366004612a9b565b610e5d565b34801561030757600080fd5b50610235610f2d565b34801561031c57600080fd5b5061021361032b366004612a63565b610fe0565b34801561033c57600080fd5b5061035061034b366004612a03565b6111d0565b60405161023f9190612b72565b34801561036957600080fd5b50610235610378366004612a03565b60d06020526000908152604090205481565b34801561039657600080fd5b5060ca546103aa906001600160a01b031681565b6040516001600160a01b03909116815260200161023f565b3480156103ce57600080fd5b506103e26103dd366004612a03565b611293565b6040805192835260208301919091520161023f565b34801561040357600080fd5b506102136112de565b34801561041857600080fd5b50610235610427366004612a1c565b60cf60209081526000928352604080842090915290825290205481565b34801561045057600080fd5b506033546001600160a01b03166103aa565b34801561046e57600080fd5b5061047861271081565b60405161ffff909116815260200161023f565b34801561049757600080fd5b506102136104a6366004612bc3565b6112f2565b3480156104b757600080fd5b5060cc546103aa906001600160a01b031681565b3480156104d757600080fd5b506104eb6104e6366004612a03565b6116b1565b60405161023f9190612c56565b34801561050457600080fd5b50610235610513366004612a03565b611814565b34801561052457600080fd5b50610538610533366004612a1c565b6118e1565b6040805192835261ffff90911660208301520161023f565b34801561055c57600080fd5b5061023561056b366004612a03565b611962565b34801561057c57600080fd5b5061021361058b366004612a1c565b611989565b34801561059c57600080fd5b506040516001600160401b034216815260200161023f565b3480156105c057600080fd5b5060c9546103aa906001600160a01b031681565b3480156105e057600080fd5b5060cb546103aa906001600160a01b031681565b34801561060057600080fd5b50610235611bce565b34801561061557600080fd5b50610213610624366004612a48565b611bde565b34801561063557600080fd5b50610213610644366004612a48565b611c75565b34801561065557600080fd5b50610213610664366004612a48565b611d16565b600054610100900460ff16158080156106895750600054600160ff909116105b806106a35750303b1580156106a3575060005460ff166001145b61070b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801561072e576000805461ff0019166101001790555b6001600160a01b0385166107765760405162461bcd60e51b815260206004820152600f60248201526e0857dc99585b115cdd185d1953999d608a1b6044820152606401610702565b6001600160a01b0384166107b95760405162461bcd60e51b815260206004820152600a602482015269215f747265617375727960b01b6044820152606401610702565b6001600160a01b0382166107fc5760405162461bcd60e51b815260206004820152600a602482015269215f63757272656e637960b01b6044820152606401610702565b60cb80546001600160a01b038088166001600160a01b03199283161790925560ca805487841690831617905560c9805485841690831617905560cc80549286169290911691909117905561084f86611d88565b8015610895576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b6000806108a9836116b1565b90508061012001518161014001518261010001516108c79190612d43565b6108d19190612d6c565b9392505050565b60006108e3836116b1565b80519091506001600160a01b0316331461092a5760405162461bcd60e51b815260206004820152600860248201526708585b1b1bddd95960c21b6044820152606401610702565b600883901c600090815260d26020526040902054600160ff85161b16156109855760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e4818db185a5b5959608a1b6044820152606401610702565b600261099082611dda565b60038111156109a1576109a1612b5c565b146109e35760405162461bcd60e51b8152602060048201526012602482015271125493c81b9bdd081cdd58d8d95cdcd99d5b60721b6044820152606401610702565b6000816080015161ffff1611610a2e5760405162461bcd60e51b815260206004820152601060248201526f4e6f7468696e6720746f20636c61696d60801b6044820152606401610702565b6000610a498261014001518361012001518460800151611e8c565b60cb549091506001600160a01b031663836a1040610a6686611ece565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b038616602482015260448101849052606401600060405180830381600087803b158015610ab557600080fd5b505af1158015610ac9573d6000803e3d6000fd5b50505050610ae18460d2611fda90919063ffffffff16565b826001600160a01b0316336001600160a01b0316857f5e789de02041c87403c6f48bfd49a8cb3e5a5e8a53bcdef4f2fb597992326b4f84604051610b2791815260200190565b60405180910390a450505050565b6000610b40826116b1565b90506002610b4d82611dda565b6003811115610b5e57610b5e612b5c565b14610ba05760405162461bcd60e51b8152602060048201526012602482015271125493c81b9bdd081cdd58d8d95cdcd99d5b60721b6044820152606401610702565b600882901c600090815260d16020526040902054600160ff84161b1615610bfd5760405162461bcd60e51b815260206004820152601160248201527020b63932b0b23c903bb4ba34323930bbb760791b6044820152606401610702565b805160ca5460cc54600092839283928392610c449290916001600160a01b039182169116610c2a8a611ece565b8961014001518a604001518b606001518c60c00151612003565b60088a901c600090815260d1602052604090208054600160ff8d161b17905592965090945092509050604080518581526020810185905290810183905281151590339088907ff51dce7865db25a2ec6b47f91f3e97b1626e1e085200f50031aaceb3eda8df379060600160405180910390a4505050505050565b610cc661214f565b6001600160a01b038116610d095760405162461bcd60e51b815260206004820152600a602482015269215f63757272656e637960b01b6044820152606401610702565b60c980546001600160a01b0319166001600160a01b03831690811790915560405133907f6dde2141be69fabcd84e3864d206ba0f3f2d507125fb2703899c87de4c585d5f90600090a350565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610d9d5760405162461bcd60e51b815260040161070290612d80565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610de6600080516020612f62833981519152546001600160a01b031690565b6001600160a01b031614610e0c5760405162461bcd60e51b815260040161070290612dcc565b610e15816121a9565b60408051600080825260208201909252610e31918391906121b1565b50565b600080610e40846116b1565b905080610120015183610e539190612e18565b9150505b92915050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610ea55760405162461bcd60e51b815260040161070290612d80565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610eee600080516020612f62833981519152546001600160a01b031690565b6001600160a01b031614610f145760405162461bcd60e51b815260040161070290612dcc565b610f1d826121a9565b610f29828260016121b1565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610fcd5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610702565b50600080516020612f6283398151915290565b600081116110465760405162461bcd60e51b815260206004820152602d60248201527f5f616d6f756e74546f50757263686173652073686f756c64206265206772656160448201526c746572207468616e207a65726f60981b6064820152608401610702565b6000611051836116b1565b9050600161105e82611dda565b600381111561106f5761106f612b5c565b146110b05760405162461bcd60e51b815260206004820152601160248201527049524f206973206e6f742061637469766560781b6044820152606401610702565b6101008101516101208201516110c69084612e18565b8261014001516110d69190612e2f565b11156111165760405162461bcd60e51b815260206004820152600f60248201526e12185c9918d85c081c995858da1959608a1b6044820152606401610702565b600061112c826101200151848460c00151612321565b600085815260cf6020908152604080832033845290915281208054929350839290919061115a908490612e2f565b9091555050600084815260ce602052604081206005018054839290611180908490612e2f565b909155505060c082015160408051838152602081018690526001600160a01b0390921691339187917f5a85eb554fd8d84f35068dd70b72c3eade7b5cd89deb5cd10d936626411beaa49101610b27565b600081815260ce6020908152604080832081516101608101835281546001600160a01b0380821683526001600160401b03600160a01b830481169684019690965261ffff600160e01b8304811695840195909552600160f01b909104841660608301526001830154938416608083015262010000840490941660a0820152600160501b90920490921660c0820152600282015460e0820152600382015461010082015260048201546101208201526005909101546101408201526108d181611dda565b60008060006112a1846116b1565b90506112bb8160e001518261012001518360800151612344565b92506112d68161010001518261012001518360800151612344565b915050915091565b6112e661214f565b6112f06000611d88565b565b6112fa61214f565b61271061ffff891611156113465760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a590818985cda5cc81c1bda5b9d606a1b6044820152606401610702565b6127106113538789612e42565b61ffff1611156113a55760405162461bcd60e51b815260206004820152601d60248201527f466565732073686f756c64206265206c657373207468616e20313030250000006044820152606401610702565b816113b08585612d43565b6113ba9190612e64565b156114155760405162461bcd60e51b815260206004820152602560248201527f436170732073686f756c64206265206d756c7469706c6573206f6620756e6974604482015264507269636560d81b6064820152608401610702565b600061141f611bce565b9050600061142d8342612e78565b9050600061143b8883612e78565b90506040518061016001604052808d6001600160a01b03168152602001836001600160401b031681526020018b61ffff1681526020018a61ffff1681526020018c61ffff168152602001826001600160401b0316815260200160c960009054906101000a90046001600160a01b03166001600160a01b03168152602001888152602001878152602001868152602001600081525060ce600085815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a8154816001600160401b0302191690836001600160401b03160217905550604082015181600001601c6101000a81548161ffff021916908361ffff160217905550606082015181600001601e6101000a81548161ffff021916908361ffff16021790555060808201518160010160006101000a81548161ffff021916908361ffff16021790555060a08201518160010160026101000a8154816001600160401b0302191690836001600160401b0316021790555060c082015181600101600a6101000a8154816001600160a01b0302191690836001600160a01b0316021790555060e0820151816002015561010082015181600301556101208201518160040155610140820151816005015590505061163b60cd80546001019055565b6040805186815261ffff8d811660208301528c16818301526001600160401b0384811660608301528316608082015290516001600160a01b038e169185917f47623e9a1ac1276299a411e313416730652c442497bd1f561dba6cbc62857f7c9181900360a00190a3505050505050505050505050565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810191909152611712611bce565b82106117575760405162461bcd60e51b81526020600482015260146024820152735f69726f4964206f75742d6f662d626f756e647360601b6044820152606401610702565b50600090815260ce602090815260409182902082516101608101845281546001600160a01b0380821683526001600160401b03600160a01b830481169584019590955261ffff600160e01b8304811696840196909652600160f01b909104851660608301526001830154948516608083015262010000850490931660a0820152600160501b90930490911660c0830152600281015460e0830152600381015461010083015260048101546101208301526005015461014082015290565b600081815260ce6020908152604080832081516101608101835281546001600160a01b0380821683526001600160401b03600160a01b830481169684019690965261ffff600160e01b8304811695840195909552600160f01b9091048416606083015260018301549384166080830181905262010000850490951660a0830152600160501b90930490921660c0830152600281015460e0830152600381015461010083015260048101546101208301819052600590910154610140830181905291926108d1929190611e8c565b60008060006118ef856116b1565b600086815260cf602090815260408083206001600160a01b0389168452909152902054610120820151919250906119269082612d6c565b93506119418261014001518361012001518460800151612344565b61194d61271086612e18565b6119579190612d6c565b925050509250929050565b60008061196e836116b1565b90506108d18161014001518261012001518360800151612344565b6000611994836116b1565b905060006119a182611dda565b905060018160038111156119b7576119b7612b5c565b116119f75760405162461bcd60e51b815260206004820152601060248201526f125493c81b9bdd08199a5b9a5cda195960821b6044820152606401610702565b600084815260cf6020908152604080832033845290915290205480611a505760405162461bcd60e51b815260206004820152600f60248201526e139bdd1a1a5b99c81d1bc81b5a5b9d608a1b6044820152606401610702565b6002826003811115611a6457611a64612b5c565b03611b5457600083610120015182611a7c9190612d6c565b60cb549091506001600160a01b031663836a1040611a9988611ece565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b038816602482015260448101849052606401600060405180830381600087803b158015611ae857600080fd5b505af1158015611afc573d6000803e3d6000fd5b50505050846001600160a01b0316336001600160a01b0316877f9c4945d842cc8c6704877a0defcd9ab09f6d77b24a369a95c2610506c6c38ee784604051611b4691815260200190565b60405180910390a450611bc7565b60c954611b6b906001600160a01b0316858361236d565b600085815260cf602090815260408083203380855290835281842093909355518381526001600160a01b038716929188917e13b41c02877cabf07b7d6154ea39ec4503af8922f651f7a81f4afacd0c664f910160405180910390a45b5050505050565b6000611bd960cd5490565b905090565b611be661214f565b6001600160a01b038116611c295760405162461bcd60e51b815260206004820152600a602482015269215f747265617375727960b01b6044820152606401610702565b60ca80546001600160a01b0319166001600160a01b03831690811790915560405133907f190c262dc6f09322c68a13bf67c9659e58367755ba6190fa7ce5ca8aa45a877d90600090a350565b611c7d61214f565b6001600160a01b038116611cca5760405162461bcd60e51b8152602060048201526014602482015273215f7265616c457374617465526573657276657360601b6044820152606401610702565b60cc80546001600160a01b0319166001600160a01b03831690811790915560405133907fe2346da89cd742996eca02002552dd4534ad4ad92c3a82dd6a86fd515ee1414c90600090a350565b611d1e61214f565b6001600160a01b038116611d835760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610702565b610e31815b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600081602001516001600160401b0316611df14290565b6001600160401b031611611e0757506000919050565b60a08201516001600160401b0316426001600160401b03161015611e465781610100015182610140015103611e3e57506002919050565b506001919050565b60a08201516001600160401b0316426001600160401b031610611e84578160e001518261014001511015611e7c57506003919050565b506002919050565b506003919050565b600080611e998486612d6c565b9050611ea783612710612e98565b61ffff168361ffff1682611ebb9190612e18565b611ec59190612d6c565b95945050505050565b600881901c600090815260d36020526040812054600160ff84161b16611fc45760cb60009054906101000a90046001600160a01b03166001600160a01b0316631579c1336040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f659190612eb3565b600083815260d060209081526040808320849055600886901c835260d39091528082208054600160ff88161b17905551919250829184917fe845f90872d41131b00e56189f857584a09b017ea97c14fe1c84b118d62d8e5191a3919050565b50600081815260d060205260409020545b919050565b600881901c600090815260209290925260409091208054600160ff9093169290921b9091179055565b60008080806127106120198961ffff8a16612e18565b6120239190612d6c565b92506127106120368961ffff8916612e18565b6120409190612d6c565b91506001600160a01b038a16156120f757506001821561206e5761206e6001600160a01b0386168c8561236d565b81156120f2576120886001600160a01b0386168b846123d0565b604051638dbdbe6d60e01b8152600481018a9052602481018390526001600160a01b0386811660448301528b1690638dbdbe6d90606401600060405180830381600087803b1580156120d957600080fd5b505af11580156120ed573d6000803e3d6000fd5b505050505b612116565b6121168b6121058486612e2f565b6001600160a01b038816919061236d565b6121208284612e2f565b61212a9089612d43565b93506121406001600160a01b0386168d8661236d565b98509850985098945050505050565b6033546001600160a01b031633146112f05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610702565b610e3161214f565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156121e9576121e4836124e5565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612243575060408051601f3d908101601f1916820190925261224091810190612eb3565b60015b6122a65760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610702565b600080516020612f6283398151915281146123155760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610702565b506121e4838383612581565b600061232d8484612e18565b90506108d16001600160a01b0383163330846125ac565b6000612351848484611e8c565b61235b8486612d6c565b6123659190612e2f565b949350505050565b6040516001600160a01b0383166024820152604481018290526121e490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526125e4565b80158061244a5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015612424573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124489190612eb3565b155b6124b55760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610702565b6040516001600160a01b0383166024820152604481018290526121e490849063095ea7b360e01b90606401612399565b6001600160a01b0381163b6125525760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610702565b600080516020612f6283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61258a836126b6565b6000825111806125975750805b156121e4576125a683836126f6565b50505050565b6040516001600160a01b03808516602483015283166044820152606481018290526125a69085906323b872dd60e01b90608401612399565b6000612639826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127e19092919063ffffffff16565b8051909150156121e457808060200190518101906126579190612ecc565b6121e45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610702565b6126bf816124e5565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b61275e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610702565b600080846001600160a01b0316846040516127799190612f12565b600060405180830381855af49150503d80600081146127b4576040519150601f19603f3d011682016040523d82523d6000602084013e6127b9565b606091505b5091509150611ec58282604051806060016040528060278152602001612f82602791396127f0565b60606123658484600085612809565b606083156127ff5750816108d1565b6108d183836128e4565b60608247101561286a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610702565b600080866001600160a01b031685876040516128869190612f12565b60006040518083038185875af1925050503d80600081146128c3576040519150601f19603f3d011682016040523d82523d6000602084013e6128c8565b606091505b50915091506128d98783838761290e565b979650505050505050565b8151156128f45781518083602001fd5b8060405162461bcd60e51b81526004016107029190612f2e565b6060831561297d578251600003612976576001600160a01b0385163b6129765760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610702565b5081612365565b61236583836128e4565b80356001600160a01b0381168114611fd557600080fd5b600080600080600060a086880312156129b657600080fd5b6129bf86612987565b94506129cd60208701612987565b93506129db60408701612987565b92506129e960608701612987565b91506129f760808701612987565b90509295509295909350565b600060208284031215612a1557600080fd5b5035919050565b60008060408385031215612a2f57600080fd5b82359150612a3f60208401612987565b90509250929050565b600060208284031215612a5a57600080fd5b6108d182612987565b60008060408385031215612a7657600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215612aae57600080fd5b612ab783612987565b915060208301356001600160401b0380821115612ad357600080fd5b818501915085601f830112612ae757600080fd5b813581811115612af957612af9612a85565b604051601f8201601f19908116603f01168101908382118183101715612b2157612b21612a85565b81604052828152886020848701011115612b3a57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b634e487b7160e01b600052602160045260246000fd5b6020810160048310612b9457634e487b7160e01b600052602160045260246000fd5b91905290565b803561ffff81168114611fd557600080fd5b80356001600160401b0381168114611fd557600080fd5b60008060008060008060008060006101208a8c031215612be257600080fd5b612beb8a612987565b9850612bf960208b01612b9a565b9750612c0760408b01612b9a565b9650612c1560608b01612b9a565b9550612c2360808b01612bac565b945060a08a0135935060c08a0135925060e08a01359150612c476101008b01612bac565b90509295985092959850929598565b81516001600160a01b0316815261016081016020830151612c8260208401826001600160401b03169052565b506040830151612c98604084018261ffff169052565b506060830151612cae606084018261ffff169052565b506080830151612cc4608084018261ffff169052565b5060a0830151612cdf60a08401826001600160401b03169052565b5060c0830151612cfa60c08401826001600160a01b03169052565b5060e083810151908301526101008084015190830152610120808401519083015261014092830151929091019190915290565b634e487b7160e01b600052601160045260246000fd5b81810381811115610e5757610e57612d2d565b634e487b7160e01b600052601260045260246000fd5b600082612d7b57612d7b612d56565b500490565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b8082028115828204841417610e5757610e57612d2d565b80820180821115610e5757610e57612d2d565b61ffff818116838216019080821115612e5d57612e5d612d2d565b5092915050565b600082612e7357612e73612d56565b500690565b6001600160401b03818116838216019080821115612e5d57612e5d612d2d565b61ffff828116828216039080821115612e5d57612e5d612d2d565b600060208284031215612ec557600080fd5b5051919050565b600060208284031215612ede57600080fd5b815180151581146108d157600080fd5b60005b83811015612f09578181015183820152602001612ef1565b50506000910152565b60008251612f24818460208701612eee565b9190910192915050565b6020815260008251806020840152612f4d816040850160208701612eee565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122064c9480d6428f8a502522c70d40229eaf0b85c98ff359be9150d0d869248bdab64736f6c63430008110033",
  "devdoc": {
    "author": "Horizon DAO (Yuri Fernandes)",
    "events": {
      "CashBack(uint256,address,address,uint256)": {
        "details": "Emitted when an investors withdraw it's funds after an IRO fails"
      },
      "Commit(uint256,address,address,uint256,uint256)": {
        "details": "Emitted when a new Commit is made to an IRO"
      },
      "CreateIRO(uint256,address,uint256,uint16,uint16,uint64,uint64)": {
        "details": "Emitted when a new IRO is created"
      },
      "FundsWithdrawn(uint256,address,bool,uint256,uint256,uint256)": {
        "details": "Emitted when funds from an IRO are withdrawn"
      },
      "OwnerTokensClaimed(uint256,address,address,uint256)": {
        "details": "Emitted when the listing owner claims it's shares of the tokens"
      },
      "RealEstateCreated(uint256,uint256)": {
        "details": "Emitted when a new real estate token ID is created"
      },
      "SetBaseCurrency(address,address)": {
        "details": "Emitted when a new currency is set"
      },
      "SetRealEstateReserves(address,address)": {
        "details": "Emitted when the RealEstateReserves contract is set"
      },
      "SetTreasury(address,address)": {
        "details": "Emitted when the Treasury contract is set"
      },
      "TokensClaimed(uint256,address,address,uint256)": {
        "details": "Emitted when tokens are claimed by investors"
      }
    },
    "kind": "dev",
    "methods": {
      "claim(uint256,address)": {
        "params": {
          "_iroId": "ID of the IRO",
          "_to": "Address to send the claimed tokens"
        }
      },
      "commit(uint256,uint256)": {
        "params": {
          "_amountToPurchase": "Amount of IRO tokens to purchase",
          "_iroId": "ID of the IRO"
        }
      },
      "createIRO(address,uint16,uint16,uint16,uint64,uint256,uint256,uint256,uint64)": {
        "details": "Create new IRO",
        "params": {
          "_duration": "Duration of the IRO in seconds",
          "_hardCap": "Maximum fundraising in base price token",
          "_listingOwner": "Listing owner address",
          "_listingOwnerShare": "Listing owner share of IRO tokens in basis points",
          "_softCap": "Minimum fundraising in base price token",
          "_startOffset": "Time before IRO begins",
          "_treasuryFee": "Treasury fee percentage in basis points",
          "_unitPrice": "Price per unit of IRO token in base price token"
        }
      },
      "getIRO(uint256)": {
        "params": {
          "_iroId": "ID of the IRO"
        }
      },
      "getStatus(uint256)": {
        "params": {
          "_iroId": "ID of the IRO"
        }
      },
      "initialize(address,address,address,address,address)": {
        "details": "Initialize IRO contract",
        "params": {
          "_currency": "Currency used to precify the IRO tokens",
          "_realEstateNft": "RealEstateNFT contract address",
          "_realEstateReserves": "RealEstateReserves contract address",
          "_treasury": "Treasury contract address"
        }
      },
      "listingOwnerAmount(uint256)": {
        "params": {
          "_iroId": "ID of the IRO"
        }
      },
      "listingOwnerClaim(uint256,address)": {
        "params": {
          "_iroId": "ID of the IRO",
          "_to": "Address to send the tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "price(uint256,uint256)": {
        "params": {
          "_amountToPurchase": "Amount of IRO tokens to purchase",
          "_iroId": "ID of the IRO"
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "remainingTokens(uint256)": {
        "params": {
          "_iroId": "ID of the IRO"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setCurrency(address)": {
        "details": "Set a new base price token",
        "params": {
          "_currency": "currency address (ERC20)"
        }
      },
      "setRealEstateReserves(address)": {
        "details": "Set new real estate reserves",
        "params": {
          "_realEstateReserves": "RealEstateReseres address"
        }
      },
      "setTreasury(address)": {
        "details": "Set new treasury",
        "params": {
          "_treasury": "Treasury address"
        }
      },
      "totalSupply(uint256)": {
        "params": {
          "_iroId": "ID of the IRO"
        }
      },
      "totalSupplyInterval(uint256)": {
        "params": {
          "_iroId": "ID of the IRO"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "userAmountAndShare(uint256,address)": {
        "params": {
          "_iroId": "ID of the IRO",
          "_user": "User address"
        },
        "returns": {
          "amount": "Purchased amount",
          "share": "IRO share"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_iroId": "ID of the IRO"
        }
      }
    },
    "stateVariables": {
      "DENOMINATOR": {
        "details": "Denominator used to calculate fees/shares"
      },
      "_fundsWithdrawn": {
        "details": "Points out whether funds have been withdrawn from IRO"
      },
      "_iros": {
        "details": "mapping (iroId => iro)"
      },
      "_listingOwnerClaimed": {
        "details": "Points out whether the listingOwner has claimed it's share"
      },
      "_nextAvailableId": {
        "details": "Next available IRO ID"
      },
      "_realEstateIdSet": {
        "details": "Whether an ID has already been set in the RealEstateNFT contract for the IRO"
      },
      "commits": {
        "details": "mapping (iroId => user => commit)"
      },
      "realEstateId": {
        "details": "mapping (iroId => realEstateId)"
      }
    },
    "title": "Initial Real Estate Offering (IRO)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim(uint256,address)": {
        "notice": "Claim purchased tokens when IRO successful or     get back commit amount in base currency if IRO failed"
      },
      "commit(uint256,uint256)": {
        "notice": "Commit to an IRO"
      },
      "currency()": {
        "notice": "Currency address"
      },
      "getIRO(uint256)": {
        "notice": "Get IRO"
      },
      "getStatus(uint256)": {
        "notice": "Get IRO status"
      },
      "iroLength()": {
        "notice": "Get total amount of IROs"
      },
      "listingOwnerAmount(uint256)": {
        "notice": "Get current listing owner reNFT amount"
      },
      "listingOwnerClaim(uint256,address)": {
        "notice": "Claim listing owner tokens"
      },
      "now64()": {
        "notice": "Get current time (uint64)"
      },
      "price(uint256,uint256)": {
        "notice": "Get the total price of a purchase"
      },
      "realEstateNft()": {
        "notice": "RealEstateNFT contract address"
      },
      "realEstateReserves()": {
        "notice": "RealEstateReserves contract address"
      },
      "remainingTokens(uint256)": {
        "notice": "Get the amount of remaining IRO tokens"
      },
      "totalSupply(uint256)": {
        "notice": "Get the current total supply"
      },
      "totalSupplyInterval(uint256)": {
        "notice": "Get minimum and maximum supply"
      },
      "treasury()": {
        "notice": "Treasury contract address"
      },
      "userAmountAndShare(uint256,address)": {
        "notice": "Get an user purchased amount and shares of an IRO"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw and distribute funds from successful IROs"
      }
    },
    "notice": "Used to run IROs, mint tokens to RealEstateNFT     and distribute funds",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1083,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1086,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4033,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 541,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 661,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1065,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1380,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 16149,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "currency",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 16152,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "treasury",
        "offset": 0,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 16156,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "realEstateNft",
        "offset": 0,
        "slot": "203",
        "type": "t_contract(IRealEstateERC1155)15494"
      },
      {
        "astId": 16160,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "realEstateReserves",
        "offset": 0,
        "slot": "204",
        "type": "t_contract(IRealEstateReserves)15506"
      },
      {
        "astId": 16164,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "_nextAvailableId",
        "offset": 0,
        "slot": "205",
        "type": "t_struct(Counter)4040_storage"
      },
      {
        "astId": 16170,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "_iros",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_uint256,t_struct(IRO)16146_storage)"
      },
      {
        "astId": 16177,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "commits",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 16182,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "realEstateId",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 16186,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "_fundsWithdrawn",
        "offset": 0,
        "slot": "209",
        "type": "t_struct(BitMap)5272_storage"
      },
      {
        "astId": 16190,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "_listingOwnerClaimed",
        "offset": 0,
        "slot": "210",
        "type": "t_struct(BitMap)5272_storage"
      },
      {
        "astId": 16194,
        "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
        "label": "_realEstateIdSet",
        "offset": 0,
        "slot": "211",
        "type": "t_struct(BitMap)5272_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRealEstateERC1155)15494": {
        "encoding": "inplace",
        "label": "contract IRealEstateERC1155",
        "numberOfBytes": "20"
      },
      "t_contract(IRealEstateReserves)15506": {
        "encoding": "inplace",
        "label": "contract IRealEstateReserves",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(IRO)16146_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct InitialRealEstateOffering.IRO)",
        "numberOfBytes": "32",
        "value": "t_struct(IRO)16146_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(BitMap)5272_storage": {
        "encoding": "inplace",
        "label": "struct BitMapsUpgradeable.BitMap",
        "members": [
          {
            "astId": 5271,
            "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
            "label": "_data",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Counter)4040_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 4039,
            "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(IRO)16146_storage": {
        "encoding": "inplace",
        "label": "struct InitialRealEstateOffering.IRO",
        "members": [
          {
            "astId": 16125,
            "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
            "label": "listingOwner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 16127,
            "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
            "label": "start",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 16129,
            "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
            "label": "treasuryFee",
            "offset": 28,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 16131,
            "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
            "label": "reservesFee",
            "offset": 30,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 16133,
            "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
            "label": "listingOwnerShare",
            "offset": 0,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 16135,
            "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
            "label": "end",
            "offset": 2,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 16137,
            "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
            "label": "currency",
            "offset": 10,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 16139,
            "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
            "label": "softCap",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 16141,
            "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
            "label": "hardCap",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 16143,
            "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
            "label": "unitPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 16145,
            "contract": "contracts/protocol/InitialRealEstateOffering.sol:InitialRealEstateOffering",
            "label": "totalFunding",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
