{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/Denominations.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary Denominations {\n  address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n  address public constant BTC = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB;\n\n  // Fiat currencies follow https://en.wikipedia.org/wiki/ISO_4217\n  address public constant USD = address(840);\n  address public constant GBP = address(826);\n  address public constant EUR = address(978);\n  address public constant JPY = address(392);\n  address public constant KRW = address(410);\n  address public constant CNY = address(156);\n  address public constant AUD = address(36);\n  address public constant CAD = address(124);\n  address public constant CHF = address(756);\n  address public constant ARS = address(32);\n  address public constant PHP = address(608);\n  address public constant NZD = address(554);\n  address public constant SGD = address(702);\n  address public constant NGN = address(566);\n  address public constant ZAR = address(710);\n  address public constant RUB = address(643);\n  address public constant INR = address(356);\n  address public constant BRL = address(986);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n\n  function latestTimestamp() external view returns (uint256);\n\n  function latestRound() external view returns (uint256);\n\n  function getAnswer(uint256 roundId) external view returns (int256);\n\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AggregatorInterface.sol\";\nimport \"./AggregatorV3Interface.sol\";\n\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/FeedRegistryInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"./AggregatorV2V3Interface.sol\";\n\ninterface FeedRegistryInterface {\n  struct Phase {\n    uint16 phaseId;\n    uint80 startingAggregatorRoundId;\n    uint80 endingAggregatorRoundId;\n  }\n\n  event FeedProposed(\n    address indexed asset,\n    address indexed denomination,\n    address indexed proposedAggregator,\n    address currentAggregator,\n    address sender\n  );\n  event FeedConfirmed(\n    address indexed asset,\n    address indexed denomination,\n    address indexed latestAggregator,\n    address previousAggregator,\n    uint16 nextPhaseId,\n    address sender\n  );\n\n  // V3 AggregatorV3Interface\n\n  function decimals(address base, address quote) external view returns (uint8);\n\n  function description(address base, address quote) external view returns (string memory);\n\n  function version(address base, address quote) external view returns (uint256);\n\n  function latestRoundData(address base, address quote)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function getRoundData(\n    address base,\n    address quote,\n    uint80 _roundId\n  )\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  // V2 AggregatorInterface\n\n  function latestAnswer(address base, address quote) external view returns (int256 answer);\n\n  function latestTimestamp(address base, address quote) external view returns (uint256 timestamp);\n\n  function latestRound(address base, address quote) external view returns (uint256 roundId);\n\n  function getAnswer(\n    address base,\n    address quote,\n    uint256 roundId\n  ) external view returns (int256 answer);\n\n  function getTimestamp(\n    address base,\n    address quote,\n    uint256 roundId\n  ) external view returns (uint256 timestamp);\n\n  // Registry getters\n\n  function getFeed(address base, address quote) external view returns (AggregatorV2V3Interface aggregator);\n\n  function getPhaseFeed(\n    address base,\n    address quote,\n    uint16 phaseId\n  ) external view returns (AggregatorV2V3Interface aggregator);\n\n  function isFeedEnabled(address aggregator) external view returns (bool);\n\n  function getPhase(\n    address base,\n    address quote,\n    uint16 phaseId\n  ) external view returns (Phase memory phase);\n\n  // Round helpers\n\n  function getRoundFeed(\n    address base,\n    address quote,\n    uint80 roundId\n  ) external view returns (AggregatorV2V3Interface aggregator);\n\n  function getPhaseRange(\n    address base,\n    address quote,\n    uint16 phaseId\n  ) external view returns (uint80 startingRoundId, uint80 endingRoundId);\n\n  function getPreviousRoundId(\n    address base,\n    address quote,\n    uint80 roundId\n  ) external view returns (uint80 previousRoundId);\n\n  function getNextRoundId(\n    address base,\n    address quote,\n    uint80 roundId\n  ) external view returns (uint80 nextRoundId);\n\n  // Feed management\n\n  function proposeFeed(\n    address base,\n    address quote,\n    address aggregator\n  ) external;\n\n  function confirmFeed(\n    address base,\n    address quote,\n    address aggregator\n  ) external;\n\n  // Proposed aggregator\n\n  function getProposedFeed(address base, address quote)\n    external\n    view\n    returns (AggregatorV2V3Interface proposedAggregator);\n\n  function proposedGetRoundData(\n    address base,\n    address quote,\n    uint80 roundId\n  )\n    external\n    view\n    returns (\n      uint80 id,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function proposedLatestRoundData(address base, address quote)\n    external\n    view\n    returns (\n      uint80 id,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  // Phases\n  function getCurrentPhaseId(address base, address quote) external view returns (uint16 currentPhaseId);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20Upgradeable.sol\";\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/draft-IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/structs/BitMapsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/BitMaps.sol)\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\n */\nlibrary BitMapsUpgradeable {\n    struct BitMap {\n        mapping(uint256 => uint256) _data;\n    }\n\n    /**\n     * @dev Returns whether the bit at `index` is set.\n     */\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        return bitmap._data[bucket] & mask != 0;\n    }\n\n    /**\n     * @dev Sets the bit at `index` to the boolean `value`.\n     */\n    function setTo(\n        BitMap storage bitmap,\n        uint256 index,\n        bool value\n    ) internal {\n        if (value) {\n            set(bitmap, index);\n        } else {\n            unset(bitmap, index);\n        }\n    }\n\n    /**\n     * @dev Sets the bit at `index`.\n     */\n    function set(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] |= mask;\n    }\n\n    /**\n     * @dev Unsets the bit at `index`.\n     */\n    function unset(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] &= ~mask;\n    }\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "contracts/interfaces/IERC20Extended.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport { IERC20Upgradeable } from \"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\";\r\n\r\ninterface IERC20Extended is IERC20Upgradeable {\r\n    function decimals() external view returns (uint8);\r\n}\r\n"
    },
    "contracts/interfaces/IPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport { AggregatorV3Interface } from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\ninterface IPriceOracle {\r\n    /// @notice Get Price Aggregator address\r\n    /// @param _base Base currency address\r\n    /// @param _quote Quote currency address\r\n    /// @return Chainlink aggregator for base/quote\r\n    function priceAggregator(address _base, address _quote) external view returns (AggregatorV3Interface);\r\n\r\n    /// @dev Set a new chainlink price aggregator\r\n    /// @param _base Base currency address\r\n    /// @param _quote Quote currency address\r\n    function setAggregator(address _base, address _quote, address _aggregator) external;\r\n\r\n    /// @notice Get price of `_base` in `quote`\r\n    /// @param _base Base currency address\r\n    /// @param _quote Quote currency address\r\n    /// @return basePrice Base price in quote\r\n    function getPrice(address _base, address _quote) external view returns (uint256 basePrice);\r\n}\r\n"
    },
    "contracts/interfaces/IRealEstateERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ninterface IRealEstateERC1155 {\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function nextRealEstateId() external view returns (uint256);\r\n\r\n    function setMinter(address _minter) external;\r\n\r\n    function setBurner(address _burner) external;\r\n\r\n    function mint(uint256 _id, address _to, uint256 _amount) external;\r\n\r\n    function burn(uint256 _id, uint256 _amount) external;\r\n}\r\n"
    },
    "contracts/interfaces/IRealEstateReserves.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ninterface IRealEstateReserves {\r\n    function deposit(uint256 _id, uint256 _amount, address _currency) external;\r\n}\r\n"
    },
    "contracts/libraries/IROFinance.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport { IERC20Extended } from \"../interfaces/IERC20Extended.sol\";\r\nimport { SafeERC20Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\r\n\r\nimport { FeedRegistryInterface } from \"@chainlink/contracts/src/v0.8/interfaces/FeedRegistryInterface.sol\";\r\nimport { Denominations } from \"@chainlink/contracts/src/v0.8/Denominations.sol\";\r\n\r\nimport { IUniswapV2Router01 } from \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\";\r\n\r\nimport { IRealEstateReserves } from \"../interfaces/IRealEstateReserves.sol\";\r\nimport { IPriceOracle } from \"../interfaces/IPriceOracle.sol\";\r\n\r\n/// @title IRO Finance\r\n/// @author Horizon DAO (Yuri Fernandes)\r\n/// @dev Library contain functions to perform financial computations\r\n///     for the InitialRealEstateOffering contract\r\nlibrary IROFinance {\r\n    using SafeERC20Upgradeable for IERC20Extended;\r\n\r\n    /// @dev Number of decimals of ETH\r\n    uint8 public constant ETH_DECIMALS = 18;\r\n\r\n    /// @dev Denominator used for basis point division\r\n    uint16 public constant DENOMINATOR = 10000;\r\n\r\n    /// @dev The swap fee in basis points (0.3%)\r\n    uint16 public constant SWAP_FEE = 30;\r\n\r\n    /// @dev Structure that holds all financial types\r\n    ///     used to swap tokens and consult relative prices\r\n    struct Finance {\r\n        IUniswapV2Router01 swapRouter;\r\n        IPriceOracle priceOracle;\r\n        address baseCurrency;\r\n    }\r\n\r\n    /// @dev Initialize the Finance structure\r\n    /// @param _finance Finance structure\r\n    /// @param _swapRouter Address of the Uniswap/Sushiswap router used to swap tokens\r\n    /// @param _priceOracle Price Oracle address\r\n    /// @param _baseCurrency Address of the token used as the base precification currency\r\n    function initializeFinance(\r\n        Finance storage _finance,\r\n        address _swapRouter,\r\n        address _priceOracle,\r\n        address _baseCurrency\r\n    ) internal {\r\n        _finance.swapRouter = IUniswapV2Router01(_swapRouter);\r\n        _finance.priceOracle = IPriceOracle(_priceOracle);\r\n        _finance.baseCurrency = _baseCurrency;\r\n    }\r\n\r\n    /// @dev Process commit payment\r\n    /// @param _finance Finance structure\r\n    /// @param _unitPrice Unit price of the token\r\n    /// @param _paymentToken The address of the token being used for payment\r\n    /// @param _priceWithSlippage Expected price with slippage\r\n    /// @param _amountToPurchase Amount of tokens to purchase\r\n    /// @param _relativePath Swap path relative to the origin and end currency\r\n    /// @param _baseCurrency Address of the token used as the base precification currency\r\n    function processPayment(\r\n        Finance memory _finance,\r\n        uint256 _unitPrice,\r\n        address _paymentToken,\r\n        uint256 _priceWithSlippage,\r\n        uint256 _amountToPurchase,\r\n        address[] memory _relativePath,\r\n        address _baseCurrency\r\n    ) internal returns (uint256 valueInBase) {\r\n        valueInBase = _amountToPurchase * _unitPrice;\r\n        if (_paymentToken == _baseCurrency) {\r\n            require(valueInBase <= _priceWithSlippage, \"Invalid amount\");\r\n            IERC20Extended(_paymentToken).safeTransferFrom(msg.sender, address(this), valueInBase);\r\n        } else if (_paymentToken != address(0)) {\r\n            IERC20Extended(_paymentToken).safeTransferFrom(msg.sender, address(this), _priceWithSlippage);\r\n            IERC20Extended(_paymentToken).safeApprove(address(_finance.swapRouter), _priceWithSlippage);\r\n            address[] memory path = new address[](_relativePath.length + 2);\r\n            path[0] = _paymentToken;\r\n            for (uint256 i = 0; i < _relativePath.length; i++) {\r\n                path[i + 1] = _relativePath[i];\r\n            }\r\n            path[path.length - 1] = _baseCurrency;\r\n            uint256[] memory amounts = _finance.swapRouter.swapTokensForExactTokens(\r\n                valueInBase,\r\n                _priceWithSlippage,\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n            if (amounts[0] < _priceWithSlippage) {\r\n                sendErc20(msg.sender, _priceWithSlippage - amounts[0], _paymentToken);\r\n            }\r\n        } else {\r\n            require(msg.value >= _priceWithSlippage, \"Not enough ethers sent\");\r\n            address[] memory path = new address[](_relativePath.length + 2);\r\n            path[0] = _finance.swapRouter.WETH();\r\n            for (uint256 i = 0; i < _relativePath.length; i++) {\r\n                path[i + 1] = _relativePath[i];\r\n            }\r\n            path[path.length - 1] = _baseCurrency;\r\n            uint256[] memory amounts = _finance.swapRouter.swapETHForExactTokens{ value: _priceWithSlippage }(\r\n                valueInBase,\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n            if (amounts[0] < msg.value) {\r\n                sendEther(msg.sender, msg.value - amounts[0]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Get the expected price of an IRO purchase (without slippage)\r\n    /// @param _finance Finance structure\r\n    /// @param _unitPrice Unit price of the token\r\n    /// @param _currency Payment token address\r\n    /// @param _amountToPurchase Amount of IRO tokens to purchase\r\n    /// @param _pathLength Swap path length\r\n    /// @param _baseCurrency Address of the token used as the base precification currency\r\n    function expectedPrice(\r\n        Finance memory _finance,\r\n        uint256 _unitPrice,\r\n        address _currency,\r\n        uint256 _amountToPurchase,\r\n        uint256 _pathLength,\r\n        address _baseCurrency\r\n    ) internal view returns (uint256) {\r\n        uint256 valueInBase = _amountToPurchase * _unitPrice;\r\n        if (_currency == _baseCurrency) {\r\n            return valueInBase;\r\n        }\r\n        return\r\n            (convertBaseToPaymentToken(_finance, valueInBase, _currency, _baseCurrency) *\r\n                (DENOMINATOR + (_pathLength - 1) * SWAP_FEE)) / DENOMINATOR;\r\n    }\r\n\r\n    /// @notice Get the price with slippage\r\n    /// @param _finance Finance structure\r\n    /// @param _unitPrice Unit price of the token\r\n    /// @param _paymentToken Payment token address\r\n    /// @param _amountToPurchase Amount of IRO tokens to purchase\r\n    /// @param _slippage Swap slippage in basis points\r\n    /// @param _pathLength Swap path length\r\n    /// @param _baseCurrency Address of the token used as the base precification currency\r\n    function priceWithSlippage(\r\n        Finance memory _finance,\r\n        uint256 _unitPrice,\r\n        address _paymentToken,\r\n        uint256 _amountToPurchase,\r\n        uint16 _slippage,\r\n        uint256 _pathLength,\r\n        address _baseCurrency\r\n    ) internal view returns (uint256) {\r\n        uint256 expectedPrice_ = expectedPrice(\r\n            _finance,\r\n            _unitPrice,\r\n            _paymentToken,\r\n            _amountToPurchase,\r\n            _pathLength,\r\n            _baseCurrency\r\n        );\r\n        if (_paymentToken == _baseCurrency) return expectedPrice_;\r\n        return (expectedPrice_ * (DENOMINATOR + _slippage)) / DENOMINATOR;\r\n    }\r\n\r\n    /// @dev Convert token share to amount\r\n    /// @param _totalFunding Total IRO funding\r\n    /// @param _unitPrice IRO token unit price\r\n    /// @param _share Token share\r\n    /// @return amount Amount of tokens\r\n    function shareToAmount(\r\n        uint256 _totalFunding,\r\n        uint256 _unitPrice,\r\n        uint16 _share\r\n    ) internal pure returns (uint256 amount) {\r\n        uint256 totalPurchased = _totalFunding / _unitPrice;\r\n        amount = (totalPurchased * _share) / (IROFinance.DENOMINATOR - _share);\r\n    }\r\n\r\n    /// @dev Distribute funds during IRO withdrawal\r\n    /// @param _listingOwner The listing owner of the IRO\r\n    /// @param _treasury Treasury contract address\r\n    /// @param _realEstateReserves RealEstateReserves contract address\r\n    /// @param _realEstateId ID of the RealEstate token to receive the funds\r\n    /// @param _totalFunding Total funds from the IRO\r\n    /// @param _listingOwnerFee Fee requested by the listing owner\r\n    /// @param _treasuryFee Treasury fee\r\n    /// @param _baseCurrency Address of the token used as the base precification currency\r\n    function distributeFunds(\r\n        address _listingOwner,\r\n        address _treasury,\r\n        IRealEstateReserves _realEstateReserves,\r\n        uint256 _realEstateId,\r\n        uint256 _totalFunding,\r\n        uint256 _listingOwnerFee,\r\n        uint256 _treasuryFee,\r\n        address _baseCurrency\r\n    )\r\n        internal\r\n        returns (\r\n            uint256 listingOwnerAmount,\r\n            uint256 treasuryAmount,\r\n            uint256 realEstateReservesAmount,\r\n            bool realEstateReservesSet\r\n        )\r\n    {\r\n        if (_listingOwnerFee > 0) {\r\n            listingOwnerAmount = (_listingOwnerFee * _totalFunding) / DENOMINATOR;\r\n            sendErc20(_listingOwner, listingOwnerAmount, _baseCurrency);\r\n        }\r\n        treasuryAmount = (_treasuryFee * _totalFunding) / DENOMINATOR;\r\n        realEstateReservesAmount = _totalFunding - (listingOwnerAmount + treasuryAmount);\r\n        if (address(_realEstateReserves) != address(0)) {\r\n            realEstateReservesSet = true;\r\n            if (treasuryAmount > 0) {\r\n                sendErc20(_treasury, treasuryAmount, _baseCurrency);\r\n            }\r\n\r\n            if (realEstateReservesAmount > 0) {\r\n                IERC20Extended(_baseCurrency).safeApprove(address(_realEstateReserves), realEstateReservesAmount);\r\n                _realEstateReserves.deposit(_realEstateId, realEstateReservesAmount, _baseCurrency);\r\n            }\r\n        } else {\r\n            sendErc20(_treasury, _totalFunding - listingOwnerAmount, _baseCurrency);\r\n        }\r\n    }\r\n\r\n    /// @dev Utility function to send an amount of ethers to a given address\r\n    /// @param _to Address to send ethers\r\n    /// @param _amount Amount of ethers to send\r\n    function sendEther(address _to, uint256 _amount) internal {\r\n        (bool success, ) = _to.call{ value: _amount }(\"\");\r\n        require(success, \"Failed sending ethers\");\r\n    }\r\n\r\n    /// @dev Utility function to send an amount of ERC20 tokens to a given address\r\n    /// @param _to Address to send tokens\r\n    /// @param _amount Amount of tokens to send\r\n    /// @param _token Address of the token to send\r\n    function sendErc20(address _to, uint256 _amount, address _token) internal {\r\n        IERC20Extended(_token).safeTransfer(_to, _amount);\r\n    }\r\n\r\n    /// @dev Convert a base currency amount to a given payment token\r\n    /// @param _finance Finance structure\r\n    /// @param _valueInBase Value in base tokens\r\n    /// @param _paymentToken Payment token address\r\n    /// @return Price in payment tokens\r\n    function convertBaseToPaymentToken(\r\n        Finance memory _finance,\r\n        uint256 _valueInBase,\r\n        address _paymentToken,\r\n        address _baseCurrency\r\n    ) internal view returns (uint256) {\r\n        uint256 paymentTokenPriceInBase = _finance.priceOracle.getPrice(_paymentToken, _baseCurrency);\r\n\r\n        return (_valueInBase * 10 ** uint256(_getTokenDecimals(_paymentToken))) / paymentTokenPriceInBase;\r\n    }\r\n\r\n    /// @dev Get the number of decimals of a token\r\n    /// @param _token Token address\r\n    /// @return Number of decimals\r\n    function _getTokenDecimals(address _token) private view returns (uint8) {\r\n        if (_token == address(0)) return ETH_DECIMALS;\r\n        return IERC20Extended(_token).decimals();\r\n    }\r\n}\r\n"
    },
    "contracts/protocol/InitialRealEstateOffering.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport { OwnableUpgradeable } from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport { CountersUpgradeable } from \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\";\r\nimport { BitMapsUpgradeable } from \"@openzeppelin/contracts-upgradeable/utils/structs/BitMapsUpgradeable.sol\";\r\nimport { UUPSUpgradeable } from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\n\r\nimport { IRealEstateERC1155 } from \"../interfaces/IRealEstateERC1155.sol\";\r\nimport { IRealEstateReserves } from \"../interfaces/IRealEstateReserves.sol\";\r\nimport { IROFinance } from \"../libraries/IROFinance.sol\";\r\n\r\n/// @title Initial Real Estate Offering (IRO)\r\n/// @author Horizon DAO (Yuri Fernandes)\r\n/// @notice Used to run IROs, mint tokens to RealEstateNFT\r\n///     and distribute funds\r\ncontract InitialRealEstateOffering is OwnableUpgradeable, UUPSUpgradeable {\r\n    using CountersUpgradeable for CountersUpgradeable.Counter;\r\n    using BitMapsUpgradeable for BitMapsUpgradeable.BitMap;\r\n    using IROFinance for IROFinance.Finance;\r\n\r\n    /// @dev IRO status enum\r\n    enum Status {\r\n        PENDING,\r\n        ONGOING,\r\n        SUCCESS,\r\n        FAIL\r\n    }\r\n\r\n    /// @dev Initial Real Estate Offerring structure\r\n    /// @dev Since timestamps are 64 bit integers, last IRO\r\n    ///     should finish at 21 de julho de 2554 11:34:33.709 UTC.\r\n    struct IRO {\r\n        address listingOwner;\r\n        uint64 start;\r\n        uint16 treasuryFee;\r\n        uint16 listingOwnerFee;\r\n        uint16 listingOwnerShare;\r\n        uint64 end;\r\n        uint256 softCap;\r\n        uint256 hardCap;\r\n        uint256 unitPrice;\r\n        uint256 totalFunding;\r\n        address baseCurrency;\r\n    }\r\n\r\n    struct WhitelistedCurrency {\r\n        bool whitelisted;\r\n        address[] relativePath;\r\n    }\r\n\r\n    /// @notice Treasury contract address\r\n    address public treasury;\r\n\r\n    /// @notice RealEstateNFT contract address\r\n    IRealEstateERC1155 public realEstateNft;\r\n\r\n    /// @notice RealEstateReserves contract address\r\n    IRealEstateReserves public realEstateReserves;\r\n\r\n    /// @notice Structure composed by the addresses\r\n    ///     of contracts responsible for making financial operations\r\n    IROFinance.Finance public finance;\r\n\r\n    /// @dev Next available IRO ID\r\n    CountersUpgradeable.Counter private _nextAvailableId;\r\n\r\n    /// @dev mapping (iroId => iro)\r\n    mapping(uint256 => IRO) private _iros;\r\n\r\n    /// @dev mapping (iroId => user => commit)\r\n    mapping(uint256 => mapping(address => uint256)) public commits;\r\n\r\n    /// @dev mapping (iroId => realEstateId)\r\n    mapping(uint256 => uint256) public realEstateId;\r\n\r\n    /// @dev mapping (currencyAddress => WhitelistedCurrency)\r\n    mapping(address => WhitelistedCurrency) public whitelistedCurrency;\r\n\r\n    /// @dev Points out whether funds have been withdrawn from IRO\r\n    BitMapsUpgradeable.BitMap private _fundsWithdrawn;\r\n\r\n    /// @dev Points out whether the listingOwner has claimed it's share\r\n    BitMapsUpgradeable.BitMap private _listingOwnerClaimed;\r\n\r\n    /// @dev Whether an ID has already been set in the RealEstateNFT contract for the IRO\r\n    BitMapsUpgradeable.BitMap private _realEstateIdSet;\r\n\r\n    /// @dev Emitted when a new IRO is created\r\n    event CreateIRO(\r\n        uint256 indexed _id,\r\n        address indexed _listingOwner,\r\n        uint256 _unitPrice,\r\n        uint16 _listingOwnerShare,\r\n        uint16 _treasuryFee,\r\n        uint64 _start,\r\n        uint64 _end\r\n    );\r\n\r\n    /// @dev Emitted when a new Commit is made to an IRO\r\n    event Commit(\r\n        uint256 indexed _iroId,\r\n        address indexed _user,\r\n        address indexed _currency,\r\n        uint256 _amountInBase,\r\n        uint256 _purchasedTokens\r\n    );\r\n\r\n    /// @dev Emitted when `whitelistCurrency` is executed\r\n    event WhitelistCurrency(address indexed _by, address indexed _currency, bool indexed _whitelist);\r\n\r\n    /// @dev Emitted when tokens are claimed by investors\r\n    event TokensClaimed(uint256 indexed _iroId, address indexed _by, address indexed _to, uint256 _amount);\r\n\r\n    /// @dev Emitted when the listing owner claims it's shares of the tokens\r\n    event OwnerTokensClaimed(uint256 indexed _iroId, address indexed _by, address indexed _to, uint256 _amount);\r\n\r\n    /// @dev Emitted when an investors withdraw it's funds after an IRO fails\r\n    event CashBack(uint256 indexed _iroId, address indexed _by, address indexed _to, uint256 _commitAmount);\r\n\r\n    /// @dev Emitted when a new base currency is set\r\n    event SetBaseCurrency(address indexed _by, address indexed _baseCurrency);\r\n\r\n    /// @dev Emitted when the currency relative path is updated\r\n    event PathUpdated(address indexed _by, address indexed _currency);\r\n\r\n    /// @dev Emitted when the Treasury contract is set\r\n    event SetTreasury(address indexed _by, address indexed _treasury);\r\n\r\n    /// @dev Emitted when the RealEstateReserves contract is set\r\n    event SetRealEstateReserves(address indexed _by, address indexed _realEstateReserves);\r\n\r\n    /// @dev Emitted when a new real estate token ID is created\r\n    event RealEstateCreated(uint256 indexed _iroId, uint256 indexed _realEstateId);\r\n\r\n    /// @dev Emitted when funds from an IRO are withdrawn\r\n    event FundsWithdrawn(\r\n        uint256 indexed _iroId,\r\n        address indexed _by,\r\n        bool indexed _realEstateFundsSet,\r\n        uint256 _listingOwnerAmount,\r\n        uint256 _treasuryAmount,\r\n        uint256 _realEstateFundsAmount\r\n    );\r\n\r\n    /// @dev Initialize IRO contract\r\n    /// @param _realEstateNft RealEstateNFT contract address\r\n    /// @param _treasury Treasury contract address\r\n    /// @param _realEstateReserves RealEstateReserves contract address\r\n    /// @param _baseCurrency Base token used to precify the IRO tokens\r\n    /// @param _priceFeedRegistry Chainlink Price Feed Registry address\r\n    /// @param _swapRouter Uniswap or Sushiswap swap router\r\n    function initialize(\r\n        address _owner,\r\n        address _realEstateNft,\r\n        address _treasury,\r\n        address _realEstateReserves,\r\n        address _baseCurrency,\r\n        address _priceFeedRegistry,\r\n        address _swapRouter\r\n    ) external initializer {\r\n        require(_realEstateNft != address(0), \"!_realEstateNft\");\r\n        require(_treasury != address(0), \"!_treasury\");\r\n        require(_baseCurrency != address(0), \"!_baseCurrency\");\r\n        require(_priceFeedRegistry != address(0), \"!_priceFeedRegistry\");\r\n        require(_swapRouter != address(0), \"!_swapRouter\");\r\n        realEstateNft = IRealEstateERC1155(_realEstateNft);\r\n        treasury = _treasury;\r\n        realEstateReserves = IRealEstateReserves(_realEstateReserves);\r\n        finance.initializeFinance(_swapRouter, _priceFeedRegistry, _baseCurrency);\r\n        whitelistedCurrency[_baseCurrency].whitelisted = true;\r\n        _transferOwnership(_owner);\r\n    }\r\n\r\n    /// @dev Set a new base price token\r\n    /// @param _baseCurrency Base price token address (ERC20)\r\n    function setBaseCurrency(address _baseCurrency) external onlyOwner {\r\n        require(_baseCurrency != address(0), \"!_baseCurrency\");\r\n        finance.baseCurrency = _baseCurrency;\r\n        whitelistedCurrency[_baseCurrency].whitelisted = true;\r\n        emit SetBaseCurrency(msg.sender, _baseCurrency);\r\n    }\r\n\r\n    /// @dev Set new treasury\r\n    /// @param _treasury Treasury address\r\n    function setTreasury(address _treasury) external onlyOwner {\r\n        require(_treasury != address(0), \"!_treasury\");\r\n        treasury = _treasury;\r\n        emit SetTreasury(msg.sender, _treasury);\r\n    }\r\n\r\n    /// @dev Set new real estate reserves\r\n    /// @param _realEstateReserves RealEstateReseres address\r\n    function setRealEstateReserves(address _realEstateReserves) external onlyOwner {\r\n        require(_realEstateReserves != address(0), \"!_realEstateReserves\");\r\n        realEstateReserves = IRealEstateReserves(_realEstateReserves);\r\n        emit SetRealEstateReserves(msg.sender, _realEstateReserves);\r\n    }\r\n\r\n    /// @dev Create new IRO\r\n    /// @param _listingOwner Listing owner address\r\n    /// @param _listingOwnerFee Listing owner fee in basis points\r\n    /// @param _listingOwnerShare Listing owner share of IRO tokens in basis points\r\n    /// @param _treasuryFee Treasury fee percentage in basis points\r\n    /// @param _duration Duration of the IRO in seconds\r\n    /// @param _softCap Minimum fundraising in base price token\r\n    /// @param _hardCap Maximum fundraising in base price token\r\n    /// @param _unitPrice Price per unit of IRO token in base price token\r\n    /// @param _startOffset Time before IRO begins\r\n    function createIRO(\r\n        address _listingOwner,\r\n        uint16 _listingOwnerFee,\r\n        uint16 _listingOwnerShare,\r\n        uint16 _treasuryFee,\r\n        uint64 _duration,\r\n        uint256 _softCap,\r\n        uint256 _hardCap,\r\n        uint256 _unitPrice,\r\n        uint64 _startOffset\r\n    ) external onlyOwner {\r\n        require(\r\n            _listingOwnerShare <= IROFinance.DENOMINATOR && _treasuryFee <= IROFinance.DENOMINATOR,\r\n            \"Invalid basis point\"\r\n        );\r\n        require((_hardCap - _softCap) % _unitPrice == 0, \"Caps should be multiples of unitPrice\");\r\n\r\n        uint256 currentId = iroLength();\r\n        uint64 start_ = now64() + _startOffset;\r\n        uint64 end_ = start_ + _duration;\r\n        _iros[currentId] = IRO({\r\n            listingOwner: _listingOwner,\r\n            start: start_,\r\n            treasuryFee: _treasuryFee,\r\n            listingOwnerFee: _listingOwnerFee,\r\n            listingOwnerShare: _listingOwnerShare,\r\n            end: end_,\r\n            softCap: _softCap,\r\n            hardCap: _hardCap,\r\n            unitPrice: _unitPrice,\r\n            totalFunding: 0,\r\n            baseCurrency: finance.baseCurrency\r\n        });\r\n        _nextAvailableId.increment();\r\n\r\n        emit CreateIRO(currentId, _listingOwner, _unitPrice, _listingOwnerShare, _treasuryFee, start_, end_);\r\n    }\r\n\r\n    /// @notice Commit to an IRO\r\n    /// @param _iroId ID of the IRO\r\n    /// @param _currency Currency address\r\n    /// @param _priceWithSlippage Expected price with slippage\r\n    /// @param _amountToPurchase Amount of IRO tokens to purchase\r\n    function commit(\r\n        uint256 _iroId,\r\n        address _currency,\r\n        uint256 _priceWithSlippage,\r\n        uint256 _amountToPurchase\r\n    ) external payable {\r\n        require(_amountToPurchase > 0, \"_amountToPurchase should be greater than zero\");\r\n        WhitelistedCurrency memory whitelistedCurrency_ = whitelistedCurrency[_currency];\r\n        require(_currency == finance.baseCurrency || whitelistedCurrency_.whitelisted, \"Currency not allowed\");\r\n        IRO memory iro = getIRO(_iroId);\r\n        require(_getStatus(iro) == Status.ONGOING, \"IRO is not active\");\r\n        require(iro.totalFunding + _amountToPurchase * iro.unitPrice <= iro.hardCap, \"Hardcap reached\");\r\n        if (_currency != address(0) && msg.value > 0) {\r\n            IROFinance.sendEther(msg.sender, msg.value);\r\n        }\r\n\r\n        uint256 valueInBase = finance.processPayment(\r\n            iro.unitPrice,\r\n            _currency,\r\n            _priceWithSlippage,\r\n            _amountToPurchase,\r\n            whitelistedCurrency_.relativePath,\r\n            iro.baseCurrency\r\n        );\r\n\r\n        commits[_iroId][msg.sender] += valueInBase;\r\n        _iros[_iroId].totalFunding += valueInBase;\r\n\r\n        emit Commit(_iroId, msg.sender, _currency, valueInBase, _amountToPurchase);\r\n    }\r\n\r\n    /// @dev Enable receiving ETH\r\n    receive() external payable {}\r\n\r\n    /// @notice Claim purchased tokens when IRO successful or\r\n    ///     get back commit amount in base currency if IRO failed\r\n    /// @param _iroId ID of the IRO\r\n    /// @param _to Address to send the claimed tokens\r\n    function claim(uint256 _iroId, address _to) external {\r\n        IRO memory iro = getIRO(_iroId);\r\n        Status status = _getStatus(iro);\r\n        require(status > Status.ONGOING, \"IRO not finished\");\r\n        uint256 commitAmount = commits[_iroId][msg.sender];\r\n        require(commitAmount > 0, \"Nothing to mint\");\r\n        if (status == Status.SUCCESS) {\r\n            uint256 amountToMint = commitAmount / iro.unitPrice;\r\n            realEstateNft.mint(_retrieveRealEstateId(_iroId), msg.sender, amountToMint);\r\n            emit TokensClaimed(_iroId, msg.sender, _to, amountToMint);\r\n        } else {\r\n            IROFinance.sendErc20(_to, commitAmount, finance.baseCurrency);\r\n            commits[_iroId][msg.sender] = 0;\r\n            emit CashBack(_iroId, msg.sender, _to, commitAmount);\r\n        }\r\n    }\r\n\r\n    /// @notice Claim listing owner tokens\r\n    /// @param _iroId ID of the IRO\r\n    /// @param _to Address to send the tokens\r\n    function listingOwnerClaim(uint256 _iroId, address _to) external {\r\n        IRO memory iro = getIRO(_iroId);\r\n        require(msg.sender == iro.listingOwner, \"!allowed\");\r\n        require(!_listingOwnerClaimed.get(_iroId), \"Already claimed\");\r\n        require(_getStatus(iro) == Status.SUCCESS, \"IRO not successful\");\r\n        require(iro.listingOwnerShare > 0, \"Nothing to claim\");\r\n        uint256 listingOwnerAmount = IROFinance.shareToAmount(iro.totalFunding, iro.unitPrice, iro.listingOwnerShare);\r\n        realEstateNft.mint(_retrieveRealEstateId(_iroId), _to, listingOwnerAmount);\r\n        _listingOwnerClaimed.set(_iroId);\r\n        emit OwnerTokensClaimed(_iroId, msg.sender, _to, listingOwnerAmount);\r\n    }\r\n\r\n    /// @notice Withdraw and distribute funds from successful IROs\r\n    /// @param _iroId ID of the IRO\r\n    function withdraw(uint256 _iroId) external {\r\n        IRO memory iro = getIRO(_iroId);\r\n        require(_getStatus(iro) == Status.SUCCESS, \"IRO not successful\");\r\n        require(!_fundsWithdrawn.get(_iroId), \"Already withdrawn\");\r\n        (\r\n            uint256 listingOwnerAmount,\r\n            uint256 treasuryAmount,\r\n            uint256 realEstateReservesAmount,\r\n            bool realEstateReservesSet\r\n        ) = IROFinance.distributeFunds(\r\n                iro.listingOwner,\r\n                treasury,\r\n                realEstateReserves,\r\n                _retrieveRealEstateId(_iroId),\r\n                iro.totalFunding,\r\n                iro.listingOwnerFee,\r\n                iro.treasuryFee,\r\n                iro.baseCurrency\r\n            );\r\n        _fundsWithdrawn.set(_iroId);\r\n        emit FundsWithdrawn(\r\n            _iroId,\r\n            msg.sender,\r\n            realEstateReservesSet,\r\n            listingOwnerAmount,\r\n            treasuryAmount,\r\n            realEstateReservesAmount\r\n        );\r\n    }\r\n\r\n    /// @dev Whitelist currencies\r\n    /// @param _currency Currency ERC20 address\r\n    /// @param _whitelist Whether to whitelist\r\n    function whitelistCurrency(address _currency, bool _whitelist) external onlyOwner {\r\n        require(_currency != finance.baseCurrency, \"baseCurrency\");\r\n        whitelistedCurrency[_currency].whitelisted = _whitelist;\r\n        emit WhitelistCurrency(msg.sender, _currency, _whitelist);\r\n    }\r\n\r\n    /// @dev Update relative swap router path of a currency\r\n    /// @param _currency Currency ERC20 address\r\n    /// @param _relativePath Swap relative path\r\n    function setrelativePath(address _currency, address[] memory _relativePath) external onlyOwner {\r\n        require(_currency != address(0), \"!invalid address\");\r\n        whitelistedCurrency[_currency].relativePath = _relativePath;\r\n        emit PathUpdated(msg.sender, _currency);\r\n    }\r\n\r\n    /// @notice Get the expected price of an IRO purchase (without slippage)\r\n    /// @notice Takes into account swap fees\r\n    /// @param _iroId ID of the IRO\r\n    /// @param _currency Currency address\r\n    /// @param _amountToPurchase Amount of IRO tokens to purchase\r\n    function expectedPrice(\r\n        uint256 _iroId,\r\n        address _currency,\r\n        uint256 _amountToPurchase\r\n    ) external view returns (uint256) {\r\n        WhitelistedCurrency memory whitelistedCurrency_ = whitelistedCurrency[_currency];\r\n        require(whitelistedCurrency_.whitelisted, \"Currency is not available\");\r\n        IRO memory iro = getIRO(_iroId);\r\n        return\r\n            finance.expectedPrice(\r\n                iro.unitPrice,\r\n                _currency,\r\n                _amountToPurchase,\r\n                whitelistedCurrency_.relativePath.length + 2,\r\n                iro.baseCurrency\r\n            );\r\n    }\r\n\r\n    /// @notice Get the price with slippage\r\n    /// @notice Takes into account swap fees\r\n    /// @param _iroId ID of the IRO\r\n    /// @param _currency Currency address\r\n    /// @param _amountToPurchase Amount of IRO tokens to purchase\r\n    /// @param _slippage Swap slippage in basis points\r\n    function priceWithSlippage(\r\n        uint256 _iroId,\r\n        address _currency,\r\n        uint256 _amountToPurchase,\r\n        uint16 _slippage\r\n    ) external view returns (uint256) {\r\n        WhitelistedCurrency memory whitelistedCurrency_ = whitelistedCurrency[_currency];\r\n        require(whitelistedCurrency_.whitelisted, \"Currency is not available\");\r\n        IRO memory iro = getIRO(_iroId);\r\n        return\r\n            finance.priceWithSlippage(\r\n                iro.unitPrice,\r\n                _currency,\r\n                _amountToPurchase,\r\n                _slippage,\r\n                whitelistedCurrency_.relativePath.length + 2,\r\n                iro.baseCurrency\r\n            );\r\n    }\r\n\r\n    /// @notice Get the amount of remaining IRO tokens\r\n    /// @param _iroId ID of the IRO\r\n    function remainingTokens(uint256 _iroId) external view returns (uint256) {\r\n        IRO memory iro = getIRO(_iroId);\r\n        return (iro.hardCap - iro.totalFunding) / iro.unitPrice;\r\n    }\r\n\r\n    /// @notice Get IRO status\r\n    /// @param _iroId ID of the IRO\r\n    function getStatus(uint256 _iroId) external view returns (Status) {\r\n        IRO memory iro = _iros[_iroId];\r\n        return _getStatus(iro);\r\n    }\r\n\r\n    /// @notice Denominator used for basis points divisions\r\n    function denominator() external pure returns (uint16) {\r\n        return IROFinance.DENOMINATOR;\r\n    }\r\n\r\n    /// @notice Get IRO\r\n    /// @param _iroId ID of the IRO\r\n    function getIRO(uint256 _iroId) public view returns (IRO memory) {\r\n        require(_iroId < iroLength(), \"_iroId out-of-bounds\");\r\n        return _iros[_iroId];\r\n    }\r\n\r\n    /// @notice Get current time (uint64)\r\n    function now64() public view returns (uint64) {\r\n        return uint64(block.timestamp);\r\n    }\r\n\r\n    /// @notice Get total amount of IROs\r\n    function iroLength() public view returns (uint256) {\r\n        return _nextAvailableId.current();\r\n    }\r\n\r\n    /// @dev Retrieve the realEstateId associated with a given IRO\r\n    /// @dev If none is assigned, assigns a new one\r\n    /// @param _iroId ID of the IRO\r\n    function _retrieveRealEstateId(uint256 _iroId) internal returns (uint256 _realEstateId) {\r\n        if (!_realEstateIdSet.get(_iroId)) {\r\n            _realEstateId = realEstateNft.nextRealEstateId();\r\n            realEstateId[_iroId] = _realEstateId;\r\n            _realEstateIdSet.set(_iroId);\r\n            emit RealEstateCreated(_iroId, _realEstateId);\r\n        } else {\r\n            _realEstateId = realEstateId[_iroId];\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc UUPSUpgradeable\r\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyOwner {}\r\n\r\n    /// @dev Get status of an IRO\r\n    /// @param _iro IRO structure\r\n    function _getStatus(IRO memory _iro) internal view returns (Status) {\r\n        if (now64() <= _iro.start) return Status.PENDING;\r\n        if (now64() < _iro.end) {\r\n            if (_iro.totalFunding == _iro.hardCap) return Status.SUCCESS;\r\n            return Status.ONGOING;\r\n        }\r\n        if (now64() >= _iro.end) {\r\n            if (_iro.totalFunding < _iro.softCap) return Status.FAIL;\r\n            return Status.SUCCESS;\r\n        }\r\n        return Status.FAIL;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
