{
  "language": "Solidity",
  "sources": {
    "contracts/hardhat-dependency-compiler/@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol';\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155.sol\";\n\n/**\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\n *\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\n * clearly identified. Note: While a totalSupply of 1 might mean the\n * corresponding is an NFT, there is no guarantees that no other token with the\n * same id are not going to be minted.\n */\nabstract contract ERC1155Supply is ERC1155 {\n    mapping(uint256 => uint256) private _totalSupply;\n\n    /**\n     * @dev Total amount of tokens in with a given id.\n     */\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\n        return _totalSupply[id];\n    }\n\n    /**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n    function exists(uint256 id) public view virtual returns (bool) {\n        return ERC1155Supply.totalSupply(id) > 0;\n    }\n\n    /**\n     * @dev See {ERC1155-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        if (from == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                _totalSupply[ids[i]] += amounts[i];\n            }\n        }\n\n        if (to == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                uint256 id = ids[i];\n                uint256 amount = amounts[i];\n                uint256 supply = _totalSupply[id];\n                require(supply >= amount, \"ERC1155: burn amount exceeds totalSupply\");\n                unchecked {\n                    _totalSupply[id] = supply - amount;\n                }\n            }\n        }\n    }\n}\n"
    },
    "contracts/token/SingleApprovableERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport { ERC1155Supply } from \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\";\nimport { IERC1155 } from \"@openzeppelin/contracts/interfaces/IERC1155.sol\";\n\n/// @title Siple Approvable ERC1155\n/// @author Yuri Fernandes (HorizonDAO)\n/// @dev Allows the approval for a single collection and a certain amount of tokens\n///     to be transferred with the allowed party\nabstract contract SingleApprovableERC1155 is ERC1155Supply {\n    /// @dev mapping (collectionId => owner => spender => amount)\n    mapping(uint256 => mapping(address => mapping(address => uint256))) private _allowances;\n\n    /// @dev Emitted when allowance is given\n    event Approval(uint256 indexed _id, address indexed _owner, address indexed _spender, uint256 _amount);\n\n    /// @notice Approve a spender to transfer tokens\n    /// @param _id Collection ID\n    /// @param _spender Spender address\n    /// @param _amount Amount allowed\n    function approve(\n        uint256 _id,\n        address _spender,\n        uint256 _amount\n    ) public returns (bool) {\n        address owner_ = _msgSender();\n        _approve(_id, owner_, _spender, _amount);\n        return true;\n    }\n\n    /// @inheritdoc IERC1155\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint256 _id,\n        uint256 _amount,\n        bytes memory _data\n    ) public override {\n        if (_from != _msgSender() && !isApprovedForAll(_from, _msgSender())) {\n            require(_allowances[_id][_from][_msgSender()] >= _amount, \"Not authorized\");\n            _allowances[_id][_from][_msgSender()] -= _amount;\n        }\n        _safeTransferFrom(_from, _to, _id, _amount, _data);\n    }\n\n    /// @inheritdoc IERC1155\n    function safeBatchTransferFrom(\n        address _from,\n        address _to,\n        uint256[] memory _ids,\n        uint256[] memory _amounts,\n        bytes memory _data\n    ) public virtual override {\n        if (_from != _msgSender() && !isApprovedForAll(_from, _msgSender())) {\n            for (uint256 i = 0; i < _ids.length; i++) {\n                require(_allowances[_ids[i]][_from][_msgSender()] >= _amounts[i], \"Not authorized\");\n                _allowances[_ids[i]][_from][_msgSender()] -= _amounts[i];\n            }\n        }\n        _safeBatchTransferFrom(_from, _to, _ids, _amounts, _data);\n    }\n\n    /// @dev See {approve} notice\n    /// @param _id Collection ID\n    /// @param _spender Spender address\n    /// @param _amount Amount allowed\n    function _approve(\n        uint256 _id,\n        address _owner,\n        address _spender,\n        uint256 _amount\n    ) internal virtual {\n        require(_owner != address(0), \"Approve from the zero address\");\n        require(_spender != address(0), \"Approve to the zero address\");\n\n        _allowances[_id][_owner][_spender] = _amount;\n        emit Approval(_id, _owner, _spender, _amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC1155/IERC1155.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n"
    },
    "contracts/token/SkyERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport { IERC165 } from \"@openzeppelin/contracts/interfaces/IERC165.sol\";\r\nimport { IERC20 } from \"@openzeppelin/contracts/interfaces/IERC20.sol\";\r\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\n/// @title Sky Token\r\n/// @author Yuri Fernandes (HorizonDAO)\r\n/// @notice HorizonDAO Governance token\r\ncontract SkyERC20 is ERC20, IERC165 {\r\n    /// @dev Maximum supply of 100M tokens (with 18 decimal points)\r\n    uint256 public constant MAX_SUPPLY = 100_000_000 * 1e18;\r\n\r\n    /// @dev Address of the admin: Can set new admin, burner and minter addresses\r\n    address public admin;\r\n\r\n    /// @dev Address of the minter: Can execute mint function\r\n    address public minter; // TODO: Will it be only one minter?\r\n\r\n    /// @dev When the first epoch starts\r\n    uint64 public firstEpochStartTime;\r\n\r\n    /// @dev Durations for the epochs, should be of size n-1 (n is the number of epochs)\r\n    /// @dev The last epoch duration would be infinite\r\n    uint64[] public epochDurations;\r\n\r\n    /// @dev Total number of epochs\r\n    uint8 public immutable numberOfEpochs;\r\n\r\n    /// @dev Values to increment the availableSupply at the end of an epoch\r\n    uint256[] public rampValues;\r\n\r\n    /// @dev Checks if msg.sender is the admin\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"!admin\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Emitted when a new admin is set\r\n    event NewAdmin(address indexed _admin);\r\n\r\n    /// @dev Emitted when a new burner is set\r\n    event NewBurner(address indexed _burner);\r\n\r\n    /// @dev Emitted when a new minter is set\r\n    event NewMinter(address indexed _minter);\r\n\r\n    /// @dev Emitted when additional supply is minted\r\n    event SupplyMinted(\r\n        address indexed _minter,\r\n        address indexed _receiver,\r\n        uint8 indexed _epoch,\r\n        uint256 _amount,\r\n        uint256 _mintableSupply\r\n    );\r\n\r\n    /// @dev Initialize SkyERC20 contract\r\n    /// @param _admin Address of the admin of the contract\r\n    /// @param _numberOfEpochs Number of supply release epochs\r\n    /// @param _firstEpochStartTime When the first epoch starts\r\n    /// @param _epochDurations The duration of each epoch (last epoch duration is infinite)\r\n    /// @param _rampValues How much to increase the availableSupply at each epoch\r\n    constructor(\r\n        address _admin,\r\n        uint8 _numberOfEpochs,\r\n        uint64 _firstEpochStartTime,\r\n        uint64[] memory _epochDurations,\r\n        uint256[] memory _rampValues\r\n    ) ERC20(\"HorizonDAO Token\", \"SKY\") {\r\n        require(_numberOfEpochs >= 1, \"_numberOfEpochs == 0\");\r\n        require(_rampValues.length == _numberOfEpochs, \"_rampValues.length != _numberOfEpochs\");\r\n        require(_epochDurations.length == _numberOfEpochs - 1, \"_epochDurations.length != _numberOfEpochs-1\");\r\n        uint256 totalReleasedSupply;\r\n        for (uint256 i = 0; i < _rampValues.length; i++) {\r\n            totalReleasedSupply += _rampValues[i];\r\n            rampValues.push(_rampValues[i]);\r\n            if (i != _rampValues.length - 1) epochDurations.push(_epochDurations[i]);\r\n        }\r\n        require(totalReleasedSupply == MAX_SUPPLY, \"totalReleasedSupply != MAX_SUPPLY\");\r\n        // set the first epoch start time\r\n        firstEpochStartTime = _firstEpochStartTime;\r\n\r\n        // set the total number of epochs\r\n        numberOfEpochs = _numberOfEpochs;\r\n\r\n        // set contract admin\r\n        admin = _admin;\r\n        emit NewAdmin(_admin);\r\n    }\r\n\r\n    /// @notice get current epoch\r\n    function currentEpoch() external view returns (uint8 _currentEpoch) {\r\n        (_currentEpoch, , ) = _getEpochInfo();\r\n    }\r\n\r\n    /// @notice get current epoch start time\r\n    function currentEpochStartTime() external view returns (uint64 _currentEpochStartTime) {\r\n        (, _currentEpochStartTime, ) = _getEpochInfo();\r\n    }\r\n\r\n    /// @notice get available supply\r\n    function availableSupply() public view returns (uint256 _availableSupply) {\r\n        (, , _availableSupply) = _getEpochInfo();\r\n    }\r\n\r\n    /// @notice Get the amount of mintable tokens at the moment\r\n    function mintableSupply() public view returns (uint256) {\r\n        return availableSupply() - totalSupply();\r\n    }\r\n\r\n    /// @notice Get the current timestamp converted to uint64\r\n    function now64() public view returns (uint64) {\r\n        return uint64(block.timestamp);\r\n    }\r\n\r\n    /// @notice Has supply releasing epochs started? (first epoch)\r\n    function supplyReleaseStarted() external view returns (bool) {\r\n        return now64() >= firstEpochStartTime;\r\n    }\r\n\r\n    /// @dev Set new admin role\r\n    /// @param _admin New admin address\r\n    function setAdmin(address _admin) external onlyAdmin {\r\n        require(admin != _admin, \"admin == _admin\");\r\n        admin = _admin;\r\n        emit NewAdmin(_admin);\r\n    }\r\n\r\n    /// @dev Set new minter role\r\n    /// @param _minter New minter address\r\n    function setMinter(address _minter) external onlyAdmin {\r\n        require(minter != _minter, \"minter == _minter\");\r\n        minter = _minter;\r\n        emit NewMinter(_minter);\r\n    }\r\n\r\n    /// @dev Mints an amount of tokens to an arbitrary account\r\n    /// @dev MINTER_ROLE is required to execute this function\r\n    /// @param account The account to mint the tokens to\r\n    /// @param amount The amount of tokens to mint\r\n    function mint(address account, uint256 amount) external {\r\n        require(msg.sender == minter, \"!minter\");\r\n        (uint8 _currentEpoch, , uint256 _availableSupply) = _getEpochInfo();\r\n        uint256 _mintableSupply = _availableSupply - totalSupply();\r\n        require(amount <= _mintableSupply, \"amount > mintableSupply\");\r\n        _mint(account, amount);\r\n        emit SupplyMinted(msg.sender, account, _currentEpoch, amount, _mintableSupply);\r\n    }\r\n\r\n    /// @dev Get updated epoch info\r\n    /// @return _currentEpoch The current epoch number\r\n    /// @return _currentEpochStartTime The current epoch start time\r\n    /// @return _availableSupply Current available supply (unlocked)\r\n    function _getEpochInfo()\r\n        internal\r\n        view\r\n        returns (\r\n            uint8 _currentEpoch,\r\n            uint64 _currentEpochStartTime,\r\n            uint256 _availableSupply\r\n        )\r\n    {\r\n        // store in memory to save gas\r\n        _currentEpochStartTime = firstEpochStartTime;\r\n\r\n        // check if epochs have started\r\n        if (now64() < _currentEpochStartTime) return (_currentEpoch, uint64(0), _availableSupply);\r\n\r\n        // store in memory to save gas\r\n        uint8 _numberOfEpochs = numberOfEpochs;\r\n        uint64[] memory _epochDurations = epochDurations;\r\n        uint256[] memory _rampValues = rampValues;\r\n\r\n        // update epoch info until it the current epoch reaches the maximum number\r\n        // of epochs or current time is less than the current epoch start time\r\n        // plus the current epoch duration\r\n        _currentEpoch = 1;\r\n        _availableSupply += _rampValues[_currentEpoch - 1];\r\n        while (\r\n            _currentEpoch < _numberOfEpochs && now64() >= _currentEpochStartTime + _epochDurations[_currentEpoch - 1]\r\n        ) {\r\n            _currentEpochStartTime += _epochDurations[_currentEpoch - 1];\r\n            _availableSupply += _rampValues[_currentEpoch];\r\n            ++_currentEpoch;\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IERC165\r\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool) {\r\n        return type(IERC165).interfaceId == interfaceId || type(IERC20).interfaceId == interfaceId;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
    },
    "contracts/protocol/Vesting.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport { IERC165 } from \"@openzeppelin/contracts/interfaces/IERC165.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/interfaces/IERC20.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { Counters } from \"@openzeppelin/contracts/utils/Counters.sol\";\nimport { IVoteEscrow } from \"../interfaces/IVoteEscrow.sol\";\n\n/// @title Vesting\n/// @dev Used to vest underlying ERC20 for various addresses\n/// @author HorizonDAO (Yuri Fernandes)\ncontract Vesting is Ownable {\n    using SafeERC20 for IERC20;\n    using Counters for Counters.Counter;\n\n    /// @dev Multiplier used during division operations to decrease rounding errors\n    uint256 public constant BASE_MULTIPLIER = 1e18;\n\n    /// @dev Minimum vesting period\n    uint256 public constant MIN_VESTING_PERIOD = 365 days; // 1 year\n\n    /// @dev Maximum vesting period\n    uint256 public constant MAX_VESTING_PERIOD = 4 * 365 days; // 4 years\n\n    /// @dev Minimum lock period after claiming vested tokens (if lockVested is false, locking is not required)\n    uint256 public constant LOCK_VESTED_MIN_PERIOD = 365 days; // 1 year\n\n    /// @dev Maximum lock period after claiming vested tokens\n    uint256 public constant LOCK_VESTED_MAX_PERIOD = 4 * 365 days; // 4 years\n\n    /// @dev Position structure containing required data:\n    ///     - beneficiary: Who'll have control over vested tokens\n    ///     - amount: Amount of tokens to be vested in the position\n    ///     - amountPaid: Amount of vested tokens claimed\n    ///     - vestingStart: When tokens start to vest\n    ///     - vestingEnd: When tokens vest completely\n    ///     - lockVested: Whether to enforce token locking after vested\n    struct Position {\n        address beneficiary;\n        uint256 amount;\n        uint256 amountPaid;\n        uint256 vestingStart;\n        uint256 vestingEnd;\n        bool lockVested;\n    }\n\n    /// @dev Underlying vested token address\n    address public immutable underlying;\n\n    /// @dev VoteEscrow address, where tokens will be locked\n    address public voteEscrow;\n\n    /// @dev Amount of tokens been vested\n    uint256 public totalVesting;\n\n    /// @dev ID of the next vested position ID\n    Counters.Counter private _currentPositionId;\n\n    /// @dev Array containing all vesting positions\n    Position[] public positions;\n\n    /// @dev mapping (user => vestingPostions)\n    /// @dev Contains the user vesting positions' indexes\n    mapping(address => uint256[]) public userPositionIndexes;\n\n    /// @dev Emitted when a new Vote Escrow contract is set\n    event VoteEscrowSet(address indexed _admin, address _voteEscrow);\n\n    /// @dev Emitted when a new vested position is created\n    event PositionCreated(\n        address indexed _admin,\n        address indexed _beneficiary,\n        uint256 indexed _positionId,\n        uint256 _amount,\n        uint256 _vestingStart,\n        uint256 _vestingEnd,\n        bool _lockVested\n    );\n\n    /// @dev Emitted when an amount of vested tokens is claimed\n    event AmountClaimed(address indexed _by, address indexed _recipient, uint256 _amount, uint256 _voteLockPeriod);\n\n    /// @dev Initialize Vesting contract\n    /// @param _underlying Address of the underlying vesting asset\n    constructor(address _underlying) {\n        require(\n            IERC165(_underlying).supportsInterface(type(IERC20).interfaceId),\n            \"Underlying should be IERC20 compatible\"\n        );\n        underlying = _underlying;\n    }\n\n    /// @notice Size of the positions array (how many vested positions exist)\n    function vestedPositions() external view returns (uint256) {\n        return _currentPositionId.current();\n    }\n\n    /// @notice Amount of underlying tokens Vesting contract owns\n    function totalSupply() public view returns (uint256) {\n        return IERC20(underlying).balanceOf(address(this));\n    }\n\n    /// @notice Amount of tokens available to be vested\n    function usableSupply() public view returns (uint256) {\n        return totalSupply() - totalVesting;\n    }\n\n    /// @notice Amount of vested tokens for a specific position\n    /// @param _positionId ID of the position\n    /// @return Claimable amount\n    function amountDue(uint256 _positionId) public view returns (uint256) {\n        Position memory userPosition = positions[_positionId];\n        return _amountDue(userPosition);\n    }\n\n    /// @notice Total amount of vested underlying for an user\n    /// @param _account User address\n    /// @return Total vested amount\n    function userTotalAmountDue(address _account) external view returns (uint256) {\n        uint256[] memory userPositionIndexes_ = userPositionIndexes[_account];\n        uint256 totalAmountDue;\n        for (uint256 i = 0; i < userPositionIndexes_.length; i++) {\n            totalAmountDue += _amountDue(positions[userPositionIndexes_[i]]);\n        }\n        return totalAmountDue;\n    }\n\n    /// @notice Returns the position indexes for a given user (comma-separated)\n    /// @param _account User address\n    /// @return Comma-separated user positions' indexes\n    function getUserPositionIndexes(address _account) external view returns (string memory) {\n        uint256[] memory userPositionIndexes_ = userPositionIndexes[_account];\n        bytes memory positionIndexes = \"\";\n        for (uint256 i = 0; i < userPositionIndexes_.length; i++) {\n            positionIndexes = abi.encodePacked(positionIndexes);\n            if (i != userPositionIndexes_.length) positionIndexes = abi.encodePacked(positionIndexes, \", \");\n        }\n        return string(positionIndexes);\n    }\n\n    /// @dev Set a vote escrow contract\n    /// @param _voteEscrow Address of the vote escrow contract\n    function setVoteEscrow(address _voteEscrow) external onlyOwner {\n        voteEscrow = _voteEscrow;\n        emit VoteEscrowSet(_msgSender(), _voteEscrow);\n    }\n\n    /// @dev Create a new vesting position\n    /// @param _beneficiary The address of the vesting position owner\n    /// @param _amount Amount of underlying to be vested\n    /// @param _cliffPeriod Period of time that tokens won't vest\n    /// @param _vestingDuration Amount of time tokens will vest\n    /// @param _lockVested Whether vested underlying locking will be enforced\n    function createPosition(\n        address _beneficiary,\n        uint256 _amount,\n        uint256 _cliffPeriod,\n        uint256 _vestingDuration,\n        bool _lockVested\n    ) external onlyOwner {\n        require(_beneficiary != address(0), \"Invalid beneficiary\");\n        require(\n            _vestingDuration >= MIN_VESTING_PERIOD && _vestingDuration <= MAX_VESTING_PERIOD,\n            \"Invalid vesting duration\"\n        );\n        require(usableSupply() >= _amount, \"Insufficient underlying\");\n        uint256 vestingStart = block.timestamp + _cliffPeriod;\n        uint256 vestingEnd = vestingStart + _vestingDuration;\n        positions.push(\n            Position({\n                beneficiary: _beneficiary,\n                amount: _amount,\n                amountPaid: 0,\n                vestingStart: vestingStart,\n                vestingEnd: vestingEnd,\n                lockVested: _lockVested\n            })\n        );\n        uint256 currentPositionId = _currentPositionId.current();\n        userPositionIndexes[_beneficiary].push(currentPositionId);\n        _currentPositionId.increment();\n        totalVesting += _amount;\n\n        emit PositionCreated(\n            _msgSender(),\n            _beneficiary,\n            currentPositionId,\n            _amount,\n            vestingStart,\n            vestingEnd,\n            _lockVested\n        );\n    }\n\n    /// @notice Claim vested underlying\n    /// @param _positionId ID of the position to claim vested tokens\n    /// @param _recipient Recipient of the vested tokens\n    /// @param _lockVestedPeriod Amount of time to lock vested tokens (mandatory if lockVested is true)\n    function claim(\n        uint256 _positionId,\n        address _recipient,\n        uint256 _lockVestedPeriod\n    ) external {\n        Position memory userPosition = positions[_positionId];\n        require(userPosition.beneficiary == _msgSender(), \"Invalid position\");\n        require(userPosition.vestingStart >= block.timestamp, \"Vesting hasn't started\");\n        require(_recipient != address(0), \"Invalid recipient\");\n        uint256 amountDue_ = _amountDue(userPosition);\n        if (amountDue_ == 0) return;\n        if (userPosition.lockVested || _lockVestedPeriod > 0) {\n            require(voteEscrow != address(0), \"No vote escrow\");\n            require(\n                _lockVestedPeriod >= MIN_VESTING_PERIOD && _lockVestedPeriod <= MAX_VESTING_PERIOD,\n                \"Invalid lock time\"\n            );\n            IERC20(underlying).safeApprove(voteEscrow, amountDue_);\n            IVoteEscrow(voteEscrow).lock(amountDue_, _lockVestedPeriod);\n        } else {\n            IERC20(underlying).safeTransfer(_recipient, amountDue_);\n        }\n        positions[_positionId].amountPaid += amountDue_;\n        totalVesting -= amountDue_;\n\n        emit AmountClaimed(_msgSender(), _recipient, amountDue_, _lockVestedPeriod);\n    }\n\n    /// @dev Calculates the amount of vested tokens due for a given position\n    /// @param _position Position instance\n    /// @return claimable amount\n    function _amountDue(Position memory _position) internal view returns (uint256) {\n        return\n            ((((\n                block.timestamp < _position.vestingEnd ? block.timestamp : _position.vestingEnd - _position.vestingStart\n            ) * _position.amount) * BASE_MULTIPLIER) / (_position.vestingEnd - _position.vestingStart)) /\n            BASE_MULTIPLIER -\n            _position.amountPaid;\n    }\n}\n"
    },
    "contracts/interfaces/IVoteEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface IVoteEscrow {\n    function lock(uint256 _amount, uint256 _period) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/token/FractionalRealEstateERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport { ERC1155 } from \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\r\nimport { IERC1155MetadataURI } from \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\";\r\nimport { BitMaps } from \"@openzeppelin/contracts/utils/structs/BitMaps.sol\";\r\nimport { Counters } from \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport { Strings } from \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport { RoyalERC1155 } from \"./RoyalERC1155.sol\";\r\n\r\n/// @title Real Estate NFT\r\n/// @author Yuri Fernandes (HorizonDAO)\r\n/// @notice Used to Tokenize and Fractionate Real Estate\r\n/// @notice Users are required to renovate (check-in) after a certain amount of time\r\n///     or their assets can be liquidated (necessary since reNFT holders can claim deeds if a buyout occur)\r\n/// @notice Only a predefined minter can mint tokens and on a incremental order\r\ncontract RealEstateERC1155 is RoyalERC1155 {\r\n    using BitMaps for BitMaps.BitMap;\r\n    using Counters for Counters.Counter;\r\n    using Strings for uint256;\r\n    using Address for address;\r\n\r\n    /// @dev Address of the minter: Can execute mint function\r\n    address public minter;\r\n\r\n    /// @dev Address of the burner: Can execute burning functions\r\n    address public burner;\r\n\r\n    /// @dev Address responsible to move expired accounts tokens\r\n    address public liquidator;\r\n\r\n    /// @dev mapping (collectionId => collectionName)\r\n    mapping(uint256 => string) public collectionName;\r\n\r\n    /// @dev mapping (collectionId => collectionSymbol)\r\n    mapping(uint256 => string) public collectionSymbol;\r\n\r\n    /// @dev mapping (collectionId => renovationTime)\r\n    /// @dev When users renovate it's signature on reNFTs ownership\r\n    /// users' expiration time will be extended to current_time + collectionRenovationTime\r\n    mapping(uint256 => uint256) public collectionRenovationTime;\r\n\r\n    /// @dev mapping (tokenId => account => expiration time)\r\n    /// @dev Users' reNFTs can be put to auction after current_time >= accountExpirationTime,\r\n    /// in order to avoid it, users should renovate it's expiration time\r\n    mapping(uint256 => mapping(address => uint256)) public accountExpirationTime;\r\n\r\n    /// @dev mapping (tokenId => isInitialized)\r\n    /// @dev when a tokenId is initialized, it means it cannot change afterwards\r\n    BitMaps.BitMap private _metadataInitialized;\r\n\r\n    /// @dev mapping (contract => isPerpetual)\r\n    /// @dev Some addresses might need perpetual ownership in order\r\n    ///     to use reNFTs as collateral, among other additional utilities,\r\n    ///     to do so, they need to be safe of liquidation\r\n    mapping(address => bool) public isPerpetual;\r\n\r\n    /// @dev Current value shows the next available collection ID\r\n    Counters.Counter private _currentId;\r\n\r\n    /// @dev Emitted when the renovation time of an user is updated (by itself)\r\n    event RenovationTimeUpdated(uint256 indexed _id, address indexed _account, uint256 _updatedAt, uint256 _extendedTo);\r\n\r\n    /// @dev Emitted when a new reNFT collection metadata is configured\r\n    event SetCollectionMetadata(uint256 indexed _id, string _name, string _symbol, uint256 _renovationTime);\r\n\r\n    /// @dev Emitted when a new minter is set\r\n    event NewMinter(address indexed _minter);\r\n\r\n    /// @dev Emitted when a new burner is set\r\n    event NewBurner(address indexed _burner);\r\n\r\n    /// @dev Emitted when new reNFTs are minted\r\n    event RealEstateNFTMinted(uint256 indexed _id, address indexed _minter, address indexed _to, uint256 _amount);\r\n\r\n    /// @dev Emitted when togglePerpetual function is successfully called\r\n    event LogTogglePerpetual(address indexed _contractAddress, bool indexed _isPerpetual);\r\n\r\n    /// @dev Checks if msg.sender is the minter\r\n    modifier onlyMinter() {\r\n        require(_msgSender() == minter, \"!minter\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Initialize RealEstateNFT\r\n    /// @param _baseUri Base URI for the offchain NFT metadata\r\n    /// @param _admin Address with contract administration privileges\r\n    /// @param _owner EOA to be used as OpenSea collection admin\r\n    constructor(\r\n        string memory _baseUri,\r\n        address _admin,\r\n        address _owner\r\n    ) RoyalERC1155(_baseUri, _admin, _owner) {}\r\n\r\n    /// @notice Returns the name of the RealEstateERC1155 contract\r\n    function name() external pure returns (string memory) {\r\n        return \"Real Estate NFT\";\r\n    }\r\n\r\n    /// @notice Returns the symbol of the RealEstateERC1155 contract\r\n    function symbol() external pure returns (string memory) {\r\n        return \"reNFT\";\r\n    }\r\n\r\n    /// @notice Returns the URI for the given reNFT collection\r\n    /// @param _id Collection ID\r\n    /// @return Concatenated BaseUri and collectionId\r\n    function uri(uint256 _id) public view override returns (string memory) {\r\n        require(exists(_id), \"Non-existent collection id\");\r\n        return string(abi.encodePacked(super.uri(_id), Strings.toString(_id)));\r\n    }\r\n\r\n    /// @notice Whether an account has expired and are elligible for liquidation\r\n    /// @param _id Collection ID\r\n    /// @param _account Account address\r\n    function accountExpired(uint256 _id, address _account) public view returns (bool) {\r\n        return !isPerpetual[_account] && block.timestamp >= accountExpirationTime[_id][_account];\r\n    }\r\n\r\n    /// @notice Check if an liquidation can be performed\r\n    /// @param _id Collection ID\r\n    /// @param _account Account address\r\n    function isLiquidable(uint256 _id, address _account) public view returns (bool) {\r\n        return liquidator != address(0) && accountExpired(_id, _account);\r\n    }\r\n\r\n    /// @dev Set new minter role\r\n    /// @param _minter New minter address\r\n    function setMinter(address _minter) external onlyAdmin {\r\n        require(minter != _minter, \"Same minter\");\r\n        minter = _minter;\r\n        emit NewMinter(_minter);\r\n    }\r\n\r\n    /// @dev Set new burner role\r\n    /// @param _burner New burner address\r\n    function setBurner(address _burner) external onlyAdmin {\r\n        require(burner != _burner, \"Same burner\");\r\n        burner = _burner;\r\n        emit NewBurner(_burner);\r\n    }\r\n\r\n    /// @dev Set new liquidator role\r\n    /// @param _liquidator New liquidator address\r\n    function setLiquidator(address _liquidator) external onlyAdmin {\r\n        require(liquidator != _liquidator, \"Same liquidator\");\r\n        liquidator = _liquidator;\r\n    }\r\n\r\n    /// @dev Sets the metadata for a new reNFT collection\r\n    /// @dev Requires Minter role\r\n    /// @param _id Collection ID\r\n    /// @param _name New collection name\r\n    /// @param _symbol New collection symbol\r\n    /// @param _renovationTime The amount of time an user is required to check-in\r\n    function setCollectionMetadata(\r\n        uint256 _id,\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint256 _renovationTime\r\n    ) external onlyMinter {\r\n        require(_msgSender() == minter, \"!minter\");\r\n        require(!_metadataInitialized.get(_id), \"metadataInitialized\");\r\n\r\n        collectionName[_id] = _name;\r\n        collectionSymbol[_id] = _symbol;\r\n        collectionRenovationTime[_id] = _renovationTime;\r\n        _metadataInitialized.set(_id);\r\n        emit SetCollectionMetadata(_id, _name, _symbol, _renovationTime);\r\n    }\r\n\r\n    /// @dev Toggle renovation requirements for a contract\r\n    /// @param _contractAddress Address of the contract to toggle renovation\r\n    /// @param _isPerpetual Whether to disable or enable renovation\r\n    function togglePerpetual(address _contractAddress, bool _isPerpetual) external onlyAdmin {\r\n        require(_contractAddress.isContract(), \"Only contracts allowed to be perpetual\");\r\n        isPerpetual[_contractAddress] = _isPerpetual;\r\n        emit LogTogglePerpetual(_contractAddress, _isPerpetual);\r\n    }\r\n\r\n    /// @dev Mint new reNFT tokens\r\n    /// @dev Requires Minter role\r\n    /// @param _id Collection ID\r\n    /// @param _to Address to transfer minted tokens\r\n    /// @param _amount Amount to mint\r\n    function mint(\r\n        uint256 _id,\r\n        address _to,\r\n        uint256 _amount\r\n    ) external onlyMinter {\r\n        require(_metadataInitialized.get(_id), \"!metadataInitialized\");\r\n        if (totalSupply(_id) == 0) {\r\n            uint256 currentId_ = _currentId.current();\r\n            require(currentId_ == 0 || totalSupply(currentId_ - 1) > 0, \"IDs should be sequential\");\r\n            _currentId.increment();\r\n        }\r\n        _mint(_to, _id, _amount, bytes(\"\"));\r\n        uint256 updatedExpirationTime = block.timestamp + collectionRenovationTime[_id];\r\n        accountExpirationTime[_id][_to] = updatedExpirationTime;\r\n        emit RenovationTimeUpdated(_id, _to, block.timestamp, updatedExpirationTime);\r\n        emit RealEstateNFTMinted(_id, _msgSender(), _to, _amount);\r\n    }\r\n\r\n    /// @dev Allow the liquidator to take custody over expired accounts' tokens\r\n    /// @param _id Collection ID\r\n    /// @param _account Account address to liquidate tokens from\r\n    /// @param _data Additional data requirements in case liquidator is a contract\r\n    function takeCustody(\r\n        uint256 _id,\r\n        address _account,\r\n        bytes memory _data\r\n    ) external {\r\n        require(_msgSender() == liquidator && isLiquidable(_id, _account), \"Liquidation denied\");\r\n        _safeTransferFrom(_account, _msgSender(), _id, balanceOf(_msgSender(), _id), _data);\r\n    }\r\n\r\n    /// @notice Renovate expiration time (proving the account is active)\r\n    /// @param _id Collection ID\r\n    function renovateExpirationTime(uint256 _id) public {\r\n        require(balanceOf(_msgSender(), _id) > 0, \"No balance\");\r\n        uint256 updatedExpirationTime = block.timestamp + collectionRenovationTime[_id];\r\n        accountExpirationTime[_id][_msgSender()] = updatedExpirationTime;\r\n        emit RenovationTimeUpdated(_id, _msgSender(), block.timestamp, updatedExpirationTime);\r\n    }\r\n\r\n    /// @notice Renovate expiration time for all collections the user owns tokens\r\n    function renovateAll() external {\r\n        for (uint256 id = 0; id < _currentId.current(); id++) {\r\n            if (balanceOf(_msgSender(), id) > 0) renovateExpirationTime(id);\r\n        }\r\n    }\r\n\r\n    /// @dev Burns own tokens\r\n    /// @dev Requires Burner role\r\n    /// @param _id Collection ID\r\n    /// @param _amount Amount of tokens to burn\r\n    function burn(uint256 _id, uint256 _amount) external {\r\n        require(_msgSender() == burner, \"!burner\");\r\n        _burn(_msgSender(), _id, _amount);\r\n    }\r\n}\r\n"
    },
    "contracts/token/RoyalERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport { ERC1155 } from \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\r\nimport { SingleApprovableERC1155 } from \"./SingleApprovableERC1155.sol\";\r\nimport { IERC165 } from \"@openzeppelin/contracts/interfaces/IERC165.sol\";\r\nimport { IEIP2981 } from \"../interfaces/IEIP2981.sol\";\r\n\r\n/// @title Royal ERC1155\r\n/// @dev Supports EIP-2981 royalties on NFT secondary sales\r\n///      Supports OpenSea contract metadata royalties\r\n///      Introduces fake \"owner\" to support OpenSea collections\r\nabstract contract RoyalERC1155 is IEIP2981, SingleApprovableERC1155 {\r\n    /// @dev OpenSea expects NFTs to be \"Ownable\", that is having an \"owner\",\r\n    ///      we introduce a fake \"owner\" here with no authority\r\n    address public owner;\r\n\r\n    /// @dev Address of the admin: Can set a new admin among other privileged roles\r\n    address public admin;\r\n\r\n    /// @notice Address to receive EIP-2981 royalties from secondary sales\r\n    ///         see https://eips.ethereum.org/EIPS/eip-2981\r\n    address public royaltyReceiver;\r\n\r\n    /// @notice Percentage of token sale price to be used for EIP-2981 royalties from secondary sales\r\n    ///         see https://eips.ethereum.org/EIPS/eip-2981\r\n    /// @dev Has 2 decimal precision. E.g. a value of 500 would result in a 5% royalty fee\r\n    uint16 public royaltyPercentage; // default OpenSea value is 750\r\n\r\n    /// @notice Contract level metadata to define collection name, description, and royalty fees.\r\n    ///         see https://docs.opensea.io/docs/contract-level-metadata\r\n    /// @dev Should be overwritten by inheriting contracts. By default only includes royalty information\r\n    string public contractURI;\r\n\r\n    /// @dev Fired in setContractURI()\r\n    /// @param _by an address which executed update\r\n    /// @param _value new contractURI value\r\n    event ContractURIUpdated(address indexed _by, string _value);\r\n\r\n    /// @dev Fired in setRoyaltyInfo()\r\n    /// @param _by an address which executed update\r\n    /// @param _receiver new royaltyReceiver value\r\n    /// @param _percentage new royaltyPercentage value\r\n    event RoyaltyInfoUpdated(address indexed _by, address indexed _receiver, uint16 _percentage);\r\n\r\n    /// @dev Fired in setOwner()\r\n    /// @param _by an address which set the new \"owner\"\r\n    /// @param _oldVal previous \"owner\" address\r\n    /// @param _newVal new \"owner\" address\r\n    event OwnerUpdated(address indexed _by, address indexed _oldVal, address indexed _newVal);\r\n\r\n    /// @dev Emitted when a new admin is set\r\n    event NewAdmin(address indexed _admin);\r\n\r\n    /// @dev Checks if msg.sender is the admin\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"!admin\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        string memory uri_,\r\n        address _admin,\r\n        address _owner\r\n    ) ERC1155(uri_) {\r\n        // initialize owner as the \"_owner\", necessary for OpenSea\r\n        owner = _owner;\r\n\r\n        // set contract admin\r\n        admin = _admin;\r\n        emit NewAdmin(_admin);\r\n    }\r\n\r\n    /// @dev Set new admin role\r\n    /// @param _admin New admin address\r\n    function setAdmin(address _admin) external onlyAdmin {\r\n        require(admin != _admin, \"admin == _admin\");\r\n        admin = _admin;\r\n        emit NewAdmin(_admin);\r\n    }\r\n\r\n    /// @dev Restricted access function which updates the contract URI\r\n    /// @param _contractURI new contract URI to set\r\n    function setContractURI(string memory _contractURI) public virtual onlyAdmin {\r\n        // update the contract URI\r\n        contractURI = _contractURI;\r\n\r\n        // emit an event first\r\n        emit ContractURIUpdated(msg.sender, _contractURI);\r\n    }\r\n\r\n    /// @notice EIP-2981 function to calculate royalties for sales in secondary marketplaces.\r\n    ///         see https://eips.ethereum.org/EIPS/eip-2981\r\n    /// @param _salePrice the price (in any unit, .e.g wei, ERC20 token, et.c.) of the token to be sold\r\n    /// @return receiver the royalty receiver\r\n    /// @return royaltyAmount royalty amount in the same unit as _salePrice\r\n    function royaltyInfo(uint256, uint256 _salePrice)\r\n        external\r\n        view\r\n        virtual\r\n        override\r\n        returns (address receiver, uint256 royaltyAmount)\r\n    {\r\n        // simply calculate the values and return the result\r\n        return (royaltyReceiver, (_salePrice * royaltyPercentage) / 100_00);\r\n    }\r\n\r\n    /// @dev Restricted access function which updates the royalty info\r\n    /// @param _royaltyReceiver new royalty receiver to set\r\n    /// @param _royaltyPercentage new royalty percentage to set\r\n    function setRoyaltyInfo(address _royaltyReceiver, uint16 _royaltyPercentage) public virtual onlyAdmin {\r\n        // verify royalty percentage is zero if receiver is also zero\r\n        require(_royaltyReceiver != address(0) || _royaltyPercentage == 0, \"invalid receiver\");\r\n\r\n        // update the values\r\n        royaltyReceiver = _royaltyReceiver;\r\n        royaltyPercentage = _royaltyPercentage;\r\n\r\n        // emit an event first\r\n        emit RoyaltyInfoUpdated(msg.sender, _royaltyReceiver, _royaltyPercentage);\r\n    }\r\n\r\n    /// @notice Checks if the address supplied is an \"owner\" of the smart contract\r\n    ///      Note: an \"owner\" doesn't have any authority on the smart contract and is \"nominal\"\r\n    /// @return true if the caller is the current owner.\r\n    function isOwner(address _addr) public view virtual returns (bool) {\r\n        // just evaluate and return the result\r\n        return _addr == owner;\r\n    }\r\n\r\n    /// @dev Restricted access function to set smart contract \"owner\"\r\n    ///      Note: an \"owner\" set doesn't have any authority, and cannot even update \"owner\"\r\n    /// @param _owner new \"owner\" of the smart contract\r\n    function transferOwnership(address _owner) public virtual onlyAdmin {\r\n        // update \"owner\"\r\n        owner = _owner;\r\n\r\n        // emit an event first - to log both old and new values\r\n        emit OwnerUpdated(msg.sender, owner, _owner);\r\n    }\r\n\r\n    /// @inheritdoc IERC165\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155, IERC165) returns (bool) {\r\n        // construct the interface support from EIP-2981 and super interfaces\r\n        return interfaceId == type(IEIP2981).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/BitMaps.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/BitMaps.sol)\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\n * Largelly inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\n */\nlibrary BitMaps {\n    struct BitMap {\n        mapping(uint256 => uint256) _data;\n    }\n\n    /**\n     * @dev Returns whether the bit at `index` is set.\n     */\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        return bitmap._data[bucket] & mask != 0;\n    }\n\n    /**\n     * @dev Sets the bit at `index` to the boolean `value`.\n     */\n    function setTo(\n        BitMap storage bitmap,\n        uint256 index,\n        bool value\n    ) internal {\n        if (value) {\n            set(bitmap, index);\n        } else {\n            unset(bitmap, index);\n        }\n    }\n\n    /**\n     * @dev Sets the bit at `index`.\n     */\n    function set(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] |= mask;\n    }\n\n    /**\n     * @dev Unsets the bit at `index`.\n     */\n    function unset(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] &= ~mask;\n    }\n}\n"
    },
    "contracts/interfaces/IEIP2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n///\n/// @dev Interface for the NFT Royalty Standard\n///\ninterface IEIP2981 is IERC165 {\n    /// ERC165 bytes to add to interface array - set in parent contract\n    /// implementing this standard\n    ///\n    /// bytes4(keccak256(\"royaltyInfo(uint256,uint256)\")) == 0x2a55205a\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\n\n    /// @notice Called with the sale price to determine how much royalty\n    //          is owed and to whom.\n    /// @param _tokenId - the NFT asset queried for royalty information\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\n    /// @return receiver - address of who should be sent the royalty payment\n    /// @return royaltyAmount - the royalty payment amount for _salePrice\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "contracts/token/PioneerERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport { MerkleProof } from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport { Base64 } from \"@openzeppelin/contracts/utils/Base64.sol\";\nimport { Strings } from \"@openzeppelin/contracts/utils/Strings.sol\";\nimport { RoyalERC1155 } from \"./RoyalERC1155.sol\";\n\n/// @title HorizonDAO Pioneer NFT\n/// @author Yuri Fernandes (HorizonDAO)\n/// @notice NFTs owned by HorizonDAO pioneer members\n/// @notice Holding these NFTs will accrue into various rewards\n///     during HorizonDAO development, such as, for example Airdrops\ncontract PioneerERC1155 is RoyalERC1155 {\n    using Strings for uint256;\n\n    /// @dev Pioneer types\n    enum Pioneer {\n        BRONZE,\n        SILVER,\n        GOLD\n    }\n\n    /// @dev Total number of tokens that can be purchased\n    uint256 public constant PURCHASABLE_SUPPLY = 10446;\n\n    /// @dev How many tokens can be purchased during Whitelisted sale\n    uint256 public constant WHITELIST_MAX_PURCHASES = 1000;\n\n    /// @dev How many tokens whitelisted users can purchase\n    uint256 public constant WHITELIST_PURCHASE_PER_ADDRESS = 10;\n\n    /// @dev Maximum amount of tokens users can get from private claim\n    uint256 public constant PRIVATE_MAX_CLAIMS = 4;\n\n    /// @dev Total claimable amount of tokens through airdrops\n    uint256 public constant AIRDROP_MAX_CLAIMS = 100;\n\n    /// @dev How many Gold Pioneers a user can get from private claim\n    uint256 public constant PRIVATE_CLAIM_GOLD = 1;\n\n    /// @dev Represents 100% chance, there will be 3 Pioneer collection\n    ///     with decreasing chances to be minted during purchases\n    ///     the total chances should sum to MAX_CHANCE\n    uint256 public constant MAX_CHANCE = 1_000;\n\n    /// @dev Unit prie of tokens for Whitelisted sale\n    uint256 public immutable whitelistTokenUnitPrice;\n\n    /// @dev Unit price of tokens for Public sale\n    uint256 public immutable publicTokenUnitPrice;\n\n    /// @dev Amount of NFTs that have been purchased so far\n    uint256 public purchasedAmount;\n\n    /// @dev Calculated pseudo-random number should fall in range to acquire a certain Pioneer\n    mapping(Pioneer => uint256) public thresholds;\n\n    /// @dev Private Merkle Root (can be set once)\n    bytes32 public privateMerkleRoot;\n\n    /// @dev Whitelist Merkle Root (can be set once)\n    bytes32 public whitelistMerkleRoot;\n\n    /// @dev Airdrop Merkle Root (can be set multiple times)\n    bytes32 public airdropMerkleRoot;\n\n    /// @dev How many tokens users have claimed during private sale\n    mapping(address => bool) public userPrivateClaimed;\n\n    /// @dev How many tokens the whitelisted users have claimed\n    mapping(address => uint256) public userWhitelistPurchasedAmount;\n\n    /// @dev Which Airdrop an user has participated\n    mapping(address => uint256) public userAirdropNonce;\n\n    /// @dev Nonce of the current airdrop Merkle Tree\n    uint256 public airdropNonce;\n\n    /// @dev Amount of Airdrop tokens claimed\n    uint256 public airdropClaimed;\n\n    /// @dev When the Public sale will begin (if zero, means sale has not been initialized)\n    uint256 public publicSaleStartTime;\n\n    /// @dev Emitted when Private Merkle Root is set\n    event PrivateMerkleRootSet(address indexed _admin, bytes32 _root);\n\n    /// @dev Emitted when Sale is initialized\n    event SaleInitialized(address indexed _admin, bytes32 _whitelistMerkleRoot, uint256 _publicSaleStartTime);\n\n    /// @dev Emitted when the Airdrop Merkle Root is set\n    event AirdropMerkleRootSet(address indexed _admin, uint256 indexed _airdropNonce, bytes32 _root);\n\n    /// @dev Emitted when a new base image URI is set for the collections\n    event NewImageUri(address indexed _admin, string _uri);\n\n    /// @dev Emitted when ethers are withdrawn from the contract\n    event Withdrawal(address indexed _admin, address indexed _to, uint256 _amount);\n\n    /// @dev Emitted when a PioneerNFT is purchased\n    event PioneerClaim(address indexed _by, Pioneer indexed _Pioneer, uint256 _unitPrice, uint256 _amount);\n\n    /// @dev Emitted when an amount of Pioneer NFTs are claimed\n    event PrivateClaim(address indexed _by);\n\n    /// @dev Emitted when tokens are purchased via whitelistPurchase function\n    event WhitelistPurchase(address indexed _by, uint256 _amount);\n\n    /// @dev Emitted when tokens are purchased via publicPurchase function\n    event PublicPurchase(address indexed _by, uint256 _amount);\n\n    /// @dev Emitted when\n    event AirdropClaim(address indexed _by, uint256 _amount);\n\n    /// @dev constructor to initialize PioneerPromoERC1155 contract\n    /// @param _imageUri Base image URI\n    /// @param _admin Adminstrative address, can execute various configuration related functions\n    /// @param _owner Should be an EOA, will have rights over OpenSea collection configuration\n    /// @param _publicTokenUnitPrice Price per token for Public Sale\n    /// @param _whitelistTokenUnitPrice Price per token for Whitelisted Sale\n    /// @param _chances Array with the chances of getting a Pioneer for each collection\n    constructor(\n        string memory _imageUri,\n        address _admin,\n        address _owner,\n        uint256 _publicTokenUnitPrice,\n        uint256 _whitelistTokenUnitPrice,\n        uint256[3] memory _chances\n    ) RoyalERC1155(_imageUri, _admin, _owner) {\n        require(_admin != address(0), \"Admin should not be ZERO ADDRESS\");\n        require(_whitelistTokenUnitPrice < _publicTokenUnitPrice, \"No discount applied\");\n        for (uint8 i = 0; i < _chances.length; i++) {\n            if (i > 0) {\n                require(_chances[i - 1] >= _chances[i], \"Invalid _chance array\");\n                thresholds[Pioneer(i)] += thresholds[Pioneer(i - 1)];\n            }\n            thresholds[Pioneer(i)] += _chances[i];\n        }\n        require(thresholds[Pioneer.GOLD] == MAX_CHANCE, \"_chances sum should be MAX_CHANCE\");\n        publicTokenUnitPrice = _publicTokenUnitPrice;\n        whitelistTokenUnitPrice = _whitelistTokenUnitPrice;\n        emit NewImageUri(_msgSender(), _imageUri);\n    }\n\n    /// @notice Returns the Base64 encoded metadata for a given collection\n    /// @param _id Collection ID\n    /// @return Base64 encoded metadata\n    function uri(uint256 _id) public view override returns (string memory) {\n        require(_id <= uint256(Pioneer.GOLD), \"Invalid collection ID\");\n        return string(abi.encodePacked(\"data:application/json;base64,\", Base64.encode(bytes(collectionMetadata(_id)))));\n    }\n\n    /// @notice Returns the stringified metadata JSON for a given collection\n    /// @param _id Collection ID\n    /// @return Stringified metadata JSON\n    function collectionMetadata(uint256 _id) public view returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    '{\"name\":\"',\n                    collectionName(_id),\n                    '\",\"description\":\"',\n                    collectionDescription(_id),\n                    '\",\"image\":\"',\n                    imageURI(_id),\n                    '\"}'\n                )\n            );\n    }\n\n    /// @notice Get collection name\n    /// @param _id Collection ID\n    /// @return Collection name\n    function collectionName(uint256 _id) public pure returns (string memory) {\n        require(_id <= uint256(Pioneer.GOLD), \"Invalid token ID\");\n        if (_id == uint256(Pioneer.BRONZE)) return \"Bronze Horizon Pioneer Badge\";\n        if (_id == uint256(Pioneer.SILVER)) return \"Silver Horizon Pioneer Badge\";\n        return \"Gold Horizon Pioneer Badge\";\n    }\n\n    /// @notice Get collection description\n    /// @param _id Collection ID\n    /// @return Collection description\n    function collectionDescription(uint256 _id) public pure returns (string memory) {\n        require(_id <= uint256(Pioneer.GOLD), \"Invalid token ID\");\n        if (_id == uint256(Pioneer.BRONZE)) return \"\";\n        if (_id == uint256(Pioneer.SILVER)) return \"\";\n        return \"\";\n    }\n\n    /// @notice Get the image URI for a given collection\n    /// @param _id Collection ID\n    /// @return Image URI\n    function imageURI(uint256 _id) public view returns (string memory) {\n        string memory uri_ = super.uri(uint256(0));\n        require(keccak256(bytes(uri_)) != keccak256(\"\"), \"!baseURI\");\n        return string(abi.encodePacked(super.uri(uint256(0)), _id.toString()));\n    }\n\n    /// @notice Whether the sale has been initialized\n    function saleInitialized() public view returns (bool) {\n        return whitelistMerkleRoot != bytes32(0);\n    }\n\n    /// @notice Whether public sale started\n    function publicSaleStarted() public view returns (bool) {\n        return saleInitialized() && block.timestamp >= publicSaleStartTime;\n    }\n\n    /// @dev Initialize sale (first whitelisted address, then public sale begins)\n    /// @param _whitelistMerkleRoot Whitelist Merkle Root\n    /// @param _publicSaleOffset Amount of time that will take for the Public sale to begin\n    function initializeSale(bytes32 _whitelistMerkleRoot, uint256 _publicSaleOffset) external onlyAdmin {\n        require(!saleInitialized(), \"Merkle root already set\");\n        require(_whitelistMerkleRoot != bytes32(0), \"Invalid Merkle root\");\n        whitelistMerkleRoot = _whitelistMerkleRoot;\n        publicSaleStartTime = block.timestamp + _publicSaleOffset;\n        emit SaleInitialized(_msgSender(), _whitelistMerkleRoot, block.timestamp + _publicSaleOffset);\n    }\n\n    /// @dev Set Private claiming merkle root (only once)\n    /// @param _root Private Merkle Root\n    function setPrivateRoot(bytes32 _root) external onlyAdmin {\n        require(privateMerkleRoot == bytes32(0), \"Merkle root already set\");\n        privateMerkleRoot = _root;\n        emit PrivateMerkleRootSet(_msgSender(), _root);\n    }\n\n    /// @dev Set Airdrop merkle root (multiple times)\n    /// @param _root Airdrop Merkle Root\n    function setAirdropRoot(bytes32 _root) external onlyAdmin {\n        require(airdropClaimed < AIRDROP_MAX_CLAIMS, \"!airdrop\");\n        airdropMerkleRoot = _root;\n        emit AirdropMerkleRootSet(_msgSender(), ++airdropNonce, _root);\n    }\n\n    /// @dev Set new base image URI for collections\n    /// @param _uri Base image URI\n    function setImageBaseURI(string memory _uri) external onlyAdmin {\n        _setURI(_uri);\n        emit NewImageUri(_msgSender(), _uri);\n    }\n\n    /// @notice Claim private whitelisted tokens\n    /// @param _proof Private Merkle Proof\n    function privateClaim(bytes32[] memory _proof) external {\n        require(MerkleProof.verify(_proof, privateMerkleRoot, keccak256(abi.encodePacked(_msgSender()))), \"!root\");\n        require(!userPrivateClaimed[_msgSender()], \"claimed\");\n        _mint(_msgSender(), uint256(Pioneer.GOLD), PRIVATE_CLAIM_GOLD, bytes(\"\"));\n        userPrivateClaimed[_msgSender()] = true;\n        emit PrivateClaim(_msgSender());\n    }\n\n    /// @notice Purchase whilelisted tokens (maximum amount: WHITELIST_PURCHASE_PER_ADDRESS)\n    /// @param _amount Amount to purchase\n    /// @param _proof Whitelist Merkle Proof\n    function whitelistPurchase(uint256 _amount, bytes32[] memory _proof) external payable {\n        require(whitelistMerkleRoot != bytes32(0), \"!initialized\");\n        require(MerkleProof.verify(_proof, whitelistMerkleRoot, keccak256(abi.encodePacked(_msgSender()))), \"!root\");\n        require(purchasedAmount + _amount <= PURCHASABLE_SUPPLY, \"!purchase\");\n        require(\n            userWhitelistPurchasedAmount[_msgSender()] + _amount <= WHITELIST_PURCHASE_PER_ADDRESS,\n            \"Maximum amount purchased\"\n        );\n        _processPurchaseRequest(whitelistTokenUnitPrice, _amount);\n        userWhitelistPurchasedAmount[_msgSender()] += _amount;\n        purchasedAmount += _amount;\n        emit WhitelistPurchase(_msgSender(), _amount);\n    }\n\n    /// @notice Purchase Pioneer NFTs randomly from the 3 collections (Bronze, Silver and Gold)\n    /// @param _amount Amount to purchase\n    function publicPurchase(uint256 _amount) external payable {\n        require(publicSaleStarted(), \"!start\");\n        require(purchasedAmount + _amount <= PURCHASABLE_SUPPLY, \"!purchase\");\n        _processPurchaseRequest(publicTokenUnitPrice, _amount);\n        purchasedAmount += _amount;\n        emit PublicPurchase(_msgSender(), _amount);\n    }\n\n    /// @notice Claim airdrop\n    /// @param _amount Amount to claim\n    /// @param _proof Airdrop Merkle Proof\n    function claimAirdrop(uint256 _amount, bytes32[] memory _proof) external {\n        require(\n            MerkleProof.verify(_proof, airdropMerkleRoot, keccak256(abi.encodePacked(_msgSender(), _amount))),\n            \"!merkleRoot\"\n        );\n        require(airdropClaimed + _amount < AIRDROP_MAX_CLAIMS, \"!airdrop\");\n        uint256 airdropNonce_ = airdropNonce;\n        require(userAirdropNonce[_msgSender()] < airdropNonce_, \"!userNonce\");\n        _processPurchaseRequest(0, _amount);\n        airdropClaimed += _amount;\n        userAirdropNonce[_msgSender()] = airdropNonce_;\n        emit AirdropClaim(_msgSender(), _amount);\n    }\n\n    /// @dev Withdraw all ethers from contract\n    /// @param _to Address to send the funds\n    function withdraw(address _to) external onlyAdmin {\n        uint256 etherBalance = address(this).balance;\n        require(etherBalance > 0, \"No ethers to withdraw\");\n        _sendValue(_to, etherBalance);\n        emit Withdrawal(_msgSender(), _to, etherBalance);\n    }\n\n    /// @dev Utility function to send an amount of ethers to a given address\n    /// @param _to Address to send ethers\n    /// @param _amount Amount of ethers to send\n    function _sendValue(address _to, uint256 _amount) internal {\n        (bool success, ) = _to.call{ value: _amount }(\"\");\n        require(success, \"Failed sending ethers\");\n    }\n\n    /// @dev Process purchase payment and minting\n    /// @param _tokenUnitPrice Unit price of the token\n    /// @param _amount Amount of tokens to buy\n    function _processPurchaseRequest(uint256 _tokenUnitPrice, uint256 _amount) internal {\n        uint256 totalPrice = _amount * _tokenUnitPrice;\n        require(msg.value >= totalPrice, \"Not enough ethers\");\n        uint256 magicValue = uint256(\n            keccak256(abi.encodePacked(_msgSender(), block.timestamp, _amount, purchasedAmount))\n        );\n\n        uint256 chance;\n        uint256[3] memory amounts;\n        for (uint256 i = 0; i < _amount; i++) {\n            chance = magicValue % MAX_CHANCE;\n            if (chance < thresholds[Pioneer.BRONZE]) ++amounts[0];\n            else if (chance < thresholds[Pioneer.SILVER]) ++amounts[1];\n            else ++amounts[2];\n            magicValue = uint256(keccak256(abi.encodePacked(magicValue / MAX_CHANCE)));\n        }\n\n        for (uint8 i = 0; i < amounts.length; i++) {\n            if (amounts[i] == 0) continue;\n            _mint(_msgSender(), i, amounts[i], bytes(\"\"));\n            emit PioneerClaim(_msgSender(), Pioneer(i), _tokenUnitPrice, amounts[i]);\n        }\n        uint256 surplus = msg.value - totalPrice;\n        if (surplus > 0) _sendValue(_msgSender(), surplus);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides a set of functions to operate with Base64 strings.\n *\n * _Available since v4.5._\n */\nlibrary Base64 {\n    /**\n     * @dev Base64 Encoding/Decoding Table\n     */\n    string internal constant _TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /**\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\n     */\n    function encode(bytes memory data) internal pure returns (string memory) {\n        /**\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\n         */\n        if (data.length == 0) return \"\";\n\n        // Loads the table into memory\n        string memory table = _TABLE;\n\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\n        // and split into 4 numbers of 6 bits.\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\n        // - `data.length + 2`  -> Round up\n        // - `/ 3`              -> Number of 3-bytes chunks\n        // - `4 *`              -> 4 characters for each chunk\n        string memory result = new string(4 * ((data.length + 2) / 3));\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Prepare the lookup table (skip the first \"length\" byte)\n            let tablePtr := add(table, 1)\n\n            // Prepare result pointer, jump over length\n            let resultPtr := add(result, 32)\n\n            // Run over the input, 3 bytes at a time\n            for {\n                let dataPtr := data\n                let endPtr := add(data, mload(data))\n            } lt(dataPtr, endPtr) {\n\n            } {\n                // Advance 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // To write each character, shift the 3 bytes (18 bits) chunk\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\n                // and apply logical AND with 0x3F which is the number of\n                // the previous character in the ASCII table prior to the Base64 Table\n                // The result is then added to the table to get the character to write,\n                // and finally write it in the result pointer but with a left shift\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n            }\n\n            // When data `bytes` is not exactly 3 bytes long\n            // it is padded with `=` characters at the end\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n                mstore8(sub(resultPtr, 2), 0x3d)\n            }\n            case 2 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n            }\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\n     * consuming from one or the other at each step according to the instructions given by\n     * `proofFlags`.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IEIP2981Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\";\n\n///\n/// @dev Interface for the NFT Royalty Standard\n///\ninterface IEIP2981Upgradeable is IERC165Upgradeable {\n    /// ERC165 bytes to add to interface array - set in parent contract\n    /// implementing this standard\n    ///\n    /// bytes4(keccak256(\"royaltyInfo(uint256,uint256)\")) == 0x2a55205a\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\n\n    /// @notice Called with the sale price to determine how much royalty\n    //          is owed and to whom.\n    /// @param _tokenId - the NFT asset queried for royalty information\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\n    /// @return receiver - address of who should be sent the royalty payment\n    /// @return royaltyAmount - the royalty payment amount for _salePrice\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
