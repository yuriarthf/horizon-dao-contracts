{
  "address": "0xd5d12Af29B40a99977307D194FDa607E6331f5f9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseUri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_value",
          "type": "string"
        }
      ],
      "name": "ContractURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "_isPerpetual",
          "type": "bool"
        }
      ],
      "name": "LogTogglePerpetual",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "NewAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_burner",
          "type": "address"
        }
      ],
      "name": "NewBurner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "NewMinter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_oldVal",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newVal",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "RealEstateNFTMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_updatedAt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_extendedTo",
          "type": "uint256"
        }
      ],
      "name": "RenovationTimeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_percentage",
          "type": "uint16"
        }
      ],
      "name": "RoyaltyInfoUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_renovationTime",
          "type": "uint256"
        }
      ],
      "name": "SetCollectionMetadata",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountExpirationTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "accountExpired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "collectionName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "collectionRenovationTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "collectionSymbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isLiquidable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isPerpetual",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renovateAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "renovateExpirationTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyPercentage",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_burner",
          "type": "address"
        }
      ],
      "name": "setBurner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_renovationTime",
          "type": "uint256"
        }
      ],
      "name": "setCollectionMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_contractURI",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidator",
          "type": "address"
        }
      ],
      "name": "setLiquidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_royaltyReceiver",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_royaltyPercentage",
          "type": "uint16"
        }
      ],
      "name": "setRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "takeCustody",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contractAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isPerpetual",
          "type": "bool"
        }
      ],
      "name": "togglePerpetual",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x79b97cc3b169f8add1c4bb61f134ecf0a8b9ad6669f6c94264d87eebd691fcc8",
  "receipt": {
    "to": null,
    "from": "0x39a242169BA3B28623E6d235A4Bdd46287d4bae3",
    "contractAddress": "0xd5d12Af29B40a99977307D194FDa607E6331f5f9",
    "transactionIndex": 162,
    "gasUsed": "2885285",
    "logsBloom": "0x
    "blockHash": "0x58257877dabc0ec747878f04fbd3ef074f6c14e1e986035630713e6bbad936c5",
    "transactionHash": "0x79b97cc3b169f8add1c4bb61f134ecf0a8b9ad6669f6c94264d87eebd691fcc8",
    "logs": [
      {
        "transactionIndex": 162,
        "blockNumber": 7884851,
        "transactionHash": "0x79b97cc3b169f8add1c4bb61f134ecf0a8b9ad6669f6c94264d87eebd691fcc8",
        "address": "0xd5d12Af29B40a99977307D194FDa607E6331f5f9",
        "topics": [
          "0x71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c",
          "0x00000000000000000000000063926e60619172fe58870bceb057b3b437fa62fc"
        ],
        "data": "0x",
        "logIndex": 224,
        "blockHash": "0x58257877dabc0ec747878f04fbd3ef074f6c14e1e986035630713e6bbad936c5"
      }
    ],
    "blockNumber": 7884851,
    "cumulativeGasUsed": "23878013",
    "status": 1,
    "byzantium": true
  },
  "args": ["", "0x63926E60619172FE58870BCeb057b3B437Fa62FC", "0x39a242169BA3B28623E6d235A4Bdd46287d4bae3"],
  "numDeployments": 1,
  "solcInputHash": "d3fa7695448e8ce26fe5b1f05765ed23",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseUri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_isPerpetual\",\"type\":\"bool\"}],\"name\":\"LogTogglePerpetual\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_burner\",\"type\":\"address\"}],\"name\":\"NewBurner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"NewMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldVal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newVal\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RealEstateNFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_updatedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_extendedTo\",\"type\":\"uint256\"}],\"name\":\"RenovationTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_percentage\",\"type\":\"uint16\"}],\"name\":\"RoyaltyInfoUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_renovationTime\",\"type\":\"uint256\"}],\"name\":\"SetCollectionMetadata\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountExpirationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"accountExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collectionName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collectionRenovationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collectionSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isLiquidable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPerpetual\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renovateAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"renovateExpirationTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyPercentage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_burner\",\"type\":\"address\"}],\"name\":\"setBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_renovationTime\",\"type\":\"uint256\"}],\"name\":\"setCollectionMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"}],\"name\":\"setLiquidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_royaltyPercentage\",\"type\":\"uint16\"}],\"name\":\"setRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"takeCustody\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isPerpetual\",\"type\":\"bool\"}],\"name\":\"togglePerpetual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Yuri Fernandes (HorizonDAO)\",\"events\":{\"LogTogglePerpetual(address,bool)\":{\"details\":\"Emitted when togglePerpetual function is successfully called\"},\"NewBurner(address)\":{\"details\":\"Emitted when a new burner is set\"},\"NewMinter(address)\":{\"details\":\"Emitted when a new minter is set\"},\"RealEstateNFTMinted(uint256,address,address,uint256)\":{\"details\":\"Emitted when new reNFTs are minted\"},\"RenovationTimeUpdated(uint256,address,uint256,uint256)\":{\"details\":\"Emitted when the renovation time of an user is updated (by itself)\"},\"SetCollectionMetadata(uint256,string,string,uint256)\":{\"details\":\"Emitted when a new reNFT collection metadata is configured\"}},\"kind\":\"dev\",\"methods\":{\"accountExpired(uint256,address)\":{\"params\":{\"_account\":\"Account address\",\"_id\":\"Collection ID\"}},\"approve(uint256,address,uint256)\":{\"params\":{\"_amount\":\"Amount allowed\",\"_id\":\"Collection ID\",\"_spender\":\"Spender address\"}},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"burn(uint256,uint256)\":{\"details\":\"Burns own tokensRequires Burner role\",\"params\":{\"_amount\":\"Amount of tokens to burn\",\"_id\":\"Collection ID\"}},\"constructor\":{\"details\":\"Initialize RealEstateNFT\",\"params\":{\"_admin\":\"Address with contract administration privileges\",\"_baseUri\":\"Base URI for the offchain NFT metadata\",\"_owner\":\"EOA to be used as OpenSea collection admin\"}},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"isLiquidable(uint256,address)\":{\"params\":{\"_account\":\"Account address\",\"_id\":\"Collection ID\"}},\"isOwner(address)\":{\"returns\":{\"_0\":\"true if the caller is the current owner.\"}},\"mint(uint256,address,uint256)\":{\"details\":\"Mint new reNFT tokensRequires Minter role\",\"params\":{\"_amount\":\"Amount to mint\",\"_id\":\"Collection ID\",\"_to\":\"Address to transfer minted tokens\"}},\"renovateExpirationTime(uint256)\":{\"params\":{\"_id\":\"Collection ID\"}},\"royaltyInfo(uint256,uint256)\":{\"params\":{\"_salePrice\":\"the price (in any unit, .e.g wei, ERC20 token, et.c.) of the token to be sold\"},\"returns\":{\"receiver\":\"the royalty receiver\",\"royaltyAmount\":\"royalty amount in the same unit as _salePrice\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value.\"},\"setAdmin(address)\":{\"details\":\"Set new admin role\",\"params\":{\"_admin\":\"New admin address\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setBurner(address)\":{\"details\":\"Set new burner role\",\"params\":{\"_burner\":\"New burner address\"}},\"setCollectionMetadata(uint256,string,string,uint256)\":{\"details\":\"Sets the metadata for a new reNFT collectionRequires Minter role\",\"params\":{\"_id\":\"Collection ID\",\"_name\":\"New collection name\",\"_renovationTime\":\"The amount of time an user is required to check-in\",\"_symbol\":\"New collection symbol\"}},\"setContractURI(string)\":{\"details\":\"Restricted access function which updates the contract URI\",\"params\":{\"_contractURI\":\"new contract URI to set\"}},\"setLiquidator(address)\":{\"details\":\"Set new liquidator role\",\"params\":{\"_liquidator\":\"New liquidator address\"}},\"setMinter(address)\":{\"details\":\"Set new minter role\",\"params\":{\"_minter\":\"New minter address\"}},\"setRoyaltyInfo(address,uint16)\":{\"details\":\"Restricted access function which updates the royalty info\",\"params\":{\"_royaltyPercentage\":\"new royalty percentage to set\",\"_royaltyReceiver\":\"new royalty receiver to set\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"takeCustody(uint256,address,bytes)\":{\"details\":\"Allow the liquidator to take custody over expired accounts' tokens\",\"params\":{\"_account\":\"Account address to liquidate tokens from\",\"_data\":\"Additional data requirements in case liquidator is a contract\",\"_id\":\"Collection ID\"}},\"togglePerpetual(address,bool)\":{\"details\":\"Toggle renovation requirements for a contract\",\"params\":{\"_contractAddress\":\"Address of the contract to toggle renovation\",\"_isPerpetual\":\"Whether to disable or enable renovation\"}},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"transferOwnership(address)\":{\"details\":\"Restricted access function to set smart contract \\\"owner\\\"      Note: an \\\"owner\\\" set doesn't have any authority, and cannot even update \\\"owner\\\"\",\"params\":{\"_owner\":\"new \\\"owner\\\" of the smart contract\"}},\"uri(uint256)\":{\"params\":{\"_id\":\"Collection ID\"},\"returns\":{\"_0\":\"Concatenated BaseUri and collectionId\"}}},\"stateVariables\":{\"_currentId\":{\"details\":\"Current value shows the next available collection ID\"},\"_metadataInitialized\":{\"details\":\"mapping (tokenId => isInitialized)when a tokenId is initialized, it means it cannot change afterwards\"},\"accountExpirationTime\":{\"details\":\"mapping (tokenId => account => expiration time)Users' reNFTs can be put to auction after current_time >= accountExpirationTime, in order to avoid it, users should renovate it's expiration time\"},\"burner\":{\"details\":\"Address of the burner: Can execute burning functions\"},\"collectionName\":{\"details\":\"mapping (collectionId => collectionName)\"},\"collectionRenovationTime\":{\"details\":\"mapping (collectionId => renovationTime)When users renovate it's signature on reNFTs ownership users' expiration time will be extended to current_time + collectionRenovationTime\"},\"collectionSymbol\":{\"details\":\"mapping (collectionId => collectionSymbol)\"},\"isPerpetual\":{\"details\":\"mapping (contract => isPerpetual)Some addresses might need perpetual ownership in order     to use reNFTs as collateral, among other additional utilities,     to do so, they need to be safe of liquidation\"},\"liquidator\":{\"details\":\"Address responsible to move expired accounts tokens\"},\"minter\":{\"details\":\"Address of the minter: Can execute mint function\"}},\"title\":\"Fractional Real Estate NFT\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accountExpired(uint256,address)\":{\"notice\":\"Whether an account has expired and are elligible for liquidation\"},\"approve(uint256,address,uint256)\":{\"notice\":\"Approve a spender to transfer tokens\"},\"contractURI()\":{\"notice\":\"Contract level metadata to define collection name, description, and royalty fees.         see https://docs.opensea.io/docs/contract-level-metadata\"},\"isLiquidable(uint256,address)\":{\"notice\":\"Check if an liquidation can be performed\"},\"isOwner(address)\":{\"notice\":\"Checks if the address supplied is an \\\"owner\\\" of the smart contract      Note: an \\\"owner\\\" doesn't have any authority on the smart contract and is \\\"nominal\\\"\"},\"name()\":{\"notice\":\"Returns the name of the RealEstateERC1155 contract\"},\"renovateAll()\":{\"notice\":\"Renovate expiration time for all collections the user owns tokens\"},\"renovateExpirationTime(uint256)\":{\"notice\":\"Renovate expiration time (proving the account is active)\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"EIP-2981 function to calculate royalties for sales in secondary marketplaces.         see https://eips.ethereum.org/EIPS/eip-2981\"},\"royaltyPercentage()\":{\"notice\":\"Percentage of token sale price to be used for EIP-2981 royalties from secondary sales         see https://eips.ethereum.org/EIPS/eip-2981\"},\"royaltyReceiver()\":{\"notice\":\"Address to receive EIP-2981 royalties from secondary sales         see https://eips.ethereum.org/EIPS/eip-2981\"},\"symbol()\":{\"notice\":\"Returns the symbol of the RealEstateERC1155 contract\"},\"uri(uint256)\":{\"notice\":\"Returns the URI for the given reNFT collection\"}},\"notice\":\"Used to Tokenize and Fractionate Real EstateUsers are required to renovate (check-in) after a certain amount of time     or their assets can be liquidated (necessary since reNFT holders can claim deeds if a buyout occur)Only a predefined minter can mint tokens and on a incremental order\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/FractionalRealEstateERC1155.sol\":\"FractionalRealEstateERC1155\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/IERC1155.sol\\\";\\n\",\"keccak256\":\"0x10a6688bc4154b1b76268dbaf497bd8b24f77525ecb9cf829bd3cccec98eefc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x447a21c87433c0f11252912313a96f3454629ef88cca7a4eefbb283b3ec409f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe3deb5f3b0c9d12944f62ab680f041bbf1910d9d3ac6b545b4b8e399643c538d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largelly inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(\\n        BitMap storage bitmap,\\n        uint256 index,\\n        bool value\\n    ) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0xc5d14e1780f0ea212b19c07b83c8e51b9dc6903017df71e6de1fae364d724e0d\",\"license\":\"MIT\"},\"contracts/interfaces/IEIP2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n///\\n/// @dev Interface for the NFT Royalty Standard\\n///\\ninterface IEIP2981 is IERC165 {\\n    /// ERC165 bytes to add to interface array - set in parent contract\\n    /// implementing this standard\\n    ///\\n    /// bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\\n\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n    /// @return receiver - address of who should be sent the royalty payment\\n    /// @return royaltyAmount - the royalty payment amount for _salePrice\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x423e360cb352267aa1cca4726bae527f0db6b3f2e57ddc780e2006ad4bba5ab6\",\"license\":\"MIT\"},\"contracts/token/FractionalRealEstateERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport { ERC1155 } from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport { IERC1155MetadataURI } from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\r\\nimport { BitMaps } from \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\r\\nimport { Counters } from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport { RoyalERC1155 } from \\\"./RoyalERC1155.sol\\\";\\r\\n\\r\\n/// @title Fractional Real Estate NFT\\r\\n/// @author Yuri Fernandes (HorizonDAO)\\r\\n/// @notice Used to Tokenize and Fractionate Real Estate\\r\\n/// @notice Users are required to renovate (check-in) after a certain amount of time\\r\\n///     or their assets can be liquidated (necessary since reNFT holders can claim deeds if a buyout occur)\\r\\n/// @notice Only a predefined minter can mint tokens and on a incremental order\\r\\ncontract FractionalRealEstateERC1155 is RoyalERC1155 {\\r\\n    using BitMaps for BitMaps.BitMap;\\r\\n    using Counters for Counters.Counter;\\r\\n    using Strings for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    /// @dev Address of the minter: Can execute mint function\\r\\n    address public minter;\\r\\n\\r\\n    /// @dev Address of the burner: Can execute burning functions\\r\\n    address public burner;\\r\\n\\r\\n    /// @dev Address responsible to move expired accounts tokens\\r\\n    address public liquidator;\\r\\n\\r\\n    /// @dev mapping (collectionId => collectionName)\\r\\n    mapping(uint256 => string) public collectionName;\\r\\n\\r\\n    /// @dev mapping (collectionId => collectionSymbol)\\r\\n    mapping(uint256 => string) public collectionSymbol;\\r\\n\\r\\n    /// @dev mapping (collectionId => renovationTime)\\r\\n    /// @dev When users renovate it's signature on reNFTs ownership\\r\\n    /// users' expiration time will be extended to current_time + collectionRenovationTime\\r\\n    mapping(uint256 => uint256) public collectionRenovationTime;\\r\\n\\r\\n    /// @dev mapping (tokenId => account => expiration time)\\r\\n    /// @dev Users' reNFTs can be put to auction after current_time >= accountExpirationTime,\\r\\n    /// in order to avoid it, users should renovate it's expiration time\\r\\n    mapping(uint256 => mapping(address => uint256)) public accountExpirationTime;\\r\\n\\r\\n    /// @dev mapping (tokenId => isInitialized)\\r\\n    /// @dev when a tokenId is initialized, it means it cannot change afterwards\\r\\n    BitMaps.BitMap private _metadataInitialized;\\r\\n\\r\\n    /// @dev mapping (contract => isPerpetual)\\r\\n    /// @dev Some addresses might need perpetual ownership in order\\r\\n    ///     to use reNFTs as collateral, among other additional utilities,\\r\\n    ///     to do so, they need to be safe of liquidation\\r\\n    mapping(address => bool) public isPerpetual;\\r\\n\\r\\n    /// @dev Current value shows the next available collection ID\\r\\n    Counters.Counter private _currentId;\\r\\n\\r\\n    /// @dev Emitted when the renovation time of an user is updated (by itself)\\r\\n    event RenovationTimeUpdated(uint256 indexed _id, address indexed _account, uint256 _updatedAt, uint256 _extendedTo);\\r\\n\\r\\n    /// @dev Emitted when a new reNFT collection metadata is configured\\r\\n    event SetCollectionMetadata(uint256 indexed _id, string _name, string _symbol, uint256 _renovationTime);\\r\\n\\r\\n    /// @dev Emitted when a new minter is set\\r\\n    event NewMinter(address indexed _minter);\\r\\n\\r\\n    /// @dev Emitted when a new burner is set\\r\\n    event NewBurner(address indexed _burner);\\r\\n\\r\\n    /// @dev Emitted when new reNFTs are minted\\r\\n    event RealEstateNFTMinted(uint256 indexed _id, address indexed _minter, address indexed _to, uint256 _amount);\\r\\n\\r\\n    /// @dev Emitted when togglePerpetual function is successfully called\\r\\n    event LogTogglePerpetual(address indexed _contractAddress, bool indexed _isPerpetual);\\r\\n\\r\\n    /// @dev Checks if msg.sender is the minter\\r\\n    modifier onlyMinter() {\\r\\n        require(_msgSender() == minter, \\\"!minter\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @dev Initialize RealEstateNFT\\r\\n    /// @param _baseUri Base URI for the offchain NFT metadata\\r\\n    /// @param _admin Address with contract administration privileges\\r\\n    /// @param _owner EOA to be used as OpenSea collection admin\\r\\n    constructor(\\r\\n        string memory _baseUri,\\r\\n        address _admin,\\r\\n        address _owner\\r\\n    ) RoyalERC1155(_baseUri, _admin, _owner) {}\\r\\n\\r\\n    /// @notice Returns the name of the RealEstateERC1155 contract\\r\\n    function name() external pure returns (string memory) {\\r\\n        return \\\"Fractional Real Estate NFT\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the symbol of the RealEstateERC1155 contract\\r\\n    function symbol() external pure returns (string memory) {\\r\\n        return \\\"reNFT\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the URI for the given reNFT collection\\r\\n    /// @param _id Collection ID\\r\\n    /// @return Concatenated BaseUri and collectionId\\r\\n    function uri(uint256 _id) public view override returns (string memory) {\\r\\n        require(exists(_id), \\\"Non-existent collection id\\\");\\r\\n        return string(abi.encodePacked(super.uri(_id), Strings.toString(_id)));\\r\\n    }\\r\\n\\r\\n    /// @notice Whether an account has expired and are elligible for liquidation\\r\\n    /// @param _id Collection ID\\r\\n    /// @param _account Account address\\r\\n    function accountExpired(uint256 _id, address _account) public view returns (bool) {\\r\\n        return !isPerpetual[_account] && block.timestamp >= accountExpirationTime[_id][_account];\\r\\n    }\\r\\n\\r\\n    /// @notice Check if an liquidation can be performed\\r\\n    /// @param _id Collection ID\\r\\n    /// @param _account Account address\\r\\n    function isLiquidable(uint256 _id, address _account) public view returns (bool) {\\r\\n        return liquidator != address(0) && accountExpired(_id, _account);\\r\\n    }\\r\\n\\r\\n    /// @dev Set new minter role\\r\\n    /// @param _minter New minter address\\r\\n    function setMinter(address _minter) external onlyAdmin {\\r\\n        require(minter != _minter, \\\"Same minter\\\");\\r\\n        minter = _minter;\\r\\n        emit NewMinter(_minter);\\r\\n    }\\r\\n\\r\\n    /// @dev Set new burner role\\r\\n    /// @param _burner New burner address\\r\\n    function setBurner(address _burner) external onlyAdmin {\\r\\n        require(burner != _burner, \\\"Same burner\\\");\\r\\n        burner = _burner;\\r\\n        emit NewBurner(_burner);\\r\\n    }\\r\\n\\r\\n    /// @dev Set new liquidator role\\r\\n    /// @param _liquidator New liquidator address\\r\\n    function setLiquidator(address _liquidator) external onlyAdmin {\\r\\n        require(liquidator != _liquidator, \\\"Same liquidator\\\");\\r\\n        liquidator = _liquidator;\\r\\n    }\\r\\n\\r\\n    /// @dev Sets the metadata for a new reNFT collection\\r\\n    /// @dev Requires Minter role\\r\\n    /// @param _id Collection ID\\r\\n    /// @param _name New collection name\\r\\n    /// @param _symbol New collection symbol\\r\\n    /// @param _renovationTime The amount of time an user is required to check-in\\r\\n    function setCollectionMetadata(\\r\\n        uint256 _id,\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        uint256 _renovationTime\\r\\n    ) external onlyMinter {\\r\\n        require(_msgSender() == minter, \\\"!minter\\\");\\r\\n        require(!_metadataInitialized.get(_id), \\\"metadataInitialized\\\");\\r\\n\\r\\n        collectionName[_id] = _name;\\r\\n        collectionSymbol[_id] = _symbol;\\r\\n        collectionRenovationTime[_id] = _renovationTime;\\r\\n        _metadataInitialized.set(_id);\\r\\n        emit SetCollectionMetadata(_id, _name, _symbol, _renovationTime);\\r\\n    }\\r\\n\\r\\n    /// @dev Toggle renovation requirements for a contract\\r\\n    /// @param _contractAddress Address of the contract to toggle renovation\\r\\n    /// @param _isPerpetual Whether to disable or enable renovation\\r\\n    function togglePerpetual(address _contractAddress, bool _isPerpetual) external onlyAdmin {\\r\\n        require(_contractAddress.isContract(), \\\"Only contracts allowed to be perpetual\\\");\\r\\n        isPerpetual[_contractAddress] = _isPerpetual;\\r\\n        emit LogTogglePerpetual(_contractAddress, _isPerpetual);\\r\\n    }\\r\\n\\r\\n    /// @dev Mint new reNFT tokens\\r\\n    /// @dev Requires Minter role\\r\\n    /// @param _id Collection ID\\r\\n    /// @param _to Address to transfer minted tokens\\r\\n    /// @param _amount Amount to mint\\r\\n    function mint(\\r\\n        uint256 _id,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) external onlyMinter {\\r\\n        require(_metadataInitialized.get(_id), \\\"!metadataInitialized\\\");\\r\\n        if (totalSupply(_id) == 0) {\\r\\n            uint256 currentId_ = _currentId.current();\\r\\n            require(currentId_ == 0 || totalSupply(currentId_ - 1) > 0, \\\"IDs should be sequential\\\");\\r\\n            _currentId.increment();\\r\\n        }\\r\\n        _mint(_to, _id, _amount, bytes(\\\"\\\"));\\r\\n        uint256 updatedExpirationTime = block.timestamp + collectionRenovationTime[_id];\\r\\n        accountExpirationTime[_id][_to] = updatedExpirationTime;\\r\\n        emit RenovationTimeUpdated(_id, _to, block.timestamp, updatedExpirationTime);\\r\\n        emit RealEstateNFTMinted(_id, _msgSender(), _to, _amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Allow the liquidator to take custody over expired accounts' tokens\\r\\n    /// @param _id Collection ID\\r\\n    /// @param _account Account address to liquidate tokens from\\r\\n    /// @param _data Additional data requirements in case liquidator is a contract\\r\\n    function takeCustody(\\r\\n        uint256 _id,\\r\\n        address _account,\\r\\n        bytes memory _data\\r\\n    ) external {\\r\\n        require(_msgSender() == liquidator && isLiquidable(_id, _account), \\\"Liquidation denied\\\");\\r\\n        _safeTransferFrom(_account, _msgSender(), _id, balanceOf(_msgSender(), _id), _data);\\r\\n    }\\r\\n\\r\\n    /// @notice Renovate expiration time (proving the account is active)\\r\\n    /// @param _id Collection ID\\r\\n    function renovateExpirationTime(uint256 _id) public {\\r\\n        require(balanceOf(_msgSender(), _id) > 0, \\\"No balance\\\");\\r\\n        uint256 updatedExpirationTime = block.timestamp + collectionRenovationTime[_id];\\r\\n        accountExpirationTime[_id][_msgSender()] = updatedExpirationTime;\\r\\n        emit RenovationTimeUpdated(_id, _msgSender(), block.timestamp, updatedExpirationTime);\\r\\n    }\\r\\n\\r\\n    /// @notice Renovate expiration time for all collections the user owns tokens\\r\\n    function renovateAll() external {\\r\\n        for (uint256 id = 0; id < _currentId.current(); id++) {\\r\\n            if (balanceOf(_msgSender(), id) > 0) renovateExpirationTime(id);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Burns own tokens\\r\\n    /// @dev Requires Burner role\\r\\n    /// @param _id Collection ID\\r\\n    /// @param _amount Amount of tokens to burn\\r\\n    function burn(uint256 _id, uint256 _amount) external {\\r\\n        require(_msgSender() == burner, \\\"!burner\\\");\\r\\n        _burn(_msgSender(), _id, _amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1c9674770f33446cd3eb506c85aad3ac4af8affe7e84fce854d23589a1fe8318\",\"license\":\"MIT\"},\"contracts/token/RoyalERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport { ERC1155 } from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport { SingleApprovableERC1155 } from \\\"./SingleApprovableERC1155.sol\\\";\\r\\nimport { IERC165 } from \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\r\\nimport { IEIP2981 } from \\\"../interfaces/IEIP2981.sol\\\";\\r\\n\\r\\n/// @title Royal ERC1155\\r\\n/// @dev Supports EIP-2981 royalties on NFT secondary sales\\r\\n///      Supports OpenSea contract metadata royalties\\r\\n///      Introduces fake \\\"owner\\\" to support OpenSea collections\\r\\nabstract contract RoyalERC1155 is IEIP2981, SingleApprovableERC1155 {\\r\\n    /// @dev OpenSea expects NFTs to be \\\"Ownable\\\", that is having an \\\"owner\\\",\\r\\n    ///      we introduce a fake \\\"owner\\\" here with no authority\\r\\n    address public owner;\\r\\n\\r\\n    /// @dev Address of the admin: Can set a new admin among other privileged roles\\r\\n    address public admin;\\r\\n\\r\\n    /// @notice Address to receive EIP-2981 royalties from secondary sales\\r\\n    ///         see https://eips.ethereum.org/EIPS/eip-2981\\r\\n    address public royaltyReceiver;\\r\\n\\r\\n    /// @notice Percentage of token sale price to be used for EIP-2981 royalties from secondary sales\\r\\n    ///         see https://eips.ethereum.org/EIPS/eip-2981\\r\\n    /// @dev Has 2 decimal precision. E.g. a value of 500 would result in a 5% royalty fee\\r\\n    uint16 public royaltyPercentage; // default OpenSea value is 750\\r\\n\\r\\n    /// @notice Contract level metadata to define collection name, description, and royalty fees.\\r\\n    ///         see https://docs.opensea.io/docs/contract-level-metadata\\r\\n    /// @dev Should be overwritten by inheriting contracts. By default only includes royalty information\\r\\n    string public contractURI;\\r\\n\\r\\n    /// @dev Fired in setContractURI()\\r\\n    /// @param _by an address which executed update\\r\\n    /// @param _value new contractURI value\\r\\n    event ContractURIUpdated(address indexed _by, string _value);\\r\\n\\r\\n    /// @dev Fired in setRoyaltyInfo()\\r\\n    /// @param _by an address which executed update\\r\\n    /// @param _receiver new royaltyReceiver value\\r\\n    /// @param _percentage new royaltyPercentage value\\r\\n    event RoyaltyInfoUpdated(address indexed _by, address indexed _receiver, uint16 _percentage);\\r\\n\\r\\n    /// @dev Fired in setOwner()\\r\\n    /// @param _by an address which set the new \\\"owner\\\"\\r\\n    /// @param _oldVal previous \\\"owner\\\" address\\r\\n    /// @param _newVal new \\\"owner\\\" address\\r\\n    event OwnerUpdated(address indexed _by, address indexed _oldVal, address indexed _newVal);\\r\\n\\r\\n    /// @dev Emitted when a new admin is set\\r\\n    event NewAdmin(address indexed _admin);\\r\\n\\r\\n    /// @dev Checks if msg.sender is the admin\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == admin, \\\"!admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        string memory uri_,\\r\\n        address _admin,\\r\\n        address _owner\\r\\n    ) ERC1155(uri_) {\\r\\n        // initialize owner as the \\\"_owner\\\", necessary for OpenSea\\r\\n        owner = _owner;\\r\\n\\r\\n        // set contract admin\\r\\n        admin = _admin;\\r\\n        emit NewAdmin(_admin);\\r\\n    }\\r\\n\\r\\n    /// @dev Set new admin role\\r\\n    /// @param _admin New admin address\\r\\n    function setAdmin(address _admin) external onlyAdmin {\\r\\n        require(admin != _admin, \\\"admin == _admin\\\");\\r\\n        admin = _admin;\\r\\n        emit NewAdmin(_admin);\\r\\n    }\\r\\n\\r\\n    /// @dev Restricted access function which updates the contract URI\\r\\n    /// @param _contractURI new contract URI to set\\r\\n    function setContractURI(string memory _contractURI) public virtual onlyAdmin {\\r\\n        // update the contract URI\\r\\n        contractURI = _contractURI;\\r\\n\\r\\n        // emit an event first\\r\\n        emit ContractURIUpdated(msg.sender, _contractURI);\\r\\n    }\\r\\n\\r\\n    /// @notice EIP-2981 function to calculate royalties for sales in secondary marketplaces.\\r\\n    ///         see https://eips.ethereum.org/EIPS/eip-2981\\r\\n    /// @param _salePrice the price (in any unit, .e.g wei, ERC20 token, et.c.) of the token to be sold\\r\\n    /// @return receiver the royalty receiver\\r\\n    /// @return royaltyAmount royalty amount in the same unit as _salePrice\\r\\n    function royaltyInfo(uint256, uint256 _salePrice)\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (address receiver, uint256 royaltyAmount)\\r\\n    {\\r\\n        // simply calculate the values and return the result\\r\\n        return (royaltyReceiver, (_salePrice * royaltyPercentage) / 100_00);\\r\\n    }\\r\\n\\r\\n    /// @dev Restricted access function which updates the royalty info\\r\\n    /// @param _royaltyReceiver new royalty receiver to set\\r\\n    /// @param _royaltyPercentage new royalty percentage to set\\r\\n    function setRoyaltyInfo(address _royaltyReceiver, uint16 _royaltyPercentage) public virtual onlyAdmin {\\r\\n        // verify royalty percentage is zero if receiver is also zero\\r\\n        require(_royaltyReceiver != address(0) || _royaltyPercentage == 0, \\\"invalid receiver\\\");\\r\\n\\r\\n        // update the values\\r\\n        royaltyReceiver = _royaltyReceiver;\\r\\n        royaltyPercentage = _royaltyPercentage;\\r\\n\\r\\n        // emit an event first\\r\\n        emit RoyaltyInfoUpdated(msg.sender, _royaltyReceiver, _royaltyPercentage);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if the address supplied is an \\\"owner\\\" of the smart contract\\r\\n    ///      Note: an \\\"owner\\\" doesn't have any authority on the smart contract and is \\\"nominal\\\"\\r\\n    /// @return true if the caller is the current owner.\\r\\n    function isOwner(address _addr) public view virtual returns (bool) {\\r\\n        // just evaluate and return the result\\r\\n        return _addr == owner;\\r\\n    }\\r\\n\\r\\n    /// @dev Restricted access function to set smart contract \\\"owner\\\"\\r\\n    ///      Note: an \\\"owner\\\" set doesn't have any authority, and cannot even update \\\"owner\\\"\\r\\n    /// @param _owner new \\\"owner\\\" of the smart contract\\r\\n    function transferOwnership(address _owner) public virtual onlyAdmin {\\r\\n        // update \\\"owner\\\"\\r\\n        owner = _owner;\\r\\n\\r\\n        // emit an event first - to log both old and new values\\r\\n        emit OwnerUpdated(msg.sender, owner, _owner);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IERC165\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155, IERC165) returns (bool) {\\r\\n        // construct the interface support from EIP-2981 and super interfaces\\r\\n        return interfaceId == type(IEIP2981).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbb4108ab8a168476096d6680002e829b83536a723f611bfebff655e15d89c045\",\"license\":\"MIT\"},\"contracts/token/SingleApprovableERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { ERC1155Supply } from \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\\";\\nimport { IERC1155 } from \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\n\\n/// @title Siple Approvable ERC1155\\n/// @author Yuri Fernandes (HorizonDAO)\\n/// @dev Allows the approval for a single collection and a certain amount of tokens\\n///     to be transferred with the allowed party\\nabstract contract SingleApprovableERC1155 is ERC1155Supply {\\n    /// @dev mapping (collectionId => owner => spender => amount)\\n    mapping(uint256 => mapping(address => mapping(address => uint256))) private _allowances;\\n\\n    /// @dev Emitted when allowance is given\\n    event Approval(uint256 indexed _id, address indexed _owner, address indexed _spender, uint256 _amount);\\n\\n    /// @notice Approve a spender to transfer tokens\\n    /// @param _id Collection ID\\n    /// @param _spender Spender address\\n    /// @param _amount Amount allowed\\n    function approve(\\n        uint256 _id,\\n        address _spender,\\n        uint256 _amount\\n    ) public returns (bool) {\\n        address owner_ = _msgSender();\\n        _approve(_id, owner_, _spender, _amount);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC1155\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes memory _data\\n    ) public override {\\n        if (_from != _msgSender() && !isApprovedForAll(_from, _msgSender())) {\\n            require(_allowances[_id][_from][_msgSender()] >= _amount, \\\"Not authorized\\\");\\n            _allowances[_id][_from][_msgSender()] -= _amount;\\n        }\\n        _safeTransferFrom(_from, _to, _id, _amount, _data);\\n    }\\n\\n    /// @inheritdoc IERC1155\\n    function safeBatchTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) public virtual override {\\n        if (_from != _msgSender() && !isApprovedForAll(_from, _msgSender())) {\\n            for (uint256 i = 0; i < _ids.length; i++) {\\n                require(_allowances[_ids[i]][_from][_msgSender()] >= _amounts[i], \\\"Not authorized\\\");\\n                _allowances[_ids[i]][_from][_msgSender()] -= _amounts[i];\\n            }\\n        }\\n        _safeBatchTransferFrom(_from, _to, _ids, _amounts, _data);\\n    }\\n\\n    /// @dev See {approve} notice\\n    /// @param _id Collection ID\\n    /// @param _spender Spender address\\n    /// @param _amount Amount allowed\\n    function _approve(\\n        uint256 _id,\\n        address _owner,\\n        address _spender,\\n        uint256 _amount\\n    ) internal virtual {\\n        require(_owner != address(0), \\\"Approve from the zero address\\\");\\n        require(_spender != address(0), \\\"Approve to the zero address\\\");\\n\\n        _allowances[_id][_owner][_spender] = _amount;\\n        emit Approval(_id, _owner, _spender, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x364de0a00727974e85196c9bcde823592778d37be1226a1db1171ed4e823461d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200356a3803806200356a8339810160408190526200003491620000ec565b828282826200004381620000a7565b50600580546001600160a01b038084166001600160a01b0319928316179092556006805492851692909116821790556040517f71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c90600090a250505050505062000341565b6002620000b5828262000275565b5050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620000e757600080fd5b919050565b6000806000606084860312156200010257600080fd5b83516001600160401b03808211156200011a57600080fd5b818601915086601f8301126200012f57600080fd5b815181811115620001445762000144620000b9565b604051601f8201601f19908116603f011681019083821181831017156200016f576200016f620000b9565b816040528281526020935089848487010111156200018c57600080fd5b600091505b82821015620001b0578482018401518183018501529083019062000191565b6000848483010152809750505050620001cb818701620000cf565b93505050620001dd60408501620000cf565b90509250925092565b600181811c90821680620001fb57607f821691505b6020821081036200021c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200027057600081815260208120601f850160051c810160208610156200024b5750805b601f850160051c820191505b818110156200026c5782815560010162000257565b5050505b505050565b81516001600160401b03811115620002915762000291620000b9565b620002a981620002a28454620001e6565b8462000222565b602080601f831160018114620002e15760008415620002c85750858301515b600019600386901b1c1916600185901b1785556200026c565b600085815260208120601f198616915b828110156200031257888601518255948401946001909101908401620002f1565b5085821015620003315787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61321980620003516000396000f3fe608060405234801561001057600080fd5b50600436106102735760003560e01c8063836a104011610151578063b48f1353116100c3578063e8cce94311610087578063e8cce94314610646578063e985e9c514610666578063f242432a146106a2578063f2fde38b146106b5578063f851a440146106c8578063fca3b5aa146106db57600080fd5b8063b48f1353146105bd578063b8584181146105d0578063bd85b039146105fb578063be8fadee1461061b578063e8a3d4851461063e57600080fd5b8063938e3d7b11610115578063938e3d7b1461053d57806395d89b41146105505780639fbc871314610571578063a22cb46514610584578063a996d6ce14610597578063b390c0ab146105aa57600080fd5b8063836a1040146104c95780638a71bb2d146104dc5780638cb0a511146105045780638d1d0d65146105175780638da5cb5b1461052a57600080fd5b80632a55205a116101ea5780634f558e79116101ae5780634f558e79146104535780636f273fd3146104755780636fb05fae1461047d578063704b6c0214610490578063723da008146104a357806372504a24146104b657600080fd5b80632a55205a146103b95780632eb2c2d6146103eb5780632f54bf6e146103fe5780634046ebae146104205780634e1273f41461043357600080fd5b806306fdde031161023c57806306fdde031461030957806307546172146103425780630e89341c1461036d5780630feea995146103805780631469499d1461039357806327810b6e146103a657600080fd5b8062fdd58e1461027857806301c76f811461029e57806301ffc9a7146102b357806303504235146102d65780630632631c146102f6575b600080fd5b61028b610286366004612658565b6106ee565b6040519081526020015b60405180910390f35b6102b16102ac366004612682565b610787565b005b6102c66102c13660046126b3565b610822565b6040519015158152602001610295565b6102e96102e43660046126d0565b610847565b6040516102959190612739565b6102c661030436600461274c565b6108e1565b60408051808201909152601a81527f4672616374696f6e616c205265616c20457374617465204e465400000000000060208201526102e9565b600954610355906001600160a01b031681565b6040516001600160a01b039091168152602001610295565b6102e961037b3660046126d0565b61090a565b6102b161038e3660046126d0565b6109a1565b6102b16103a136600461282d565b610a62565b600a54610355906001600160a01b031681565b6103cc6103c73660046128a1565b610bc9565b604080516001600160a01b039093168352602083019190915201610295565b6102b16103f9366004612957565b610c0a565b6102c661040c366004612682565b6005546001600160a01b0391821691161490565b600b54610355906001600160a01b031681565b610446610441366004612a00565b610ddc565b6040516102959190612b05565b6102c66104613660046126d0565b600090815260036020526040902054151590565b6102b1610f05565b6102e961048b3660046126d0565b610f41565b6102b161049e366004612682565b610f5a565b6102b16104b1366004612b18565b61101d565b6102b16104c4366004612b6e565b6110a1565b6102b16104d7366004612bac565b611186565b6007546104f190600160a01b900461ffff1681565b60405161ffff9091168152602001610295565b6102c6610512366004612bac565b61139e565b6102b1610525366004612be1565b6113b8565b600554610355906001600160a01b031681565b6102b161054b366004612c12565b61149c565b6040805180820190915260058152641c9953919560da1b60208201526102e9565b600754610355906001600160a01b031681565b6102b1610592366004612be1565b611517565b6102b16105a5366004612682565b611526565b6102b16105b83660046128a1565b6115e5565b6102c66105cb36600461274c565b61163d565b61028b6105de36600461274c565b600f60209081526000928352604080842090915290825290205481565b61028b6106093660046126d0565b60009081526003602052604090205490565b6102c6610629366004612682565b60116020526000908152604090205460ff1681565b6102e961168d565b61028b6106543660046126d0565b600e6020526000908152604090205481565b6102c6610674366004612c46565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6102b16106b0366004612c70565b61169a565b6102b16106c3366004612682565b611777565b600654610355906001600160a01b031681565b6102b16106e9366004612682565b6117ef565b60006001600160a01b03831661075e5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b6006546001600160a01b031633146107b15760405162461bcd60e51b815260040161075590612cd4565b600b546001600160a01b038083169116036108005760405162461bcd60e51b815260206004820152600f60248201526e29b0b6b2903634b8bab4b230ba37b960891b6044820152606401610755565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b0319821663152a902d60e11b14806107815750610781826118ae565b600c602052600090815260409020805461086090612cf4565b80601f016020809104026020016040519081016040528092919081815260200182805461088c90612cf4565b80156108d95780601f106108ae576101008083540402835291602001916108d9565b820191906000526020600020905b8154815290600101906020018083116108bc57829003601f168201915b505050505081565b600b546000906001600160a01b0316158015906109035750610903838361163d565b9392505050565b6000818152600360205260409020546060906109685760405162461bcd60e51b815260206004820152601a60248201527f4e6f6e2d6578697374656e7420636f6c6c656374696f6e2069640000000000006044820152606401610755565b610971826118fe565b61097a83611992565b60405160200161098b929190612d2e565b6040516020818303038152906040529050919050565b60006109ae335b836106ee565b116109e85760405162461bcd60e51b815260206004820152600a6024820152694e6f2062616c616e636560b01b6044820152606401610755565b6000818152600e6020526040812054610a019042612d73565b6000838152600f6020908152604080832033808552908352928190208490558051428152918201849052929350909184917f81485d0794af67acd82b669d1b05ff72de0f56df72d0536844fd90aa6a9b66f391015b60405180910390a35050565b6009546001600160a01b0316336001600160a01b031614610a955760405162461bcd60e51b815260040161075590612d86565b6009546001600160a01b0316336001600160a01b031614610ac85760405162461bcd60e51b815260040161075590612d86565b600884901c600090815260106020526040902054600160ff86161b1615610b275760405162461bcd60e51b81526020600482015260136024820152721b595d1859185d18525b9a5d1a585b1a5e9959606a1b6044820152606401610755565b6000848152600c60205260409020610b3f8482612ded565b506000848152600d60205260409020610b588382612ded565b506000848152600e60209081526040808320849055600887901c8352601090915290208054600160ff87161b179055837f4f19404c0873b39045bb62a574c0bcfa4c6ca022ca55eb68d30be8dc64221b80848484604051610bbb93929190612eac565b60405180910390a250505050565b60075460009081906001600160a01b0381169061271090610bf590600160a01b900461ffff1686612ee2565b610bff9190612f0f565b915091509250929050565b6001600160a01b0385163314801590610c2a5750610c288533610674565b155b15610dc85760005b8351811015610dc657828181518110610c4d57610c4d612f23565b602002602001015160046000868481518110610c6b57610c6b612f23565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000610cad3390565b6001600160a01b03166001600160a01b03168152602001908152602001600020541015610d0d5760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152606401610755565b828181518110610d1f57610d1f612f23565b602002602001015160046000868481518110610d3d57610d3d612f23565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000610d7f3390565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610dae9190612f39565b90915550819050610dbe81612f4c565b915050610c32565b505b610dd58585858585611a9a565b5050505050565b60608151835114610e415760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610755565b600083516001600160401b03811115610e5c57610e5c612778565b604051908082528060200260200182016040528015610e85578160200160208202803683370190505b50905060005b8451811015610efd57610ed0858281518110610ea957610ea9612f23565b6020026020010151858381518110610ec357610ec3612f23565b60200260200101516106ee565b828281518110610ee257610ee2612f23565b6020908102919091010152610ef681612f4c565b9050610e8b565b509392505050565b60005b601254811015610f3e576000610f1d336109a8565b1115610f2c57610f2c816109a1565b80610f3681612f4c565b915050610f08565b50565b600d602052600090815260409020805461086090612cf4565b6006546001600160a01b03163314610f845760405162461bcd60e51b815260040161075590612cd4565b6006546001600160a01b03808316911603610fd35760405162461bcd60e51b815260206004820152600f60248201526e30b236b4b7101e9e902fb0b236b4b760891b6044820152606401610755565b600680546001600160a01b0319166001600160a01b0383169081179091556040517f71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c90600090a250565b600b546001600160a01b0316336001600160a01b0316148015611045575061104583836108e1565b6110865760405162461bcd60e51b8152602060048201526012602482015271131a5c5d5a59185d1a5bdb8819195b9a595960721b6044820152606401610755565b61109c82338561109633886106ee565b85611c85565b505050565b6006546001600160a01b031633146110cb5760405162461bcd60e51b815260040161075590612cd4565b6001600160a01b0382161515806110e4575061ffff8116155b6111235760405162461bcd60e51b815260206004820152601060248201526f34b73b30b634b2103932b1b2b4bb32b960811b6044820152606401610755565b600780546001600160a01b0384166001600160b01b03199091168117600160a01b61ffff8516908102919091179092556040519182529033907f9ca088b6b695032bcd5d1fa450e8fa2773391294f09e3710ace940c4ae8cffac90602001610a56565b6009546001600160a01b0316336001600160a01b0316146111b95760405162461bcd60e51b815260040161075590612d86565b600883901c600090815260106020526040902054600160ff85161b166112185760405162461bcd60e51b8152602060048201526014602482015273085b595d1859185d18525b9a5d1a585b1a5e995960621b6044820152606401610755565b6000838152600360205260409020546000036112b157600061123960125490565b905080158061125557506000611253610609600184612f39565b115b6112a15760405162461bcd60e51b815260206004820152601860248201527f4944732073686f756c642062652073657175656e7469616c00000000000000006044820152606401610755565b6112af601280546001019055565b505b6112cc82848360405180602001604052806000815250611dbd565b6000838152600e60205260408120546112e59042612d73565b6000858152600f602090815260408083206001600160a01b038816808552908352928190208490558051428152918201849052929350909186917f81485d0794af67acd82b669d1b05ff72de0f56df72d0536844fd90aa6a9b66f3910160405180910390a36001600160a01b038316336001600160a01b0316857fd221ed6d0b64f2e9f972fbc48b2ce5210f880f75f0cd09111b73eca6937827eb8560405161139091815260200190565b60405180910390a450505050565b6000336113ad85828686611ee0565b506001949350505050565b6006546001600160a01b031633146113e25760405162461bcd60e51b815260040161075590612cd4565b6001600160a01b0382163b6114485760405162461bcd60e51b815260206004820152602660248201527f4f6e6c7920636f6e74726163747320616c6c6f77656420746f206265207065726044820152651c195d1d585b60d21b6064820152608401610755565b6001600160a01b038216600081815260116020526040808220805460ff191685151590811790915590519092917f6b90fd065e4f282e7aa50e47573d643de92b0005644bf0d24923d75e40994ab391a35050565b6006546001600160a01b031633146114c65760405162461bcd60e51b815260040161075590612cd4565b60086114d28282612ded565b50336001600160a01b03167f1ca91f64ead03abb06ea28975dfbf18044ac06f9fa1cb62a54ccc905df1028ed8260405161150c9190612739565b60405180910390a250565b611522338383611ff2565b5050565b6006546001600160a01b031633146115505760405162461bcd60e51b815260040161075590612cd4565b600a546001600160a01b0380831691160361159b5760405162461bcd60e51b815260206004820152600b60248201526a29b0b6b290313ab93732b960a91b6044820152606401610755565b600a80546001600160a01b0319166001600160a01b0383169081179091556040517f5bb1db06eeb30d85c1e53ae2285b460ce83e4318c623bd1ca51df912f64c45a490600090a250565b600a546001600160a01b0316336001600160a01b0316146116325760405162461bcd60e51b815260206004820152600760248201526610b13ab93732b960c91b6044820152606401610755565b6115223383836120d2565b6001600160a01b03811660009081526011602052604081205460ff161580156109035750506000918252600f602090815260408084206001600160a01b0393909316845291905290205442101590565b6008805461086090612cf4565b6001600160a01b03851633148015906116ba57506116b88533610674565b155b1561176a5760008381526004602090815260408083206001600160a01b0389168452825280832033845290915290205482111561172a5760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152606401610755565b60008381526004602090815260408083206001600160a01b0389168452825280832033845290915281208054849290611764908490612f39565b90915550505b610dd58585858585611c85565b6006546001600160a01b031633146117a15760405162461bcd60e51b815260040161075590612cd4565b600580546001600160a01b0319166001600160a01b038316908117909155604051819033907fb9312e2100469bd44e3f762c248f4dcc8d7788906fabf34f79db45920c37e26990600090a450565b6006546001600160a01b031633146118195760405162461bcd60e51b815260040161075590612cd4565b6009546001600160a01b038083169116036118645760405162461bcd60e51b815260206004820152600b60248201526a29b0b6b29036b4b73a32b960a91b6044820152606401610755565b600980546001600160a01b0319166001600160a01b0383169081179091556040517f6adffd5c93085d835dac6f3b40adf7c242ca4b3284048d20c3d8a501748dc97390600090a250565b60006001600160e01b03198216636cdb3d1360e11b14806118df57506001600160e01b031982166303a24d0760e21b145b8061078157506301ffc9a760e01b6001600160e01b0319831614610781565b60606002805461190d90612cf4565b80601f016020809104026020016040519081016040528092919081815260200182805461193990612cf4565b80156119865780601f1061195b57610100808354040283529160200191611986565b820191906000526020600020905b81548152906001019060200180831161196957829003601f168201915b50505050509050919050565b6060816000036119b95750506040805180820190915260018152600360fc1b602082015290565b8160005b81156119e357806119cd81612f4c565b91506119dc9050600a83612f0f565b91506119bd565b6000816001600160401b038111156119fd576119fd612778565b6040519080825280601f01601f191660200182016040528015611a27576020820181803683370190505b5090505b8415611a9257611a3c600183612f39565b9150611a49600a86612f65565b611a54906030612d73565b60f81b818381518110611a6957611a69612f23565b60200101906001600160f81b031916908160001a905350611a8b600a86612f0f565b9450611a2b565b949350505050565b8151835114611afc5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610755565b6001600160a01b038416611b225760405162461bcd60e51b815260040161075590612f79565b33611b31818787878787612262565b60005b8451811015611c17576000858281518110611b5157611b51612f23565b602002602001015190506000858381518110611b6f57611b6f612f23565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015611bbf5760405162461bcd60e51b815260040161075590612fbe565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611bfc908490612d73565b9250508190555050505080611c1090612f4c565b9050611b34565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611c67929190613008565b60405180910390a4611c7d8187878787876123db565b505050505050565b6001600160a01b038416611cab5760405162461bcd60e51b815260040161075590612f79565b336000611cb785612536565b90506000611cc485612536565b9050611cd4838989858589612262565b6000868152602081815260408083206001600160a01b038c16845290915290205485811015611d155760405162461bcd60e51b815260040161075590612fbe565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290611d52908490612d73565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611db2848a8a8a8a8a612581565b505050505050505050565b6001600160a01b038416611e1d5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610755565b336000611e2985612536565b90506000611e3685612536565b9050611e4783600089858589612262565b6000868152602081815260408083206001600160a01b038b16845290915281208054879290611e77908490612d73565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611ed783600089898989612581565b50505050505050565b6001600160a01b038316611f365760405162461bcd60e51b815260206004820152601d60248201527f417070726f76652066726f6d20746865207a65726f20616464726573730000006044820152606401610755565b6001600160a01b038216611f8c5760405162461bcd60e51b815260206004820152601b60248201527f417070726f766520746f20746865207a65726f206164647265737300000000006044820152606401610755565b60008481526004602090815260408083206001600160a01b03878116808652918452828520908716808652908452938290208590559051848152909187917f69e4aaf23f9318cf40839ac20453d8fbedaac2955eb08a27ae5189cc719257169101611390565b816001600160a01b0316836001600160a01b0316036120655760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610755565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383166121345760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610755565b33600061214084612536565b9050600061214d84612536565b905061216d83876000858560405180602001604052806000815250612262565b6000858152602081815260408083206001600160a01b038a168452909152902054848110156121ea5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610755565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4604080516020810190915260009052611ed7565b6001600160a01b0385166122e95760005b83518110156122e75782818151811061228e5761228e612f23565b6020026020010151600360008684815181106122ac576122ac612f23565b6020026020010151815260200190815260200160002060008282546122d19190612d73565b909155506122e0905081612f4c565b9050612273565b505b6001600160a01b038416611c7d5760005b8351811015611ed757600084828151811061231757612317612f23565b60200260200101519050600084838151811061233557612335612f23565b60200260200101519050600060036000848152602001908152602001600020549050818110156123b85760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f74604482015267616c537570706c7960c01b6064820152608401610755565b600092835260036020526040909220910390556123d481612f4c565b90506122fa565b6001600160a01b0384163b15611c7d5760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061241f9089908990889088908890600401613036565b6020604051808303816000875af192505050801561245a575060408051601f3d908101601f1916820190925261245791810190613094565b60015b612506576124666130b1565b806308c379a00361249f575061247a6130cd565b8061248557506124a1565b8060405162461bcd60e51b81526004016107559190612739565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610755565b6001600160e01b0319811663bc197c8160e01b14611ed75760405162461bcd60e51b815260040161075590613156565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061257057612570612f23565b602090810291909101015292915050565b6001600160a01b0384163b15611c7d5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906125c5908990899088908890889060040161319e565b6020604051808303816000875af1925050508015612600575060408051601f3d908101601f191682019092526125fd91810190613094565b60015b61260c576124666130b1565b6001600160e01b0319811663f23a6e6160e01b14611ed75760405162461bcd60e51b815260040161075590613156565b80356001600160a01b038116811461265357600080fd5b919050565b6000806040838503121561266b57600080fd5b6126748361263c565b946020939093013593505050565b60006020828403121561269457600080fd5b6109038261263c565b6001600160e01b031981168114610f3e57600080fd5b6000602082840312156126c557600080fd5b81356109038161269d565b6000602082840312156126e257600080fd5b5035919050565b60005b838110156127045781810151838201526020016126ec565b50506000910152565b600081518084526127258160208601602086016126e9565b601f01601f19169290920160200192915050565b602081526000610903602083018461270d565b6000806040838503121561275f57600080fd5b8235915061276f6020840161263c565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b03811182821017156127b3576127b3612778565b6040525050565b600082601f8301126127cb57600080fd5b81356001600160401b038111156127e4576127e4612778565b6040516127fb601f8301601f19166020018261278e565b81815284602083860101111561281057600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561284357600080fd5b8435935060208501356001600160401b038082111561286157600080fd5b61286d888389016127ba565b9450604087013591508082111561288357600080fd5b50612890878288016127ba565b949793965093946060013593505050565b600080604083850312156128b457600080fd5b50508035926020909101359150565b60006001600160401b038211156128dc576128dc612778565b5060051b60200190565b600082601f8301126128f757600080fd5b81356020612904826128c3565b604051612911828261278e565b83815260059390931b850182019282810191508684111561293157600080fd5b8286015b8481101561294c5780358352918301918301612935565b509695505050505050565b600080600080600060a0868803121561296f57600080fd5b6129788661263c565b94506129866020870161263c565b935060408601356001600160401b03808211156129a257600080fd5b6129ae89838a016128e6565b945060608801359150808211156129c457600080fd5b6129d089838a016128e6565b935060808801359150808211156129e657600080fd5b506129f3888289016127ba565b9150509295509295909350565b60008060408385031215612a1357600080fd5b82356001600160401b0380821115612a2a57600080fd5b818501915085601f830112612a3e57600080fd5b81356020612a4b826128c3565b604051612a58828261278e565b83815260059390931b8501820192828101915089841115612a7857600080fd5b948201945b83861015612a9d57612a8e8661263c565b82529482019490820190612a7d565b96505086013592505080821115612ab357600080fd5b50612ac0858286016128e6565b9150509250929050565b600081518084526020808501945080840160005b83811015612afa57815187529582019590820190600101612ade565b509495945050505050565b6020815260006109036020830184612aca565b600080600060608486031215612b2d57600080fd5b83359250612b3d6020850161263c565b915060408401356001600160401b03811115612b5857600080fd5b612b64868287016127ba565b9150509250925092565b60008060408385031215612b8157600080fd5b612b8a8361263c565b9150602083013561ffff81168114612ba157600080fd5b809150509250929050565b600080600060608486031215612bc157600080fd5b83359250612bd16020850161263c565b9150604084013590509250925092565b60008060408385031215612bf457600080fd5b612bfd8361263c565b915060208301358015158114612ba157600080fd5b600060208284031215612c2457600080fd5b81356001600160401b03811115612c3a57600080fd5b611a92848285016127ba565b60008060408385031215612c5957600080fd5b612c628361263c565b915061276f6020840161263c565b600080600080600060a08688031215612c8857600080fd5b612c918661263c565b9450612c9f6020870161263c565b9350604086013592506060860135915060808601356001600160401b03811115612cc857600080fd5b6129f3888289016127ba565b60208082526006908201526510b0b236b4b760d11b604082015260600190565b600181811c90821680612d0857607f821691505b602082108103612d2857634e487b7160e01b600052602260045260246000fd5b50919050565b60008351612d408184602088016126e9565b835190830190612d548183602088016126e9565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561078157610781612d5d565b60208082526007908201526610b6b4b73a32b960c91b604082015260600190565b601f82111561109c57600081815260208120601f850160051c81016020861015612dce5750805b601f850160051c820191505b81811015611c7d57828155600101612dda565b81516001600160401b03811115612e0657612e06612778565b612e1a81612e148454612cf4565b84612da7565b602080601f831160018114612e4f5760008415612e375750858301515b600019600386901b1c1916600185901b178555611c7d565b600085815260208120601f198616915b82811015612e7e57888601518255948401946001909101908401612e5f565b5085821015612e9c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b606081526000612ebf606083018661270d565b8281036020840152612ed1818661270d565b915050826040830152949350505050565b808202811582820484141761078157610781612d5d565b634e487b7160e01b600052601260045260246000fd5b600082612f1e57612f1e612ef9565b500490565b634e487b7160e01b600052603260045260246000fd5b8181038181111561078157610781612d5d565b600060018201612f5e57612f5e612d5d565b5060010190565b600082612f7457612f74612ef9565b500690565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60408152600061301b6040830185612aca565b828103602084015261302d8185612aca565b95945050505050565b6001600160a01b0386811682528516602082015260a06040820181905260009061306290830186612aca565b82810360608401526130748186612aca565b90508281036080840152613088818561270d565b98975050505050505050565b6000602082840312156130a657600080fd5b81516109038161269d565b600060033d11156130ca5760046000803e5060005160e01c5b90565b600060443d10156130db5790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561310a57505050505090565b82850191508151818111156131225750505050505090565b843d870101602082850101111561313c5750505050505090565b61314b6020828601018761278e565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906131d89083018461270d565b97965050505050505056fea2646970667358221220914373d12532020ac98806b81a30c5442991dae17ce45eaa57b881f1ad5e5aff64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102735760003560e01c8063836a104011610151578063b48f1353116100c3578063e8cce94311610087578063e8cce94314610646578063e985e9c514610666578063f242432a146106a2578063f2fde38b146106b5578063f851a440146106c8578063fca3b5aa146106db57600080fd5b8063b48f1353146105bd578063b8584181146105d0578063bd85b039146105fb578063be8fadee1461061b578063e8a3d4851461063e57600080fd5b8063938e3d7b11610115578063938e3d7b1461053d57806395d89b41146105505780639fbc871314610571578063a22cb46514610584578063a996d6ce14610597578063b390c0ab146105aa57600080fd5b8063836a1040146104c95780638a71bb2d146104dc5780638cb0a511146105045780638d1d0d65146105175780638da5cb5b1461052a57600080fd5b80632a55205a116101ea5780634f558e79116101ae5780634f558e79146104535780636f273fd3146104755780636fb05fae1461047d578063704b6c0214610490578063723da008146104a357806372504a24146104b657600080fd5b80632a55205a146103b95780632eb2c2d6146103eb5780632f54bf6e146103fe5780634046ebae146104205780634e1273f41461043357600080fd5b806306fdde031161023c57806306fdde031461030957806307546172146103425780630e89341c1461036d5780630feea995146103805780631469499d1461039357806327810b6e146103a657600080fd5b8062fdd58e1461027857806301c76f811461029e57806301ffc9a7146102b357806303504235146102d65780630632631c146102f6575b600080fd5b61028b610286366004612658565b6106ee565b6040519081526020015b60405180910390f35b6102b16102ac366004612682565b610787565b005b6102c66102c13660046126b3565b610822565b6040519015158152602001610295565b6102e96102e43660046126d0565b610847565b6040516102959190612739565b6102c661030436600461274c565b6108e1565b60408051808201909152601a81527f4672616374696f6e616c205265616c20457374617465204e465400000000000060208201526102e9565b600954610355906001600160a01b031681565b6040516001600160a01b039091168152602001610295565b6102e961037b3660046126d0565b61090a565b6102b161038e3660046126d0565b6109a1565b6102b16103a136600461282d565b610a62565b600a54610355906001600160a01b031681565b6103cc6103c73660046128a1565b610bc9565b604080516001600160a01b039093168352602083019190915201610295565b6102b16103f9366004612957565b610c0a565b6102c661040c366004612682565b6005546001600160a01b0391821691161490565b600b54610355906001600160a01b031681565b610446610441366004612a00565b610ddc565b6040516102959190612b05565b6102c66104613660046126d0565b600090815260036020526040902054151590565b6102b1610f05565b6102e961048b3660046126d0565b610f41565b6102b161049e366004612682565b610f5a565b6102b16104b1366004612b18565b61101d565b6102b16104c4366004612b6e565b6110a1565b6102b16104d7366004612bac565b611186565b6007546104f190600160a01b900461ffff1681565b60405161ffff9091168152602001610295565b6102c6610512366004612bac565b61139e565b6102b1610525366004612be1565b6113b8565b600554610355906001600160a01b031681565b6102b161054b366004612c12565b61149c565b6040805180820190915260058152641c9953919560da1b60208201526102e9565b600754610355906001600160a01b031681565b6102b1610592366004612be1565b611517565b6102b16105a5366004612682565b611526565b6102b16105b83660046128a1565b6115e5565b6102c66105cb36600461274c565b61163d565b61028b6105de36600461274c565b600f60209081526000928352604080842090915290825290205481565b61028b6106093660046126d0565b60009081526003602052604090205490565b6102c6610629366004612682565b60116020526000908152604090205460ff1681565b6102e961168d565b61028b6106543660046126d0565b600e6020526000908152604090205481565b6102c6610674366004612c46565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6102b16106b0366004612c70565b61169a565b6102b16106c3366004612682565b611777565b600654610355906001600160a01b031681565b6102b16106e9366004612682565b6117ef565b60006001600160a01b03831661075e5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b6006546001600160a01b031633146107b15760405162461bcd60e51b815260040161075590612cd4565b600b546001600160a01b038083169116036108005760405162461bcd60e51b815260206004820152600f60248201526e29b0b6b2903634b8bab4b230ba37b960891b6044820152606401610755565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b0319821663152a902d60e11b14806107815750610781826118ae565b600c602052600090815260409020805461086090612cf4565b80601f016020809104026020016040519081016040528092919081815260200182805461088c90612cf4565b80156108d95780601f106108ae576101008083540402835291602001916108d9565b820191906000526020600020905b8154815290600101906020018083116108bc57829003601f168201915b505050505081565b600b546000906001600160a01b0316158015906109035750610903838361163d565b9392505050565b6000818152600360205260409020546060906109685760405162461bcd60e51b815260206004820152601a60248201527f4e6f6e2d6578697374656e7420636f6c6c656374696f6e2069640000000000006044820152606401610755565b610971826118fe565b61097a83611992565b60405160200161098b929190612d2e565b6040516020818303038152906040529050919050565b60006109ae335b836106ee565b116109e85760405162461bcd60e51b815260206004820152600a6024820152694e6f2062616c616e636560b01b6044820152606401610755565b6000818152600e6020526040812054610a019042612d73565b6000838152600f6020908152604080832033808552908352928190208490558051428152918201849052929350909184917f81485d0794af67acd82b669d1b05ff72de0f56df72d0536844fd90aa6a9b66f391015b60405180910390a35050565b6009546001600160a01b0316336001600160a01b031614610a955760405162461bcd60e51b815260040161075590612d86565b6009546001600160a01b0316336001600160a01b031614610ac85760405162461bcd60e51b815260040161075590612d86565b600884901c600090815260106020526040902054600160ff86161b1615610b275760405162461bcd60e51b81526020600482015260136024820152721b595d1859185d18525b9a5d1a585b1a5e9959606a1b6044820152606401610755565b6000848152600c60205260409020610b3f8482612ded565b506000848152600d60205260409020610b588382612ded565b506000848152600e60209081526040808320849055600887901c8352601090915290208054600160ff87161b179055837f4f19404c0873b39045bb62a574c0bcfa4c6ca022ca55eb68d30be8dc64221b80848484604051610bbb93929190612eac565b60405180910390a250505050565b60075460009081906001600160a01b0381169061271090610bf590600160a01b900461ffff1686612ee2565b610bff9190612f0f565b915091509250929050565b6001600160a01b0385163314801590610c2a5750610c288533610674565b155b15610dc85760005b8351811015610dc657828181518110610c4d57610c4d612f23565b602002602001015160046000868481518110610c6b57610c6b612f23565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000610cad3390565b6001600160a01b03166001600160a01b03168152602001908152602001600020541015610d0d5760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152606401610755565b828181518110610d1f57610d1f612f23565b602002602001015160046000868481518110610d3d57610d3d612f23565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000610d7f3390565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610dae9190612f39565b90915550819050610dbe81612f4c565b915050610c32565b505b610dd58585858585611a9a565b5050505050565b60608151835114610e415760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610755565b600083516001600160401b03811115610e5c57610e5c612778565b604051908082528060200260200182016040528015610e85578160200160208202803683370190505b50905060005b8451811015610efd57610ed0858281518110610ea957610ea9612f23565b6020026020010151858381518110610ec357610ec3612f23565b60200260200101516106ee565b828281518110610ee257610ee2612f23565b6020908102919091010152610ef681612f4c565b9050610e8b565b509392505050565b60005b601254811015610f3e576000610f1d336109a8565b1115610f2c57610f2c816109a1565b80610f3681612f4c565b915050610f08565b50565b600d602052600090815260409020805461086090612cf4565b6006546001600160a01b03163314610f845760405162461bcd60e51b815260040161075590612cd4565b6006546001600160a01b03808316911603610fd35760405162461bcd60e51b815260206004820152600f60248201526e30b236b4b7101e9e902fb0b236b4b760891b6044820152606401610755565b600680546001600160a01b0319166001600160a01b0383169081179091556040517f71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c90600090a250565b600b546001600160a01b0316336001600160a01b0316148015611045575061104583836108e1565b6110865760405162461bcd60e51b8152602060048201526012602482015271131a5c5d5a59185d1a5bdb8819195b9a595960721b6044820152606401610755565b61109c82338561109633886106ee565b85611c85565b505050565b6006546001600160a01b031633146110cb5760405162461bcd60e51b815260040161075590612cd4565b6001600160a01b0382161515806110e4575061ffff8116155b6111235760405162461bcd60e51b815260206004820152601060248201526f34b73b30b634b2103932b1b2b4bb32b960811b6044820152606401610755565b600780546001600160a01b0384166001600160b01b03199091168117600160a01b61ffff8516908102919091179092556040519182529033907f9ca088b6b695032bcd5d1fa450e8fa2773391294f09e3710ace940c4ae8cffac90602001610a56565b6009546001600160a01b0316336001600160a01b0316146111b95760405162461bcd60e51b815260040161075590612d86565b600883901c600090815260106020526040902054600160ff85161b166112185760405162461bcd60e51b8152602060048201526014602482015273085b595d1859185d18525b9a5d1a585b1a5e995960621b6044820152606401610755565b6000838152600360205260409020546000036112b157600061123960125490565b905080158061125557506000611253610609600184612f39565b115b6112a15760405162461bcd60e51b815260206004820152601860248201527f4944732073686f756c642062652073657175656e7469616c00000000000000006044820152606401610755565b6112af601280546001019055565b505b6112cc82848360405180602001604052806000815250611dbd565b6000838152600e60205260408120546112e59042612d73565b6000858152600f602090815260408083206001600160a01b038816808552908352928190208490558051428152918201849052929350909186917f81485d0794af67acd82b669d1b05ff72de0f56df72d0536844fd90aa6a9b66f3910160405180910390a36001600160a01b038316336001600160a01b0316857fd221ed6d0b64f2e9f972fbc48b2ce5210f880f75f0cd09111b73eca6937827eb8560405161139091815260200190565b60405180910390a450505050565b6000336113ad85828686611ee0565b506001949350505050565b6006546001600160a01b031633146113e25760405162461bcd60e51b815260040161075590612cd4565b6001600160a01b0382163b6114485760405162461bcd60e51b815260206004820152602660248201527f4f6e6c7920636f6e74726163747320616c6c6f77656420746f206265207065726044820152651c195d1d585b60d21b6064820152608401610755565b6001600160a01b038216600081815260116020526040808220805460ff191685151590811790915590519092917f6b90fd065e4f282e7aa50e47573d643de92b0005644bf0d24923d75e40994ab391a35050565b6006546001600160a01b031633146114c65760405162461bcd60e51b815260040161075590612cd4565b60086114d28282612ded565b50336001600160a01b03167f1ca91f64ead03abb06ea28975dfbf18044ac06f9fa1cb62a54ccc905df1028ed8260405161150c9190612739565b60405180910390a250565b611522338383611ff2565b5050565b6006546001600160a01b031633146115505760405162461bcd60e51b815260040161075590612cd4565b600a546001600160a01b0380831691160361159b5760405162461bcd60e51b815260206004820152600b60248201526a29b0b6b290313ab93732b960a91b6044820152606401610755565b600a80546001600160a01b0319166001600160a01b0383169081179091556040517f5bb1db06eeb30d85c1e53ae2285b460ce83e4318c623bd1ca51df912f64c45a490600090a250565b600a546001600160a01b0316336001600160a01b0316146116325760405162461bcd60e51b815260206004820152600760248201526610b13ab93732b960c91b6044820152606401610755565b6115223383836120d2565b6001600160a01b03811660009081526011602052604081205460ff161580156109035750506000918252600f602090815260408084206001600160a01b0393909316845291905290205442101590565b6008805461086090612cf4565b6001600160a01b03851633148015906116ba57506116b88533610674565b155b1561176a5760008381526004602090815260408083206001600160a01b0389168452825280832033845290915290205482111561172a5760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152606401610755565b60008381526004602090815260408083206001600160a01b0389168452825280832033845290915281208054849290611764908490612f39565b90915550505b610dd58585858585611c85565b6006546001600160a01b031633146117a15760405162461bcd60e51b815260040161075590612cd4565b600580546001600160a01b0319166001600160a01b038316908117909155604051819033907fb9312e2100469bd44e3f762c248f4dcc8d7788906fabf34f79db45920c37e26990600090a450565b6006546001600160a01b031633146118195760405162461bcd60e51b815260040161075590612cd4565b6009546001600160a01b038083169116036118645760405162461bcd60e51b815260206004820152600b60248201526a29b0b6b29036b4b73a32b960a91b6044820152606401610755565b600980546001600160a01b0319166001600160a01b0383169081179091556040517f6adffd5c93085d835dac6f3b40adf7c242ca4b3284048d20c3d8a501748dc97390600090a250565b60006001600160e01b03198216636cdb3d1360e11b14806118df57506001600160e01b031982166303a24d0760e21b145b8061078157506301ffc9a760e01b6001600160e01b0319831614610781565b60606002805461190d90612cf4565b80601f016020809104026020016040519081016040528092919081815260200182805461193990612cf4565b80156119865780601f1061195b57610100808354040283529160200191611986565b820191906000526020600020905b81548152906001019060200180831161196957829003601f168201915b50505050509050919050565b6060816000036119b95750506040805180820190915260018152600360fc1b602082015290565b8160005b81156119e357806119cd81612f4c565b91506119dc9050600a83612f0f565b91506119bd565b6000816001600160401b038111156119fd576119fd612778565b6040519080825280601f01601f191660200182016040528015611a27576020820181803683370190505b5090505b8415611a9257611a3c600183612f39565b9150611a49600a86612f65565b611a54906030612d73565b60f81b818381518110611a6957611a69612f23565b60200101906001600160f81b031916908160001a905350611a8b600a86612f0f565b9450611a2b565b949350505050565b8151835114611afc5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610755565b6001600160a01b038416611b225760405162461bcd60e51b815260040161075590612f79565b33611b31818787878787612262565b60005b8451811015611c17576000858281518110611b5157611b51612f23565b602002602001015190506000858381518110611b6f57611b6f612f23565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015611bbf5760405162461bcd60e51b815260040161075590612fbe565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611bfc908490612d73565b9250508190555050505080611c1090612f4c565b9050611b34565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611c67929190613008565b60405180910390a4611c7d8187878787876123db565b505050505050565b6001600160a01b038416611cab5760405162461bcd60e51b815260040161075590612f79565b336000611cb785612536565b90506000611cc485612536565b9050611cd4838989858589612262565b6000868152602081815260408083206001600160a01b038c16845290915290205485811015611d155760405162461bcd60e51b815260040161075590612fbe565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290611d52908490612d73565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611db2848a8a8a8a8a612581565b505050505050505050565b6001600160a01b038416611e1d5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610755565b336000611e2985612536565b90506000611e3685612536565b9050611e4783600089858589612262565b6000868152602081815260408083206001600160a01b038b16845290915281208054879290611e77908490612d73565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611ed783600089898989612581565b50505050505050565b6001600160a01b038316611f365760405162461bcd60e51b815260206004820152601d60248201527f417070726f76652066726f6d20746865207a65726f20616464726573730000006044820152606401610755565b6001600160a01b038216611f8c5760405162461bcd60e51b815260206004820152601b60248201527f417070726f766520746f20746865207a65726f206164647265737300000000006044820152606401610755565b60008481526004602090815260408083206001600160a01b03878116808652918452828520908716808652908452938290208590559051848152909187917f69e4aaf23f9318cf40839ac20453d8fbedaac2955eb08a27ae5189cc719257169101611390565b816001600160a01b0316836001600160a01b0316036120655760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610755565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383166121345760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610755565b33600061214084612536565b9050600061214d84612536565b905061216d83876000858560405180602001604052806000815250612262565b6000858152602081815260408083206001600160a01b038a168452909152902054848110156121ea5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610755565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4604080516020810190915260009052611ed7565b6001600160a01b0385166122e95760005b83518110156122e75782818151811061228e5761228e612f23565b6020026020010151600360008684815181106122ac576122ac612f23565b6020026020010151815260200190815260200160002060008282546122d19190612d73565b909155506122e0905081612f4c565b9050612273565b505b6001600160a01b038416611c7d5760005b8351811015611ed757600084828151811061231757612317612f23565b60200260200101519050600084838151811061233557612335612f23565b60200260200101519050600060036000848152602001908152602001600020549050818110156123b85760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f74604482015267616c537570706c7960c01b6064820152608401610755565b600092835260036020526040909220910390556123d481612f4c565b90506122fa565b6001600160a01b0384163b15611c7d5760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061241f9089908990889088908890600401613036565b6020604051808303816000875af192505050801561245a575060408051601f3d908101601f1916820190925261245791810190613094565b60015b612506576124666130b1565b806308c379a00361249f575061247a6130cd565b8061248557506124a1565b8060405162461bcd60e51b81526004016107559190612739565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610755565b6001600160e01b0319811663bc197c8160e01b14611ed75760405162461bcd60e51b815260040161075590613156565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061257057612570612f23565b602090810291909101015292915050565b6001600160a01b0384163b15611c7d5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906125c5908990899088908890889060040161319e565b6020604051808303816000875af1925050508015612600575060408051601f3d908101601f191682019092526125fd91810190613094565b60015b61260c576124666130b1565b6001600160e01b0319811663f23a6e6160e01b14611ed75760405162461bcd60e51b815260040161075590613156565b80356001600160a01b038116811461265357600080fd5b919050565b6000806040838503121561266b57600080fd5b6126748361263c565b946020939093013593505050565b60006020828403121561269457600080fd5b6109038261263c565b6001600160e01b031981168114610f3e57600080fd5b6000602082840312156126c557600080fd5b81356109038161269d565b6000602082840312156126e257600080fd5b5035919050565b60005b838110156127045781810151838201526020016126ec565b50506000910152565b600081518084526127258160208601602086016126e9565b601f01601f19169290920160200192915050565b602081526000610903602083018461270d565b6000806040838503121561275f57600080fd5b8235915061276f6020840161263c565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b03811182821017156127b3576127b3612778565b6040525050565b600082601f8301126127cb57600080fd5b81356001600160401b038111156127e4576127e4612778565b6040516127fb601f8301601f19166020018261278e565b81815284602083860101111561281057600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561284357600080fd5b8435935060208501356001600160401b038082111561286157600080fd5b61286d888389016127ba565b9450604087013591508082111561288357600080fd5b50612890878288016127ba565b949793965093946060013593505050565b600080604083850312156128b457600080fd5b50508035926020909101359150565b60006001600160401b038211156128dc576128dc612778565b5060051b60200190565b600082601f8301126128f757600080fd5b81356020612904826128c3565b604051612911828261278e565b83815260059390931b850182019282810191508684111561293157600080fd5b8286015b8481101561294c5780358352918301918301612935565b509695505050505050565b600080600080600060a0868803121561296f57600080fd5b6129788661263c565b94506129866020870161263c565b935060408601356001600160401b03808211156129a257600080fd5b6129ae89838a016128e6565b945060608801359150808211156129c457600080fd5b6129d089838a016128e6565b935060808801359150808211156129e657600080fd5b506129f3888289016127ba565b9150509295509295909350565b60008060408385031215612a1357600080fd5b82356001600160401b0380821115612a2a57600080fd5b818501915085601f830112612a3e57600080fd5b81356020612a4b826128c3565b604051612a58828261278e565b83815260059390931b8501820192828101915089841115612a7857600080fd5b948201945b83861015612a9d57612a8e8661263c565b82529482019490820190612a7d565b96505086013592505080821115612ab357600080fd5b50612ac0858286016128e6565b9150509250929050565b600081518084526020808501945080840160005b83811015612afa57815187529582019590820190600101612ade565b509495945050505050565b6020815260006109036020830184612aca565b600080600060608486031215612b2d57600080fd5b83359250612b3d6020850161263c565b915060408401356001600160401b03811115612b5857600080fd5b612b64868287016127ba565b9150509250925092565b60008060408385031215612b8157600080fd5b612b8a8361263c565b9150602083013561ffff81168114612ba157600080fd5b809150509250929050565b600080600060608486031215612bc157600080fd5b83359250612bd16020850161263c565b9150604084013590509250925092565b60008060408385031215612bf457600080fd5b612bfd8361263c565b915060208301358015158114612ba157600080fd5b600060208284031215612c2457600080fd5b81356001600160401b03811115612c3a57600080fd5b611a92848285016127ba565b60008060408385031215612c5957600080fd5b612c628361263c565b915061276f6020840161263c565b600080600080600060a08688031215612c8857600080fd5b612c918661263c565b9450612c9f6020870161263c565b9350604086013592506060860135915060808601356001600160401b03811115612cc857600080fd5b6129f3888289016127ba565b60208082526006908201526510b0b236b4b760d11b604082015260600190565b600181811c90821680612d0857607f821691505b602082108103612d2857634e487b7160e01b600052602260045260246000fd5b50919050565b60008351612d408184602088016126e9565b835190830190612d548183602088016126e9565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561078157610781612d5d565b60208082526007908201526610b6b4b73a32b960c91b604082015260600190565b601f82111561109c57600081815260208120601f850160051c81016020861015612dce5750805b601f850160051c820191505b81811015611c7d57828155600101612dda565b81516001600160401b03811115612e0657612e06612778565b612e1a81612e148454612cf4565b84612da7565b602080601f831160018114612e4f5760008415612e375750858301515b600019600386901b1c1916600185901b178555611c7d565b600085815260208120601f198616915b82811015612e7e57888601518255948401946001909101908401612e5f565b5085821015612e9c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b606081526000612ebf606083018661270d565b8281036020840152612ed1818661270d565b915050826040830152949350505050565b808202811582820484141761078157610781612d5d565b634e487b7160e01b600052601260045260246000fd5b600082612f1e57612f1e612ef9565b500490565b634e487b7160e01b600052603260045260246000fd5b8181038181111561078157610781612d5d565b600060018201612f5e57612f5e612d5d565b5060010190565b600082612f7457612f74612ef9565b500690565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60408152600061301b6040830185612aca565b828103602084015261302d8185612aca565b95945050505050565b6001600160a01b0386811682528516602082015260a06040820181905260009061306290830186612aca565b82810360608401526130748186612aca565b90508281036080840152613088818561270d565b98975050505050505050565b6000602082840312156130a657600080fd5b81516109038161269d565b600060033d11156130ca5760046000803e5060005160e01c5b90565b600060443d10156130db5790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561310a57505050505090565b82850191508151818111156131225750505050505090565b843d870101602082850101111561313c5750505050505090565b61314b6020828601018761278e565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906131d89083018461270d565b97965050505050505056fea2646970667358221220914373d12532020ac98806b81a30c5442991dae17ce45eaa57b881f1ad5e5aff64736f6c63430008110033",
  "devdoc": {
    "author": "Yuri Fernandes (HorizonDAO)",
    "events": {
      "LogTogglePerpetual(address,bool)": {
        "details": "Emitted when togglePerpetual function is successfully called"
      },
      "NewBurner(address)": {
        "details": "Emitted when a new burner is set"
      },
      "NewMinter(address)": {
        "details": "Emitted when a new minter is set"
      },
      "RealEstateNFTMinted(uint256,address,address,uint256)": {
        "details": "Emitted when new reNFTs are minted"
      },
      "RenovationTimeUpdated(uint256,address,uint256,uint256)": {
        "details": "Emitted when the renovation time of an user is updated (by itself)"
      },
      "SetCollectionMetadata(uint256,string,string,uint256)": {
        "details": "Emitted when a new reNFT collection metadata is configured"
      }
    },
    "kind": "dev",
    "methods": {
      "accountExpired(uint256,address)": {
        "params": {
          "_account": "Account address",
          "_id": "Collection ID"
        }
      },
      "approve(uint256,address,uint256)": {
        "params": {
          "_amount": "Amount allowed",
          "_id": "Collection ID",
          "_spender": "Spender address"
        }
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "burn(uint256,uint256)": {
        "details": "Burns own tokensRequires Burner role",
        "params": {
          "_amount": "Amount of tokens to burn",
          "_id": "Collection ID"
        }
      },
      "constructor": {
        "details": "Initialize RealEstateNFT",
        "params": {
          "_admin": "Address with contract administration privileges",
          "_baseUri": "Base URI for the offchain NFT metadata",
          "_owner": "EOA to be used as OpenSea collection admin"
        }
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "isLiquidable(uint256,address)": {
        "params": {
          "_account": "Account address",
          "_id": "Collection ID"
        }
      },
      "isOwner(address)": {
        "returns": {
          "_0": "true if the caller is the current owner."
        }
      },
      "mint(uint256,address,uint256)": {
        "details": "Mint new reNFT tokensRequires Minter role",
        "params": {
          "_amount": "Amount to mint",
          "_id": "Collection ID",
          "_to": "Address to transfer minted tokens"
        }
      },
      "renovateExpirationTime(uint256)": {
        "params": {
          "_id": "Collection ID"
        }
      },
      "royaltyInfo(uint256,uint256)": {
        "params": {
          "_salePrice": "the price (in any unit, .e.g wei, ERC20 token, et.c.) of the token to be sold"
        },
        "returns": {
          "receiver": "the royalty receiver",
          "royaltyAmount": "royalty amount in the same unit as _salePrice"
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."
      },
      "setAdmin(address)": {
        "details": "Set new admin role",
        "params": {
          "_admin": "New admin address"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setBurner(address)": {
        "details": "Set new burner role",
        "params": {
          "_burner": "New burner address"
        }
      },
      "setCollectionMetadata(uint256,string,string,uint256)": {
        "details": "Sets the metadata for a new reNFT collectionRequires Minter role",
        "params": {
          "_id": "Collection ID",
          "_name": "New collection name",
          "_renovationTime": "The amount of time an user is required to check-in",
          "_symbol": "New collection symbol"
        }
      },
      "setContractURI(string)": {
        "details": "Restricted access function which updates the contract URI",
        "params": {
          "_contractURI": "new contract URI to set"
        }
      },
      "setLiquidator(address)": {
        "details": "Set new liquidator role",
        "params": {
          "_liquidator": "New liquidator address"
        }
      },
      "setMinter(address)": {
        "details": "Set new minter role",
        "params": {
          "_minter": "New minter address"
        }
      },
      "setRoyaltyInfo(address,uint16)": {
        "details": "Restricted access function which updates the royalty info",
        "params": {
          "_royaltyPercentage": "new royalty percentage to set",
          "_royaltyReceiver": "new royalty receiver to set"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "takeCustody(uint256,address,bytes)": {
        "details": "Allow the liquidator to take custody over expired accounts' tokens",
        "params": {
          "_account": "Account address to liquidate tokens from",
          "_data": "Additional data requirements in case liquidator is a contract",
          "_id": "Collection ID"
        }
      },
      "togglePerpetual(address,bool)": {
        "details": "Toggle renovation requirements for a contract",
        "params": {
          "_contractAddress": "Address of the contract to toggle renovation",
          "_isPerpetual": "Whether to disable or enable renovation"
        }
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "transferOwnership(address)": {
        "details": "Restricted access function to set smart contract \"owner\"      Note: an \"owner\" set doesn't have any authority, and cannot even update \"owner\"",
        "params": {
          "_owner": "new \"owner\" of the smart contract"
        }
      },
      "uri(uint256)": {
        "params": {
          "_id": "Collection ID"
        },
        "returns": {
          "_0": "Concatenated BaseUri and collectionId"
        }
      }
    },
    "stateVariables": {
      "_currentId": {
        "details": "Current value shows the next available collection ID"
      },
      "_metadataInitialized": {
        "details": "mapping (tokenId => isInitialized)when a tokenId is initialized, it means it cannot change afterwards"
      },
      "accountExpirationTime": {
        "details": "mapping (tokenId => account => expiration time)Users' reNFTs can be put to auction after current_time >= accountExpirationTime, in order to avoid it, users should renovate it's expiration time"
      },
      "burner": {
        "details": "Address of the burner: Can execute burning functions"
      },
      "collectionName": {
        "details": "mapping (collectionId => collectionName)"
      },
      "collectionRenovationTime": {
        "details": "mapping (collectionId => renovationTime)When users renovate it's signature on reNFTs ownership users' expiration time will be extended to current_time + collectionRenovationTime"
      },
      "collectionSymbol": {
        "details": "mapping (collectionId => collectionSymbol)"
      },
      "isPerpetual": {
        "details": "mapping (contract => isPerpetual)Some addresses might need perpetual ownership in order     to use reNFTs as collateral, among other additional utilities,     to do so, they need to be safe of liquidation"
      },
      "liquidator": {
        "details": "Address responsible to move expired accounts tokens"
      },
      "minter": {
        "details": "Address of the minter: Can execute mint function"
      }
    },
    "title": "Fractional Real Estate NFT",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "accountExpired(uint256,address)": {
        "notice": "Whether an account has expired and are elligible for liquidation"
      },
      "approve(uint256,address,uint256)": {
        "notice": "Approve a spender to transfer tokens"
      },
      "contractURI()": {
        "notice": "Contract level metadata to define collection name, description, and royalty fees.         see https://docs.opensea.io/docs/contract-level-metadata"
      },
      "isLiquidable(uint256,address)": {
        "notice": "Check if an liquidation can be performed"
      },
      "isOwner(address)": {
        "notice": "Checks if the address supplied is an \"owner\" of the smart contract      Note: an \"owner\" doesn't have any authority on the smart contract and is \"nominal\""
      },
      "name()": {
        "notice": "Returns the name of the RealEstateERC1155 contract"
      },
      "renovateAll()": {
        "notice": "Renovate expiration time for all collections the user owns tokens"
      },
      "renovateExpirationTime(uint256)": {
        "notice": "Renovate expiration time (proving the account is active)"
      },
      "royaltyInfo(uint256,uint256)": {
        "notice": "EIP-2981 function to calculate royalties for sales in secondary marketplaces.         see https://eips.ethereum.org/EIPS/eip-2981"
      },
      "royaltyPercentage()": {
        "notice": "Percentage of token sale price to be used for EIP-2981 royalties from secondary sales         see https://eips.ethereum.org/EIPS/eip-2981"
      },
      "royaltyReceiver()": {
        "notice": "Address to receive EIP-2981 royalties from secondary sales         see https://eips.ethereum.org/EIPS/eip-2981"
      },
      "symbol()": {
        "notice": "Returns the symbol of the RealEstateERC1155 contract"
      },
      "uri(uint256)": {
        "notice": "Returns the URI for the given reNFT collection"
      }
    },
    "notice": "Used to Tokenize and Fractionate Real EstateUsers are required to renovate (check-in) after a certain amount of time     or their assets can be liquidated (necessary since reNFT holders can claim deeds if a buyout occur)Only a predefined minter can mint tokens and on a incremental order",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 31,
        "contract": "contracts/token/FractionalRealEstateERC1155.sol:FractionalRealEstateERC1155",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 37,
        "contract": "contracts/token/FractionalRealEstateERC1155.sol:FractionalRealEstateERC1155",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 39,
        "contract": "contracts/token/FractionalRealEstateERC1155.sol:FractionalRealEstateERC1155",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1401,
        "contract": "contracts/token/FractionalRealEstateERC1155.sol:FractionalRealEstateERC1155",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3302,
        "contract": "contracts/token/FractionalRealEstateERC1155.sol:FractionalRealEstateERC1155",
        "label": "_allowances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 3040,
        "contract": "contracts/token/FractionalRealEstateERC1155.sol:FractionalRealEstateERC1155",
        "label": "owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 3043,
        "contract": "contracts/token/FractionalRealEstateERC1155.sol:FractionalRealEstateERC1155",
        "label": "admin",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 3046,
        "contract": "contracts/token/FractionalRealEstateERC1155.sol:FractionalRealEstateERC1155",
        "label": "royaltyReceiver",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 3049,
        "contract": "contracts/token/FractionalRealEstateERC1155.sol:FractionalRealEstateERC1155",
        "label": "royaltyPercentage",
        "offset": 20,
        "slot": "7",
        "type": "t_uint16"
      },
      {
        "astId": 3052,
        "contract": "contracts/token/FractionalRealEstateERC1155.sol:FractionalRealEstateERC1155",
        "label": "contractURI",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 2409,
        "contract": "contracts/token/FractionalRealEstateERC1155.sol:FractionalRealEstateERC1155",
        "label": "minter",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 2412,
        "contract": "contracts/token/FractionalRealEstateERC1155.sol:FractionalRealEstateERC1155",
        "label": "burner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2415,
        "contract": "contracts/token/FractionalRealEstateERC1155.sol:FractionalRealEstateERC1155",
        "label": "liquidator",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 2420,
        "contract": "contracts/token/FractionalRealEstateERC1155.sol:FractionalRealEstateERC1155",
        "label": "collectionName",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2425,
        "contract": "contracts/token/FractionalRealEstateERC1155.sol:FractionalRealEstateERC1155",
        "label": "collectionSymbol",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2430,
        "contract": "contracts/token/FractionalRealEstateERC1155.sol:FractionalRealEstateERC1155",
        "label": "collectionRenovationTime",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2437,
        "contract": "contracts/token/FractionalRealEstateERC1155.sol:FractionalRealEstateERC1155",
        "label": "accountExpirationTime",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2441,
        "contract": "contracts/token/FractionalRealEstateERC1155.sol:FractionalRealEstateERC1155",
        "label": "_metadataInitialized",
        "offset": 0,
        "slot": "16",
        "type": "t_struct(BitMap)2224_storage"
      },
      {
        "astId": 2446,
        "contract": "contracts/token/FractionalRealEstateERC1155.sol:FractionalRealEstateERC1155",
        "label": "isPerpetual",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2450,
        "contract": "contracts/token/FractionalRealEstateERC1155.sol:FractionalRealEstateERC1155",
        "label": "_currentId",
        "offset": 0,
        "slot": "18",
        "type": "t_struct(Counter)1886_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BitMap)2224_storage": {
        "encoding": "inplace",
        "label": "struct BitMaps.BitMap",
        "members": [
          {
            "astId": 2223,
            "contract": "contracts/token/FractionalRealEstateERC1155.sol:FractionalRealEstateERC1155",
            "label": "_data",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1886_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1885,
            "contract": "contracts/token/FractionalRealEstateERC1155.sol:FractionalRealEstateERC1155",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
