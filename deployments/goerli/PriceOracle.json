{
  "address": "0x67D80cDeFdEa5EbE985a65f07374d6AdF7101890",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_base",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_quote",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_aggregator",
          "type": "address"
        }
      ],
      "name": "SetAggregator",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_base",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_quote",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "basePrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "priceAggregator",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_base",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_quote",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_aggregator",
          "type": "address"
        }
      ],
      "name": "setAggregator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5c9305f86ac40da5cb11f68d2c1c89b5f8288f1d458b774825d4119edb5d6705",
  "receipt": {
    "to": null,
    "from": "0x39a242169BA3B28623E6d235A4Bdd46287d4bae3",
    "contractAddress": "0x67D80cDeFdEa5EbE985a65f07374d6AdF7101890",
    "transactionIndex": 96,
    "gasUsed": "562761",
    "logsBloom": "0x
    "blockHash": "0xbc91d11b1838de4eee68e3c0b23f941aaa0cdf0dc7ec7d800ab75652bf22c963",
    "transactionHash": "0x5c9305f86ac40da5cb11f68d2c1c89b5f8288f1d458b774825d4119edb5d6705",
    "logs": [
      {
        "transactionIndex": 96,
        "blockNumber": 8093019,
        "transactionHash": "0x5c9305f86ac40da5cb11f68d2c1c89b5f8288f1d458b774825d4119edb5d6705",
        "address": "0x67D80cDeFdEa5EbE985a65f07374d6AdF7101890",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000039a242169ba3b28623e6d235a4bdd46287d4bae3"
        ],
        "data": "0x",
        "logIndex": 164,
        "blockHash": "0xbc91d11b1838de4eee68e3c0b23f941aaa0cdf0dc7ec7d800ab75652bf22c963"
      },
      {
        "transactionIndex": 96,
        "blockNumber": 8093019,
        "transactionHash": "0x5c9305f86ac40da5cb11f68d2c1c89b5f8288f1d458b774825d4119edb5d6705",
        "address": "0x67D80cDeFdEa5EbE985a65f07374d6AdF7101890",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x00000000000000000000000039a242169ba3b28623e6d235a4bdd46287d4bae3",
          "0x00000000000000000000000039a242169ba3b28623e6d235a4bdd46287d4bae3"
        ],
        "data": "0x",
        "logIndex": 165,
        "blockHash": "0xbc91d11b1838de4eee68e3c0b23f941aaa0cdf0dc7ec7d800ab75652bf22c963"
      }
    ],
    "blockNumber": 8093019,
    "cumulativeGasUsed": "17199060",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x39a242169BA3B28623E6d235A4Bdd46287d4bae3"],
  "numDeployments": 1,
  "solcInputHash": "ea2dbb5686f8198e1e89cb071b646e95",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_base\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_quote\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"name\":\"SetAggregator\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quote\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"basePrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"priceAggregator\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quote\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"name\":\"setAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Horizon DAO (Yuri Fernandes)\",\"details\":\"Aggregator registration conventions:\\t\\t- For stablecoins 1:1 with USD, register base/USD tokens as base/stablecoin priceAggregator\\t\\t- For ETH use zero address\",\"events\":{\"SetAggregator(address,address,address,address)\":{\"details\":\"Emitted when a new price aggregator is set\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Instantiate PriceOracle\",\"params\":{\"_owner\":\"Owner address\"}},\"getPrice(address,address)\":{\"params\":{\"_base\":\"Base currency address\",\"_quote\":\"Quote currency address\"},\"returns\":{\"basePrice\":\"Base price in quote\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAggregator(address,address,address)\":{\"details\":\"Set a new chainlink price aggregator\",\"params\":{\"_base\":\"Base currency address\",\"_quote\":\"Quote currency address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"priceAggregator\":{\"details\":\"mapping (base => quote => priceAggregator)\"}},\"title\":\"Price Oracle\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getPrice(address,address)\":{\"notice\":\"Get price of `_base` in `quote`\"}},\"notice\":\"Uses Chainlink Price Aggregators to retrieve base price in quote (base/quote)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/PriceOracle.sol\":\"PriceOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\",\"keccak256\":\"0xe73087c5001a37cf7186b3709377c7ceb01a0d38fb908723d1464cea66b4958c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\\\";\\r\\n\\r\\ninterface IERC20Extended is IERC20Upgradeable {\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0x641ead82dc13325b3baf16275208b68a1468944bc3c959203431f23ba2c5413a\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport { AggregatorV3Interface } from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\ninterface IPriceOracle {\\r\\n    /// @notice Get Price Aggregator address\\r\\n    /// @param _base Base currency address\\r\\n    /// @param _quote Quote currency address\\r\\n    /// @return Chainlink aggregator for base/quote\\r\\n    function priceAggregator(address _base, address _quote) external view returns (AggregatorV3Interface);\\r\\n\\r\\n    /// @dev Set a new chainlink price aggregator\\r\\n    /// @param _base Base currency address\\r\\n    /// @param _quote Quote currency address\\r\\n    function setAggregator(address _base, address _quote, address _aggregator) external;\\r\\n\\r\\n    /// @notice Get price of `_base` in `quote`\\r\\n    /// @param _base Base currency address\\r\\n    /// @param _quote Quote currency address\\r\\n    /// @return basePrice Base price in quote\\r\\n    function getPrice(address _base, address _quote) external view returns (uint256 basePrice);\\r\\n}\\r\\n\",\"keccak256\":\"0xcf68337e729596b2d67d4f92594890009257db30c59b3efa1639351dc0faee38\",\"license\":\"MIT\"},\"contracts/protocol/PriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\nimport { AggregatorV3Interface } from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nimport { IERC20Extended } from \\\"../interfaces/IERC20Extended.sol\\\";\\r\\nimport { IPriceOracle } from \\\"../interfaces/IPriceOracle.sol\\\";\\r\\n\\r\\n/// @title Price Oracle\\r\\n/// @author Horizon DAO (Yuri Fernandes)\\r\\n/// @notice Uses Chainlink Price Aggregators to retrieve base price in quote (base/quote)\\r\\n/// @dev Aggregator registration conventions:\\r\\n///\\t\\t- For stablecoins 1:1 with USD, register base/USD tokens as base/stablecoin priceAggregator\\r\\n///\\t\\t- For ETH use zero address\\r\\ncontract PriceOracle is IPriceOracle, Ownable {\\r\\n    /// @dev mapping (base => quote => priceAggregator)\\r\\n    mapping(address => mapping(address => AggregatorV3Interface)) public priceAggregator;\\r\\n\\r\\n    /// @dev Emitted when a new price aggregator is set\\r\\n    event SetAggregator(address indexed _by, address indexed _base, address indexed _quote, address _aggregator);\\r\\n\\r\\n    /// @dev Instantiate PriceOracle\\r\\n    /// @param _owner Owner address\\r\\n    constructor(address _owner) {\\r\\n        _transferOwnership(_owner);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IPriceOracle\\r\\n    function setAggregator(address _base, address _quote, address _aggregator) external override onlyOwner {\\r\\n        priceAggregator[_base][_quote] = AggregatorV3Interface(_aggregator);\\r\\n        emit SetAggregator(msg.sender, _base, _quote, _aggregator);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IPriceOracle\\r\\n    function getPrice(address _base, address _quote) external view override returns (uint256 basePrice) {\\r\\n        basePrice = uint256(_getAnswer(_base, _quote));\\r\\n        uint8 priceDecimals = _getPriceDecimals(_base, _quote);\\r\\n        uint8 quoteDecimals = _getTokenDecimals(_quote);\\r\\n        if (priceDecimals > quoteDecimals) {\\r\\n            basePrice /= 10 ** (priceDecimals - quoteDecimals);\\r\\n        } else if (priceDecimals < quoteDecimals) {\\r\\n            basePrice *= 10 ** (priceDecimals - quoteDecimals);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Get answer (price) given `_base` and `_quote`\\r\\n    /// @param _base Base currency address\\r\\n    /// @param _quote Quote currency address\\r\\n    /// @return Base price in quote (int256)\\r\\n    function _getAnswer(address _base, address _quote) internal view returns (int256) {\\r\\n        AggregatorV3Interface priceAggregator_ = priceAggregator[_base][_quote];\\r\\n        require(address(priceAggregator_) != address(0), \\\"Price Aggregator not available\\\");\\r\\n        (uint256 roundId, int256 priceInBase, , uint256 updatedAt, uint256 answeredInRound) = priceAggregator_\\r\\n            .latestRoundData();\\r\\n        require(roundId == answeredInRound, \\\"Invalid Answer\\\");\\r\\n        require(updatedAt > 0, \\\"Round not complete\\\");\\r\\n        return priceInBase;\\r\\n    }\\r\\n\\r\\n    /// @dev Get price decimals\\r\\n    /// @param _base Base currency address\\r\\n    /// @param _quote Quote currency address\\r\\n    /// @return Number of decimals in price response\\r\\n    function _getPriceDecimals(address _base, address _quote) internal view returns (uint8) {\\r\\n        return priceAggregator[_base][_quote].decimals();\\r\\n    }\\r\\n\\r\\n    /// @dev Get token decimals\\r\\n    /// @param _token Token address\\r\\n    /// @return Number of decimals in `_token`\\r\\n    function _getTokenDecimals(address _token) internal view returns (uint8) {\\r\\n        return IERC20Extended(_token).decimals();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9112d72726bb60bb5fdf4710cba8142a74688afb55282bc34c56e7510ee0e6d1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161098838038061098883398101604081905261002f91610097565b61003833610047565b61004181610047565b506100c7565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100a957600080fd5b81516001600160a01b03811681146100c057600080fd5b9392505050565b6108b2806100d66000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806370eee8a514610067578063715018a61461007c5780638da5cb5b14610084578063ac41865a146100ae578063bd29674e146100cf578063f2fde38b14610103575b600080fd5b61007a610075366004610603565b610116565b005b61007a610193565b6000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100c16100bc366004610646565b6101a7565b6040519081526020016100a5565b6100916100dd366004610646565b60016020908152600092835260408084209091529082529020546001600160a01b031681565b61007a610111366004610679565b61023c565b61011e6102ba565b6001600160a01b0383811660008181526001602090815260408083208786168085529083529281902080546001600160a01b031916958716958617905551938452909233917f315e6c5ef44acf5e818ee8202758e475a83ec8f80928cc404931d21eff81a329910160405180910390a4505050565b61019b6102ba565b6101a56000610314565b565b60006101b38383610364565b905060006101c184846104f7565b905060006101ce84610583565b90508060ff168260ff161115610204576101e881836106aa565b6101f390600a6107a7565b6101fd90846107b6565b9250610234565b8060ff168260ff1610156102345761021c81836106aa565b61022790600a6107a7565b61023190846107d8565b92505b505092915050565b6102446102ba565b6001600160a01b0381166102ae5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6102b781610314565b50565b6000546001600160a01b031633146101a55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102a5565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0380831660009081526001602090815260408083208585168452909152812054909116806103db5760405162461bcd60e51b815260206004820152601e60248201527f50726963652041676772656761746f72206e6f7420617661696c61626c65000060448201526064016102a5565b600080600080846001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561041f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104439190610809565b69ffffffffffffffffffff169450945050935069ffffffffffffffffffff1693508084146104a45760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21020b739bbb2b960911b60448201526064016102a5565b600082116104e95760405162461bcd60e51b8152602060048201526012602482015271526f756e64206e6f7420636f6d706c65746560701b60448201526064016102a5565b509093505050505b92915050565b6001600160a01b0380831660009081526001602090815260408083208585168452825280832054815163313ce56760e01b815291519394169263313ce567926004808401939192918290030181865afa158015610558573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057c9190610859565b9392505050565b6000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f19190610859565b80356001600160a01b03811681146105fe57600080fd5b919050565b60008060006060848603121561061857600080fd5b610621846105e7565b925061062f602085016105e7565b915061063d604085016105e7565b90509250925092565b6000806040838503121561065957600080fd5b610662836105e7565b9150610670602084016105e7565b90509250929050565b60006020828403121561068b57600080fd5b61057c826105e7565b634e487b7160e01b600052601160045260246000fd5b60ff82811682821603908111156104f1576104f1610694565b600181815b808511156106fe5781600019048211156106e4576106e4610694565b808516156106f157918102915b93841c93908002906106c8565b509250929050565b600082610715575060016104f1565b81610722575060006104f1565b816001811461073857600281146107425761075e565b60019150506104f1565b60ff84111561075357610753610694565b50506001821b6104f1565b5060208310610133831016604e8410600b8410161715610781575081810a6104f1565b61078b83836106c3565b806000190482111561079f5761079f610694565b029392505050565b600061057c60ff841683610706565b6000826107d357634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176104f1576104f1610694565b805169ffffffffffffffffffff811681146105fe57600080fd5b600080600080600060a0868803121561082157600080fd5b61082a866107ef565b945060208601519350604086015192506060860151915061084d608087016107ef565b90509295509295909350565b60006020828403121561086b57600080fd5b815160ff8116811461057c57600080fdfea2646970667358221220bdecf903664fccab06a4559f08a51787329c896c5327d343731ac15cb9f9b4b264736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806370eee8a514610067578063715018a61461007c5780638da5cb5b14610084578063ac41865a146100ae578063bd29674e146100cf578063f2fde38b14610103575b600080fd5b61007a610075366004610603565b610116565b005b61007a610193565b6000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100c16100bc366004610646565b6101a7565b6040519081526020016100a5565b6100916100dd366004610646565b60016020908152600092835260408084209091529082529020546001600160a01b031681565b61007a610111366004610679565b61023c565b61011e6102ba565b6001600160a01b0383811660008181526001602090815260408083208786168085529083529281902080546001600160a01b031916958716958617905551938452909233917f315e6c5ef44acf5e818ee8202758e475a83ec8f80928cc404931d21eff81a329910160405180910390a4505050565b61019b6102ba565b6101a56000610314565b565b60006101b38383610364565b905060006101c184846104f7565b905060006101ce84610583565b90508060ff168260ff161115610204576101e881836106aa565b6101f390600a6107a7565b6101fd90846107b6565b9250610234565b8060ff168260ff1610156102345761021c81836106aa565b61022790600a6107a7565b61023190846107d8565b92505b505092915050565b6102446102ba565b6001600160a01b0381166102ae5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6102b781610314565b50565b6000546001600160a01b031633146101a55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102a5565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0380831660009081526001602090815260408083208585168452909152812054909116806103db5760405162461bcd60e51b815260206004820152601e60248201527f50726963652041676772656761746f72206e6f7420617661696c61626c65000060448201526064016102a5565b600080600080846001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561041f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104439190610809565b69ffffffffffffffffffff169450945050935069ffffffffffffffffffff1693508084146104a45760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21020b739bbb2b960911b60448201526064016102a5565b600082116104e95760405162461bcd60e51b8152602060048201526012602482015271526f756e64206e6f7420636f6d706c65746560701b60448201526064016102a5565b509093505050505b92915050565b6001600160a01b0380831660009081526001602090815260408083208585168452825280832054815163313ce56760e01b815291519394169263313ce567926004808401939192918290030181865afa158015610558573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057c9190610859565b9392505050565b6000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f19190610859565b80356001600160a01b03811681146105fe57600080fd5b919050565b60008060006060848603121561061857600080fd5b610621846105e7565b925061062f602085016105e7565b915061063d604085016105e7565b90509250925092565b6000806040838503121561065957600080fd5b610662836105e7565b9150610670602084016105e7565b90509250929050565b60006020828403121561068b57600080fd5b61057c826105e7565b634e487b7160e01b600052601160045260246000fd5b60ff82811682821603908111156104f1576104f1610694565b600181815b808511156106fe5781600019048211156106e4576106e4610694565b808516156106f157918102915b93841c93908002906106c8565b509250929050565b600082610715575060016104f1565b81610722575060006104f1565b816001811461073857600281146107425761075e565b60019150506104f1565b60ff84111561075357610753610694565b50506001821b6104f1565b5060208310610133831016604e8410600b8410161715610781575081810a6104f1565b61078b83836106c3565b806000190482111561079f5761079f610694565b029392505050565b600061057c60ff841683610706565b6000826107d357634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176104f1576104f1610694565b805169ffffffffffffffffffff811681146105fe57600080fd5b600080600080600060a0868803121561082157600080fd5b61082a866107ef565b945060208601519350604086015192506060860151915061084d608087016107ef565b90509295509295909350565b60006020828403121561086b57600080fd5b815160ff8116811461057c57600080fdfea2646970667358221220bdecf903664fccab06a4559f08a51787329c896c5327d343731ac15cb9f9b4b264736f6c63430008110033",
  "devdoc": {
    "author": "Horizon DAO (Yuri Fernandes)",
    "details": "Aggregator registration conventions:\t\t- For stablecoins 1:1 with USD, register base/USD tokens as base/stablecoin priceAggregator\t\t- For ETH use zero address",
    "events": {
      "SetAggregator(address,address,address,address)": {
        "details": "Emitted when a new price aggregator is set"
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Instantiate PriceOracle",
        "params": {
          "_owner": "Owner address"
        }
      },
      "getPrice(address,address)": {
        "params": {
          "_base": "Base currency address",
          "_quote": "Quote currency address"
        },
        "returns": {
          "basePrice": "Base price in quote"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAggregator(address,address,address)": {
        "details": "Set a new chainlink price aggregator",
        "params": {
          "_base": "Base currency address",
          "_quote": "Quote currency address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "priceAggregator": {
        "details": "mapping (base => quote => priceAggregator)"
      }
    },
    "title": "Price Oracle",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getPrice(address,address)": {
        "notice": "Get price of `_base` in `quote`"
      }
    },
    "notice": "Uses Chainlink Price Aggregators to retrieve base price in quote (base/quote)",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5410,
        "contract": "contracts/protocol/PriceOracle.sol:PriceOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13916,
        "contract": "contracts/protocol/PriceOracle.sol:PriceOracle",
        "label": "priceAggregator",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_contract(AggregatorV3Interface)219))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(AggregatorV3Interface)219": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(AggregatorV3Interface)219)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract AggregatorV3Interface)",
        "numberOfBytes": "32",
        "value": "t_contract(AggregatorV3Interface)219"
      },
      "t_mapping(t_address,t_mapping(t_address,t_contract(AggregatorV3Interface)219))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => contract AggregatorV3Interface))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_contract(AggregatorV3Interface)219)"
      }
    }
  }
}
