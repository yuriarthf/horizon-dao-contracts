{
  "address": "0x38C6C7B9a65Bfe7150FE493a678669a9E5B7652E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseUri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_value",
          "type": "string"
        }
      ],
      "name": "ContractURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "NewAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_burner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "RealEstateNFTBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "RealEstateNFTMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_burner",
          "type": "address"
        }
      ],
      "name": "SetBurner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "_feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "SetDefaultRoyalties",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "SetMinter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "_feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "SetTokenRoyalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextRealEstateId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_burner",
          "type": "address"
        }
      ],
      "name": "setBurner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_contractURI",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "setDefaultRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "setTokenRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9641afd21affe4991df9249e41d0d7d8e813758e83438c19b3f8c245cd4471c8",
  "receipt": {
    "to": null,
    "from": "0x39a242169BA3B28623E6d235A4Bdd46287d4bae3",
    "contractAddress": "0x38C6C7B9a65Bfe7150FE493a678669a9E5B7652E",
    "transactionIndex": 46,
    "gasUsed": "2619917",
    "logsBloom": "0x
    "blockHash": "0xe469b956e18d85b80483569f795bdf212c747113b30dd30f8082867830cfc09c",
    "transactionHash": "0x9641afd21affe4991df9249e41d0d7d8e813758e83438c19b3f8c245cd4471c8",
    "logs": [
      {
        "transactionIndex": 46,
        "blockNumber": 7932174,
        "transactionHash": "0x9641afd21affe4991df9249e41d0d7d8e813758e83438c19b3f8c245cd4471c8",
        "address": "0x38C6C7B9a65Bfe7150FE493a678669a9E5B7652E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000039a242169ba3b28623e6d235a4bdd46287d4bae3"
        ],
        "data": "0x",
        "logIndex": 83,
        "blockHash": "0xe469b956e18d85b80483569f795bdf212c747113b30dd30f8082867830cfc09c"
      },
      {
        "transactionIndex": 46,
        "blockNumber": 7932174,
        "transactionHash": "0x9641afd21affe4991df9249e41d0d7d8e813758e83438c19b3f8c245cd4471c8",
        "address": "0x38C6C7B9a65Bfe7150FE493a678669a9E5B7652E",
        "topics": [
          "0x71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c",
          "0x00000000000000000000000063926e60619172fe58870bceb057b3b437fa62fc"
        ],
        "data": "0x",
        "logIndex": 84,
        "blockHash": "0xe469b956e18d85b80483569f795bdf212c747113b30dd30f8082867830cfc09c"
      }
    ],
    "blockNumber": 7932174,
    "cumulativeGasUsed": "12644880",
    "status": 1,
    "byzantium": true
  },
  "args": ["", "0x63926E60619172FE58870BCeb057b3B437Fa62FC", "0x39a242169BA3B28623E6d235A4Bdd46287d4bae3"],
  "numDeployments": 1,
  "solcInputHash": "d86ac72f8f03877c22e5a846df595be7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseUri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RealEstateNFTBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RealEstateNFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_burner\",\"type\":\"address\"}],\"name\":\"SetBurner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"_feeNumerator\",\"type\":\"uint96\"}],\"name\":\"SetDefaultRoyalties\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"SetMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"_feeNumerator\",\"type\":\"uint96\"}],\"name\":\"SetTokenRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRealEstateId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_burner\",\"type\":\"address\"}],\"name\":\"setBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Yuri Fernandes (HorizonDAO)\",\"events\":{\"RealEstateNFTBurned(uint256,address,uint256)\":{\"details\":\"Emitted when reNFTs are burned\"},\"RealEstateNFTMinted(uint256,address,address,uint256)\":{\"details\":\"Emitted when new reNFTs are minted\"},\"SetBurner(address,address)\":{\"details\":\"Emitted when a new burner is set\"},\"SetMinter(address,address)\":{\"details\":\"Emitted when a new minter is set\"}},\"kind\":\"dev\",\"methods\":{\"approve(uint256,address,uint256)\":{\"params\":{\"_amount\":\"Amount allowed\",\"_spender\":\"Spender address\",\"_tokenId\":\"Collection ID\"}},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"burn(uint256,uint256)\":{\"details\":\"Burns own tokensRequires Burner role\",\"params\":{\"_amount\":\"Amount of tokens to burn\",\"_id\":\"Token ID\"}},\"constructor\":{\"details\":\"Initialize RealEstateNFT\",\"params\":{\"_admin\":\"Address with contract administration privileges\",\"_baseUri\":\"Base URI for the offchain NFT metadata\",\"_owner\":\"EOA to be used as OpenSea token admin\"}},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"isOwner(address)\":{\"returns\":{\"_0\":\"true if the caller is the current owner.\"}},\"mint(uint256,address,uint256)\":{\"details\":\"Mint new reNFT tokensRequires Minter role\",\"params\":{\"_amount\":\"Amount to mint\",\"_id\":\"Token ID\",\"_to\":\"Address to transfer minted tokens\"}},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value.\"},\"setAdmin(address)\":{\"details\":\"Set new admin role\",\"params\":{\"_admin\":\"New admin address\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setBaseURI(string)\":{\"details\":\"Sets `baseURI` as the `_baseURI` for all tokens\",\"params\":{\"_baseURI\":\"Base URI to be prepended to the token URI\"}},\"setBurner(address)\":{\"details\":\"Set new burner role\",\"params\":{\"_burner\":\"New burner address\"}},\"setContractURI(string)\":{\"details\":\"Restricted access function which updates the contract URI\",\"params\":{\"_contractURI\":\"new contract URI to set\"}},\"setDefaultRoyalty(address,uint96)\":{\"details\":\"Set the default royalties info (for all token IDs)\",\"params\":{\"_feeNumerator\":\"Fee in basis points\",\"_receiver\":\"Address of the royalties receiver\"}},\"setMinter(address)\":{\"details\":\"Set new minter role\",\"params\":{\"_minter\":\"New minter address\"}},\"setTokenRoyalty(uint256,address,uint96)\":{\"details\":\"Set royalties info for a specific token ID\",\"params\":{\"_feeNumerator\":\"Fee in basis points\",\"_receiver\":\"Address of the royalties receiver\",\"_tokenId\":\"Token\"}},\"setURI(uint256,string)\":{\"details\":\"Sets `tokenURI` as the tokenURI of `tokenId`.\",\"params\":{\"_tokenId\":\"ID of the token\",\"_tokenURI\":\"URI of the token (will be prepended by _baseURI when uri function is called)\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"transferOwnership(address)\":{\"details\":\"Restricted access function to set smart contract \\\"owner\\\"      Note: an \\\"owner\\\" set doesn't have any authority, and cannot even update \\\"owner\\\"\",\"params\":{\"_owner\":\"new \\\"owner\\\" of the smart contract\"}},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the concatenation of the `_baseURI` and the token-specific uri if the latter is set This enables the following behaviors: - if `_tokenURIs[tokenId]` is set, then the result is the concatenation   of `_baseURI` and `_tokenURIs[tokenId]` (keep in mind that `_baseURI`   is empty per default); - if `_tokenURIs[tokenId]` is NOT set then we fallback to `super.uri()`   which in most cases will contain `ERC1155._uri`; - if `_tokenURIs[tokenId]` is NOT set, and if the parents do not have a   uri value set, then the result is empty.\"}},\"stateVariables\":{\"_currentId\":{\"details\":\"Current value shows the next available token ID\"},\"burner\":{\"details\":\"Address of the burner: Can execute burning functions\"},\"minter\":{\"details\":\"Address of the minter: Can execute mint function\"}},\"title\":\"Real Estate NFT\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(uint256,address,uint256)\":{\"notice\":\"Approve a spender to transfer tokens\"},\"contractURI()\":{\"notice\":\"Contract level metadata to define collection name, description, and royalty fees.         see https://docs.opensea.io/docs/contract-level-metadata\"},\"feeDenominator()\":{\"notice\":\"The denominator of which will be used to calculate the fee (feeNumerator/feeDenominator)\"},\"isOwner(address)\":{\"notice\":\"Checks if the address supplied is an \\\"owner\\\" of the smart contract      Note: an \\\"owner\\\" doesn't have any authority on the smart contract and is \\\"nominal\\\"\"},\"name()\":{\"notice\":\"Returns the name of the RealEstateERC1155 contract\"},\"nextRealEstateId()\":{\"notice\":\"Returns the ID of the next available reNFT\"},\"symbol()\":{\"notice\":\"Returns the symbol of the RealEstateERC1155 contract\"}},\"notice\":\"Used to Tokenize and Fractionate Real EstateOnly minter can mint tokens and set token metadataNew tokens should be minted by incrementing the tokenId by 1\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/RealEstateERC1155.sol\":\"RealEstateERC1155\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/IERC1155.sol\\\";\\n\",\"keccak256\":\"0x10a6688bc4154b1b76268dbaf497bd8b24f77525ecb9cf829bd3cccec98eefc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe3deb5f3b0c9d12944f62ab680f041bbf1910d9d3ac6b545b4b8e399643c538d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../utils/Strings.sol\\\";\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with storage based token URI management.\\n * Inspired by the ERC721URIStorage extension\\n *\\n * _Available since v4.6._\\n */\\nabstract contract ERC1155URIStorage is ERC1155 {\\n    using Strings for uint256;\\n\\n    // Optional base URI\\n    string private _baseURI = \\\"\\\";\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the concatenation of the `_baseURI`\\n     * and the token-specific uri if the latter is set\\n     *\\n     * This enables the following behaviors:\\n     *\\n     * - if `_tokenURIs[tokenId]` is set, then the result is the concatenation\\n     *   of `_baseURI` and `_tokenURIs[tokenId]` (keep in mind that `_baseURI`\\n     *   is empty per default);\\n     *\\n     * - if `_tokenURIs[tokenId]` is NOT set then we fallback to `super.uri()`\\n     *   which in most cases will contain `ERC1155._uri`;\\n     *\\n     * - if `_tokenURIs[tokenId]` is NOT set, and if the parents do not have a\\n     *   uri value set, then the result is empty.\\n     */\\n    function uri(uint256 tokenId) public view virtual override returns (string memory) {\\n        string memory tokenURI = _tokenURIs[tokenId];\\n\\n        // If token URI is set, concatenate base URI and tokenURI (via abi.encodePacked).\\n        return bytes(tokenURI).length > 0 ? string(abi.encodePacked(_baseURI, tokenURI)) : super.uri(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `tokenURI` as the tokenURI of `tokenId`.\\n     */\\n    function _setURI(uint256 tokenId, string memory tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = tokenURI;\\n        emit URI(uri(tokenId), tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `baseURI` as the `_baseURI` for all tokens\\n     */\\n    function _setBaseURI(string memory baseURI) internal virtual {\\n        _baseURI = baseURI;\\n    }\\n}\\n\",\"keccak256\":\"0x4e7bcc6aa9b150e125df8afbfbca5dfb7c92fa4fb01985f2f595ce0c96153cff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x9bc4d7eb03c4e87fd5122e03cdff5f60fa360d76925980ad022b2c6fac9876f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(\\n        BitMap storage bitmap,\\n        uint256 index,\\n        bool value\\n    ) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0xbe43faa7ef7ac3c588d91a2f457fb90f4dc0cf9972b0eb8d9bdfa7d136f25df5\",\"license\":\"MIT\"},\"contracts/token/RealEstateERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport { ERC1155 } from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport { IERC1155MetadataURI } from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\r\\nimport { BitMaps } from \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\r\\nimport { Counters } from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport { RoyalERC1155 } from \\\"./RoyalERC1155.sol\\\";\\r\\n\\r\\n/// @title Real Estate NFT\\r\\n/// @author Yuri Fernandes (HorizonDAO)\\r\\n/// @notice Used to Tokenize and Fractionate Real Estate\\r\\n/// @notice Only minter can mint tokens and set token metadata\\r\\n/// @notice New tokens should be minted by incrementing the tokenId by 1\\r\\ncontract RealEstateERC1155 is RoyalERC1155 {\\r\\n    using BitMaps for BitMaps.BitMap;\\r\\n    using Counters for Counters.Counter;\\r\\n    using Strings for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    /// @dev Address of the minter: Can execute mint function\\r\\n    address public minter;\\r\\n\\r\\n    /// @dev Address of the burner: Can execute burning functions\\r\\n    address public burner;\\r\\n\\r\\n    /// @dev Current value shows the next available token ID\\r\\n    Counters.Counter private _currentId;\\r\\n\\r\\n    /// @dev Emitted when a new minter is set\\r\\n    event SetMinter(address indexed _by, address indexed _minter);\\r\\n\\r\\n    /// @dev Emitted when a new burner is set\\r\\n    event SetBurner(address indexed _by, address indexed _burner);\\r\\n\\r\\n    /// @dev Emitted when new reNFTs are minted\\r\\n    event RealEstateNFTMinted(uint256 indexed _id, address indexed _minter, address indexed _to, uint256 _amount);\\r\\n\\r\\n    /// @dev Emitted when reNFTs are burned\\r\\n    event RealEstateNFTBurned(uint256 indexed _id, address indexed _burner, uint256 _amount);\\r\\n\\r\\n    /// @dev Initialize RealEstateNFT\\r\\n    /// @param _baseUri Base URI for the offchain NFT metadata\\r\\n    /// @param _admin Address with contract administration privileges\\r\\n    /// @param _owner EOA to be used as OpenSea token admin\\r\\n    constructor(string memory _baseUri, address _admin, address _owner) RoyalERC1155(_baseUri, _admin, _owner) {}\\r\\n\\r\\n    /// @notice Returns the name of the RealEstateERC1155 contract\\r\\n    function name() external pure returns (string memory) {\\r\\n        return \\\"Real Estate NFT\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the symbol of the RealEstateERC1155 contract\\r\\n    function symbol() external pure returns (string memory) {\\r\\n        return \\\"reNFT\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the ID of the next available reNFT\\r\\n    function nextRealEstateId() external view returns (uint256) {\\r\\n        return _currentId.current();\\r\\n    }\\r\\n\\r\\n    /// @dev Set new minter role\\r\\n    /// @param _minter New minter address\\r\\n    function setMinter(address _minter) external onlyAdmin {\\r\\n        require(minter != _minter, \\\"Same minter\\\");\\r\\n        minter = _minter;\\r\\n        emit SetMinter(_msgSender(), _minter);\\r\\n    }\\r\\n\\r\\n    /// @dev Set new burner role\\r\\n    /// @param _burner New burner address\\r\\n    function setBurner(address _burner) external onlyAdmin {\\r\\n        require(burner != _burner, \\\"Same burner\\\");\\r\\n        burner = _burner;\\r\\n        emit SetBurner(_msgSender(), _burner);\\r\\n    }\\r\\n\\r\\n    /// @dev Mint new reNFT tokens\\r\\n    /// @dev Requires Minter role\\r\\n    /// @param _id Token ID\\r\\n    /// @param _to Address to transfer minted tokens\\r\\n    /// @param _amount Amount to mint\\r\\n    function mint(uint256 _id, address _to, uint256 _amount) external {\\r\\n        require(_msgSender() == minter, \\\"!minter\\\");\\r\\n        if (totalSupply(_id) == 0) {\\r\\n            require(_id == 0 || totalSupply(_id - 1) > 0, \\\"IDs should be sequential\\\");\\r\\n            _currentId.increment();\\r\\n        }\\r\\n        _mint(_to, _id, _amount, bytes(\\\"\\\"));\\r\\n        emit RealEstateNFTMinted(_id, _msgSender(), _to, _amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Burns own tokens\\r\\n    /// @dev Requires Burner role\\r\\n    /// @param _id Token ID\\r\\n    /// @param _amount Amount of tokens to burn\\r\\n    function burn(uint256 _id, uint256 _amount) external {\\r\\n        require(_msgSender() == burner, \\\"!burner\\\");\\r\\n        _burn(_msgSender(), _id, _amount);\\r\\n        emit RealEstateNFTBurned(_id, _msgSender(), _amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4ff756c472fa753138ea38d662dca4899058a75cf67219d0c59b6fc0ca700e02\",\"license\":\"MIT\"},\"contracts/token/RoyalERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport { ERC2981 } from \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\r\\nimport { ERC1155 } from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport { IERC2981 } from \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\r\\nimport { SingleApprovableERC1155 } from \\\"./SingleApprovableERC1155.sol\\\";\\r\\n\\r\\n/// @title Royal ERC1155\\r\\n/// @dev Supports EIP-2981 royalties on NFT secondary sales\\r\\n///      Supports OpenSea contract metadata royalties\\r\\n///      Introduces fake \\\"owner\\\" to support OpenSea collections\\r\\nabstract contract RoyalERC1155 is ERC2981, SingleApprovableERC1155 {\\r\\n    /// @dev OpenSea expects NFTs to be \\\"Ownable\\\", that is having an \\\"owner\\\",\\r\\n    ///      we introduce a fake \\\"owner\\\" here with no authority\\r\\n    address public owner;\\r\\n\\r\\n    /// @dev Address of the admin: Can set a new admin among other privileged roles\\r\\n    address public admin;\\r\\n\\r\\n    /// @notice Contract level metadata to define collection name, description, and royalty fees.\\r\\n    ///         see https://docs.opensea.io/docs/contract-level-metadata\\r\\n    /// @dev Should be overwritten by inheriting contracts. By default only includes royalty information\\r\\n    string public contractURI;\\r\\n\\r\\n    /// @dev Fired in setContractURI()\\r\\n    /// @param _by an address which executed update\\r\\n    /// @param _value new contractURI value\\r\\n    event ContractURIUpdated(address indexed _by, string _value);\\r\\n\\r\\n    /// @dev Fired in setOwner()\\r\\n    /// @param _previousOwner previous \\\"owner\\\" address\\r\\n    /// @param _newOwner new \\\"owner\\\" address\\r\\n    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\\r\\n\\r\\n    /// @dev Fired in setDefaultRoyalty()\\r\\n    /// @param _by Address that called the function\\r\\n    /// @param _receiver Royalties receiver address\\r\\n    /// @param _feeNumerator Fee in basis points\\r\\n    event SetDefaultRoyalties(address indexed _by, address indexed _receiver, uint96 _feeNumerator);\\r\\n\\r\\n    /// @dev Fired in setTokenRoyalty()\\r\\n    /// @param _by Address that called the function\\r\\n    /// @param _tokenId Token ID which had the royalties set\\r\\n    /// @param _receiver Royalties receiver address\\r\\n    /// @param _feeNumerator Fee in basis points\\r\\n    event SetTokenRoyalty(\\r\\n        address indexed _by,\\r\\n        uint256 indexed _tokenId,\\r\\n        address indexed _receiver,\\r\\n        uint96 _feeNumerator\\r\\n    );\\r\\n\\r\\n    /// @dev Emitted when a new admin is set\\r\\n    event NewAdmin(address indexed _admin);\\r\\n\\r\\n    /// @dev Checks if msg.sender is the admin\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == admin, \\\"!admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @dev Initializes RoyalERC1155 contract\\r\\n    /// @param uri_ Token URI\\r\\n    /// @param _admin Address of the admin\\r\\n    /// @param _owner Address with permissions on OpenSea\\r\\n    constructor(string memory uri_, address _admin, address _owner) ERC1155(uri_) {\\r\\n        // initialize owner as the \\\"_owner\\\", necessary for OpenSea\\r\\n        _transferOwnership(_owner);\\r\\n\\r\\n        // set contract admin\\r\\n        admin = _admin;\\r\\n        emit NewAdmin(_admin);\\r\\n    }\\r\\n\\r\\n    /// @dev Set new admin role\\r\\n    /// @param _admin New admin address\\r\\n    function setAdmin(address _admin) external onlyAdmin {\\r\\n        require(admin != _admin, \\\"admin == _admin\\\");\\r\\n        admin = _admin;\\r\\n        emit NewAdmin(_admin);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if the address supplied is an \\\"owner\\\" of the smart contract\\r\\n    ///      Note: an \\\"owner\\\" doesn't have any authority on the smart contract and is \\\"nominal\\\"\\r\\n    /// @return true if the caller is the current owner.\\r\\n    function isOwner(address _addr) public view virtual returns (bool) {\\r\\n        // just evaluate and return the result\\r\\n        return _addr == owner;\\r\\n    }\\r\\n\\r\\n    /// @dev Set the default royalties info (for all token IDs)\\r\\n    /// @param _receiver Address of the royalties receiver\\r\\n    /// @param _feeNumerator Fee in basis points\\r\\n    function setDefaultRoyalty(address _receiver, uint96 _feeNumerator) external onlyAdmin {\\r\\n        _setDefaultRoyalty(_receiver, _feeNumerator);\\r\\n        emit SetDefaultRoyalties(_msgSender(), _receiver, _feeNumerator);\\r\\n    }\\r\\n\\r\\n    /// @dev Set royalties info for a specific token ID\\r\\n    /// @param _tokenId Token\\r\\n    /// @param _receiver Address of the royalties receiver\\r\\n    /// @param _feeNumerator Fee in basis points\\r\\n    function setTokenRoyalty(uint256 _tokenId, address _receiver, uint96 _feeNumerator) external onlyAdmin {\\r\\n        _setTokenRoyalty(_tokenId, _receiver, _feeNumerator);\\r\\n        emit SetTokenRoyalty(_msgSender(), _tokenId, _receiver, _feeNumerator);\\r\\n    }\\r\\n\\r\\n    /// @dev Restricted access function which updates the contract URI\\r\\n    /// @param _contractURI new contract URI to set\\r\\n    function setContractURI(string memory _contractURI) external virtual onlyAdmin {\\r\\n        // update the contract URI\\r\\n        contractURI = _contractURI;\\r\\n\\r\\n        // emit an event first\\r\\n        emit ContractURIUpdated(msg.sender, _contractURI);\\r\\n    }\\r\\n\\r\\n    /// @dev Sets `baseURI` as the `_baseURI` for all tokens\\r\\n    /// @param _baseURI Base URI to be prepended to the token URI\\r\\n    function setBaseURI(string memory _baseURI) external virtual onlyAdmin {\\r\\n        _setBaseURI(_baseURI);\\r\\n    }\\r\\n\\r\\n    /// @dev Sets `tokenURI` as the tokenURI of `tokenId`.\\r\\n    /// @param _tokenId ID of the token\\r\\n    /// @param _tokenURI URI of the token (will be prepended by _baseURI when uri function is called)\\r\\n    function setURI(uint256 _tokenId, string memory _tokenURI) external virtual onlyAdmin {\\r\\n        _setURI(_tokenId, _tokenURI);\\r\\n    }\\r\\n\\r\\n    /// @dev Restricted access function to set smart contract \\\"owner\\\"\\r\\n    ///      Note: an \\\"owner\\\" set doesn't have any authority, and cannot even update \\\"owner\\\"\\r\\n    /// @param _owner new \\\"owner\\\" of the smart contract\\r\\n    function transferOwnership(address _owner) external virtual onlyAdmin {\\r\\n        _transferOwnership(_owner);\\r\\n    }\\r\\n\\r\\n    /// @notice The denominator of which will be used to calculate the fee (feeNumerator/feeDenominator)\\r\\n    function feeDenominator() external pure returns (uint256) {\\r\\n        return _feeDenominator();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155, ERC2981) returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(IERC2981).interfaceId ||\\r\\n            ERC1155.supportsInterface(interfaceId) ||\\r\\n            ERC2981.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /// @dev Set the smart contract owner\\r\\n    /// @param _owner new \\\"owner\\\" of the smart contract\\r\\n    function _transferOwnership(address _owner) internal {\\r\\n        // update \\\"owner\\\"\\r\\n        address oldOwner = owner;\\r\\n        owner = _owner;\\r\\n\\r\\n        // emit an event first - to log both old and new values\\r\\n        emit OwnershipTransferred(oldOwner, _owner);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7f30e4fd31a9007bd175fe929ee335ab64852c8e481db78a4615f851589c0e2e\",\"license\":\"MIT\"},\"contracts/token/SingleApprovableERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { ERC1155 } from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport { ERC1155Supply } from \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\\";\\nimport { ERC1155URIStorage } from \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol\\\";\\nimport { IERC1155 } from \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\n\\n/// @title Siple Approvable ERC1155\\n/// @author Yuri Fernandes (HorizonDAO)\\n/// @dev Allows the approval for a single collection and a certain amount of tokens\\n///     to be transferred with the allowed party\\nabstract contract SingleApprovableERC1155 is ERC1155URIStorage, ERC1155Supply {\\n    /// @dev mapping (collectionId => owner => spender => amount)\\n    mapping(uint256 => mapping(address => mapping(address => uint256))) private _allowances;\\n\\n    /// @dev Emitted when allowance is given\\n    event Approval(uint256 indexed _id, address indexed _owner, address indexed _spender, uint256 _amount);\\n\\n    /// @notice Approve a spender to transfer tokens\\n    /// @param _tokenId Collection ID\\n    /// @param _spender Spender address\\n    /// @param _amount Amount allowed\\n    function approve(uint256 _tokenId, address _spender, uint256 _amount) public returns (bool) {\\n        address owner_ = _msgSender();\\n        _approve(_tokenId, owner_, _spender, _amount);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC1155\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes memory _data\\n    ) public override {\\n        if (_from != _msgSender() && !isApprovedForAll(_from, _msgSender())) {\\n            require(_allowances[_id][_from][_msgSender()] >= _amount, \\\"Not authorized\\\");\\n            _allowances[_id][_from][_msgSender()] -= _amount;\\n        }\\n        _safeTransferFrom(_from, _to, _id, _amount, _data);\\n    }\\n\\n    /// @inheritdoc IERC1155\\n    function safeBatchTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) public virtual override {\\n        if (_from != _msgSender() && !isApprovedForAll(_from, _msgSender())) {\\n            for (uint256 i = 0; i < _ids.length; i++) {\\n                require(_allowances[_ids[i]][_from][_msgSender()] >= _amounts[i], \\\"Not authorized\\\");\\n                _allowances[_ids[i]][_from][_msgSender()] -= _amounts[i];\\n            }\\n        }\\n        _safeBatchTransferFrom(_from, _to, _ids, _amounts, _data);\\n    }\\n\\n    /// @inheritdoc ERC1155URIStorage\\n    function uri(uint256 _tokenId) public view virtual override(ERC1155, ERC1155URIStorage) returns (string memory) {\\n        return ERC1155URIStorage.uri(_tokenId);\\n    }\\n\\n    /// @dev See {approve} notice\\n    /// @param _id Collection ID\\n    /// @param _spender Spender address\\n    /// @param _amount Amount allowed\\n    function _approve(uint256 _id, address _owner, address _spender, uint256 _amount) internal virtual {\\n        require(_owner != address(0), \\\"Approve from the zero address\\\");\\n        require(_spender != address(0), \\\"Approve to the zero address\\\");\\n\\n        _allowances[_id][_owner][_spender] = _amount;\\n        emit Approval(_id, _owner, _spender, _amount);\\n    }\\n\\n    /// @inheritdoc ERC1155Supply\\n    function _beforeTokenTransfer(\\n        address _operator,\\n        address _from,\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) internal virtual override(ERC1155, ERC1155Supply) {\\n        ERC1155Supply._beforeTokenTransfer(_operator, _from, _to, _ids, _amounts, _data);\\n    }\\n}\\n\",\"keccak256\":\"0x794a312e2e070efc333fcdd5f2f74b4f138de2b734e7f9d21ea3b5376b3c3276\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052600060809081526005906200001a9082620001c2565b503480156200002857600080fd5b50604051620030e7380380620030e78339810160408190526200004b91620002ab565b828282826200005a81620000b9565b506200006681620000cb565b600a80546001600160a01b0319166001600160a01b0384169081179091556040517f71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c90600090a2505050505050620003a5565b6004620000c78282620001c2565b5050565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200014857607f821691505b6020821081036200016957634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001bd57600081815260208120601f850160051c81016020861015620001985750805b601f850160051c820191505b81811015620001b957828155600101620001a4565b5050505b505050565b81516001600160401b03811115620001de57620001de6200011d565b620001f681620001ef845462000133565b846200016f565b602080601f8311600181146200022e5760008415620002155750858301515b600019600386901b1c1916600185901b178555620001b9565b600085815260208120601f198616915b828110156200025f578886015182559484019460019091019084016200023e565b50858210156200027e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80516001600160a01b0381168114620002a657600080fd5b919050565b600080600060608486031215620002c157600080fd5b83516001600160401b0380821115620002d957600080fd5b818601915086601f830112620002ee57600080fd5b8151818111156200030357620003036200011d565b604051601f8201601f19908116603f011681019083821181831017156200032e576200032e6200011d565b816040528281526020935089848487010111156200034b57600080fd5b600091505b828210156200036f578482018401518183018501529083019062000350565b60008484830101528097505050506200038a8187016200028e565b935050506200039c604085016200028e565b90509250925092565b612d3280620003b56000396000f3fe608060405234801561001057600080fd5b50600436106101fa5760003560e01c8063704b6c021161011a578063a996d6ce116100ad578063e985e9c51161007c578063e985e9c5146104b5578063f242432a146104f1578063f2fde38b14610504578063f851a44014610517578063fca3b5aa1461052a57600080fd5b8063a996d6ce14610467578063b390c0ab1461047a578063bd85b0391461048d578063e8a3d485146104ad57600080fd5b80638da5cb5b116100e95780638da5cb5b1461040d578063938e3d7b1461042057806395d89b4114610433578063a22cb4651461045457600080fd5b8063704b6c02146103c1578063836a1040146103d4578063862440e2146103e75780638cb0a511146103fa57600080fd5b806327810b6e116101925780634e1273f4116101615780634e1273f4146103595780634f558e791461037957806355f804b31461039b5780635944c753146103ae57600080fd5b806327810b6e146102df5780632a55205a146102f25780632eb2c2d6146103245780632f54bf6e1461033757600080fd5b806307546172116101ce57806307546172146102915780630e89341c146102bc5780631579c133146102cf578063180b0d7e146102d757600080fd5b8062fdd58e146101ff57806301ffc9a71461022557806304634d8d1461024857806306fdde031461025d575b600080fd5b61021261020d366004612192565b61053d565b6040519081526020015b60405180910390f35b6102386102333660046121d2565b6105d8565b604051901515815260200161021c565b61025b610256366004612206565b61060c565b005b60408051808201909152600f81526e1499585b08115cdd185d1948139195608a1b60208201525b60405161021c9190612289565b600c546102a4906001600160a01b031681565b6040516001600160a01b03909116815260200161021c565b6102846102ca36600461229c565b61068e565b610212610699565b612710610212565b600d546102a4906001600160a01b031681565b6103056103003660046122b5565b6106a9565b604080516001600160a01b03909316835260208301919091520161021c565b61025b610332366004612423565b610755565b6102386103453660046124cd565b6009546001600160a01b0391821691161490565b61036c6103673660046124e8565b610927565b60405161021c91906125ee565b61023861038736600461229c565b600090815260076020526040902054151590565b61025b6103a9366004612601565b610a51565b61025b6103bc36600461263e565b610a87565b61025b6103cf3660046124cd565b610b0d565b61025b6103e236600461267a565b610bd0565b61025b6103f53660046126af565b610d08565b61023861040836600461267a565b610d40565b6009546102a4906001600160a01b031681565b61025b61042e366004612601565b610d5a565b6040805180820190915260058152641c9953919560da1b6020820152610284565b61025b6104623660046126ec565b610dd5565b61025b6104753660046124cd565b610de0565b61025b6104883660046122b5565b610ea1565b61021261049b36600461229c565b60009081526007602052604090205490565b610284610f2d565b6102386104c3366004612728565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205460ff1690565b61025b6104ff366004612752565b610fbb565b61025b6105123660046124cd565b611098565b600a546102a4906001600160a01b031681565b61025b6105383660046124cd565b6110cb565b60006001600160a01b0383166105ad5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060008181526002602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b0319821663152a902d60e11b14806105fd57506105fd8261118c565b806105d257506105d2826111c7565b600a546001600160a01b031633146106365760405162461bcd60e51b81526004016105a4906127b7565b61064082826111fc565b6040516001600160601b03821681526001600160a01b0383169033907f88a2d4bd6249f327d8b3cf28358e7d2bfe4a9701adcad78dfd54f27f2bb4d709906020015b60405180910390a35050565b60606105d2826112b6565b60006106a4600e5490565b905090565b60008281526001602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b031692820192909252829161071e5750604080518082019091526000546001600160a01b0381168252600160a01b90046001600160601b031660208201525b60208101516000906127109061073d906001600160601b0316876127ed565b6107479190612804565b915196919550909350505050565b6001600160a01b0385163314801590610775575061077385336104c3565b155b156109135760005b83518110156109115782818151811061079857610798612826565b6020026020010151600860008684815181106107b6576107b6612826565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060006107f83390565b6001600160a01b03166001600160a01b031681526020019081526020016000205410156108585760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b60448201526064016105a4565b82818151811061086a5761086a612826565b60200260200101516008600086848151811061088857610888612826565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060006108ca3390565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546108f9919061283c565b909155508190506109098161284f565b91505061077d565b505b6109208585858585611396565b5050505050565b6060815183511461098c5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016105a4565b6000835167ffffffffffffffff8111156109a8576109a86122d7565b6040519080825280602002602001820160405280156109d1578160200160208202803683370190505b50905060005b8451811015610a4957610a1c8582815181106109f5576109f5612826565b6020026020010151858381518110610a0f57610a0f612826565b602002602001015161053d565b828281518110610a2e57610a2e612826565b6020908102919091010152610a428161284f565b90506109d7565b509392505050565b600a546001600160a01b03163314610a7b5760405162461bcd60e51b81526004016105a4906127b7565b610a8481611584565b50565b600a546001600160a01b03163314610ab15760405162461bcd60e51b81526004016105a4906127b7565b610abc838383611590565b6040516001600160601b03821681526001600160a01b03831690849033907f367d8e97df7923e8e2a3c37798fce0d36df7027840432cbeb96cf571afa50280906020015b60405180910390a4505050565b600a546001600160a01b03163314610b375760405162461bcd60e51b81526004016105a4906127b7565b600a546001600160a01b03808316911603610b865760405162461bcd60e51b815260206004820152600f60248201526e30b236b4b7101e9e902fb0b236b4b760891b60448201526064016105a4565b600a80546001600160a01b0319166001600160a01b0383169081179091556040517f71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c90600090a250565b600c546001600160a01b0316336001600160a01b031614610c1d5760405162461bcd60e51b815260206004820152600760248201526610b6b4b73a32b960c91b60448201526064016105a4565b600083815260076020526040902054600003610ca757821580610c4d57506000610c4b61049b60018661283c565b115b610c995760405162461bcd60e51b815260206004820152601860248201527f4944732073686f756c642062652073657175656e7469616c000000000000000060448201526064016105a4565b610ca7600e80546001019055565b610cc28284836040518060200160405280600081525061165b565b6001600160a01b038216336001600160a01b0316847fd221ed6d0b64f2e9f972fbc48b2ce5210f880f75f0cd09111b73eca6937827eb84604051610b0091815260200190565b600a546001600160a01b03163314610d325760405162461bcd60e51b81526004016105a4906127b7565b610d3c8282611780565b5050565b600033610d4f858286866117dd565b506001949350505050565b600a546001600160a01b03163314610d845760405162461bcd60e51b81526004016105a4906127b7565b600b610d9082826128ed565b50336001600160a01b03167f1ca91f64ead03abb06ea28975dfbf18044ac06f9fa1cb62a54ccc905df1028ed82604051610dca9190612289565b60405180910390a250565b610d3c3383836118f8565b600a546001600160a01b03163314610e0a5760405162461bcd60e51b81526004016105a4906127b7565b600d546001600160a01b03808316911603610e555760405162461bcd60e51b815260206004820152600b60248201526a29b0b6b290313ab93732b960a91b60448201526064016105a4565b600d80546001600160a01b0319166001600160a01b03831690811790915560405133907f0258795f167353770fc90e124d23e59bea1e1a7005a96e27c9bcadedf7775f7190600090a350565b600d546001600160a01b0316336001600160a01b031614610eee5760405162461bcd60e51b815260206004820152600760248201526610b13ab93732b960c91b60448201526064016105a4565b610ef93383836119d8565b604051818152339083907ff0b3d7246d5788c3201f9da8a6cfcc9377e1864279750d9c959b87a6660f81cd90602001610682565b600b8054610f3a90612868565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6690612868565b8015610fb35780601f10610f8857610100808354040283529160200191610fb3565b820191906000526020600020905b815481529060010190602001808311610f9657829003601f168201915b505050505081565b6001600160a01b0385163314801590610fdb5750610fd985336104c3565b155b1561108b5760008381526008602090815260408083206001600160a01b0389168452825280832033845290915290205482111561104b5760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b60448201526064016105a4565b60008381526008602090815260408083206001600160a01b038916845282528083203384529091528120805484929061108590849061283c565b90915550505b6109208585858585611b6c565b600a546001600160a01b031633146110c25760405162461bcd60e51b81526004016105a4906127b7565b610a8481611ca8565b600a546001600160a01b031633146110f55760405162461bcd60e51b81526004016105a4906127b7565b600c546001600160a01b038083169116036111405760405162461bcd60e51b815260206004820152600b60248201526a29b0b6b29036b4b73a32b960a91b60448201526064016105a4565b600c80546001600160a01b0319166001600160a01b03831690811790915560405133907fe490d3138e32f1f66ef3971a3c73c7f7704ba0c1d1000f1e2c3df6fc0376610b90600090a350565b60006001600160e01b03198216636cdb3d1360e11b14806105fd57506001600160e01b031982166303a24d0760e21b14806105d257506105d2825b60006001600160e01b0319821663152a902d60e11b14806105d257506301ffc9a760e01b6001600160e01b03198316146105d2565b6127106001600160601b03821611156112275760405162461bcd60e51b81526004016105a4906129ad565b6001600160a01b03821661127d5760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c69642072656365697665720000000000000060448201526064016105a4565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600055565b6000818152600660205260408120805460609291906112d490612868565b80601f016020809104026020016040519081016040528092919081815260200182805461130090612868565b801561134d5780601f106113225761010080835404028352916020019161134d565b820191906000526020600020905b81548152906001019060200180831161133057829003601f168201915b50505050509050600081511161136b5761136683611cfa565b61138f565b60058160405160200161137f9291906129f7565b6040516020818303038152906040525b9392505050565b81518351146113f85760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016105a4565b6001600160a01b03841661141e5760405162461bcd60e51b81526004016105a490612a7e565b3361142d818787878787611d8e565b60005b845181101561151657600085828151811061144d5761144d612826565b60200260200101519050600085838151811061146b5761146b612826565b60209081029190910181015160008481526002835260408082206001600160a01b038e1683529093529190912054909150818110156114bc5760405162461bcd60e51b81526004016105a490612ac3565b60008381526002602090815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906114fb908490612b0d565b925050819055505050508061150f9061284f565b9050611430565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611566929190612b20565b60405180910390a461157c818787878787611d9c565b505050505050565b6005610d3c82826128ed565b6127106001600160601b03821611156115bb5760405162461bcd60e51b81526004016105a4906129ad565b6001600160a01b0382166116115760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d6574657273000000000060448201526064016105a4565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752600190529190942093519051909116600160a01b029116179055565b6001600160a01b0384166116bb5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016105a4565b3360006116c785611ef7565b905060006116d485611ef7565b90506116e583600089858589611d8e565b60008681526002602090815260408083206001600160a01b038b16845290915281208054879290611717908490612b0d565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461177783600089898989611f42565b50505050505050565b600082815260066020526040902061179882826128ed565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b6117c48461068e565b6040516117d19190612289565b60405180910390a25050565b6001600160a01b0383166118335760405162461bcd60e51b815260206004820152601d60248201527f417070726f76652066726f6d20746865207a65726f206164647265737300000060448201526064016105a4565b6001600160a01b0382166118895760405162461bcd60e51b815260206004820152601b60248201527f417070726f766520746f20746865207a65726f2061646472657373000000000060448201526064016105a4565b60008481526008602090815260408083206001600160a01b03878116808652918452828520908716808652908452938290208590559051848152909187917f69e4aaf23f9318cf40839ac20453d8fbedaac2955eb08a27ae5189cc71925716910160405180910390a450505050565b816001600160a01b0316836001600160a01b03160361196b5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016105a4565b6001600160a01b03838116600081815260036020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038316611a3a5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016105a4565b336000611a4684611ef7565b90506000611a5384611ef7565b9050611a7383876000858560405180602001604052806000815250611d8e565b60008581526002602090815260408083206001600160a01b038a16845290915290205484811015611af25760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016105a4565b60008681526002602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4604080516020810190915260009052611777565b6001600160a01b038416611b925760405162461bcd60e51b81526004016105a490612a7e565b336000611b9e85611ef7565b90506000611bab85611ef7565b9050611bbb838989858589611d8e565b60008681526002602090815260408083206001600160a01b038c16845290915290205485811015611bfe5760405162461bcd60e51b81526004016105a490612ac3565b60008781526002602090815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290611c3d908490612b0d565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611c9d848a8a8a8a8a611f42565b505050505050505050565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606060048054611d0990612868565b80601f0160208091040260200160405190810160405280929190818152602001828054611d3590612868565b8015611d825780601f10611d5757610100808354040283529160200191611d82565b820191906000526020600020905b815481529060010190602001808311611d6557829003601f168201915b50505050509050919050565b61157c868686868686611ffd565b6001600160a01b0384163b1561157c5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611de09089908990889088908890600401612b4e565b6020604051808303816000875af1925050508015611e1b575060408051601f3d908101601f19168201909252611e1891810190612bac565b60015b611ec757611e27612bc9565b806308c379a003611e605750611e3b612be5565b80611e465750611e62565b8060405162461bcd60e51b81526004016105a49190612289565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016105a4565b6001600160e01b0319811663bc197c8160e01b146117775760405162461bcd60e51b81526004016105a490612c6f565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611f3157611f31612826565b602090810291909101015292915050565b6001600160a01b0384163b1561157c5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611f869089908990889088908890600401612cb7565b6020604051808303816000875af1925050508015611fc1575060408051601f3d908101601f19168201909252611fbe91810190612bac565b60015b611fcd57611e27612bc9565b6001600160e01b0319811663f23a6e6160e01b146117775760405162461bcd60e51b81526004016105a490612c6f565b6001600160a01b0385166120845760005b83518110156120825782818151811061202957612029612826565b60200260200101516007600086848151811061204757612047612826565b60200260200101518152602001908152602001600020600082825461206c9190612b0d565b9091555061207b90508161284f565b905061200e565b505b6001600160a01b03841661157c5760005b83518110156117775760008482815181106120b2576120b2612826565b6020026020010151905060008483815181106120d0576120d0612826565b60200260200101519050600060076000848152602001908152602001600020549050818110156121535760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f74604482015267616c537570706c7960c01b60648201526084016105a4565b6000928352600760205260409092209103905561216f8161284f565b9050612095565b80356001600160a01b038116811461218d57600080fd5b919050565b600080604083850312156121a557600080fd5b6121ae83612176565b946020939093013593505050565b6001600160e01b031981168114610a8457600080fd5b6000602082840312156121e457600080fd5b813561138f816121bc565b80356001600160601b038116811461218d57600080fd5b6000806040838503121561221957600080fd5b61222283612176565b9150612230602084016121ef565b90509250929050565b60005b8381101561225457818101518382015260200161223c565b50506000910152565b60008151808452612275816020860160208601612239565b601f01601f19169290920160200192915050565b60208152600061138f602083018461225d565b6000602082840312156122ae57600080fd5b5035919050565b600080604083850312156122c857600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715612313576123136122d7565b6040525050565b600067ffffffffffffffff821115612334576123346122d7565b5060051b60200190565b600082601f83011261234f57600080fd5b8135602061235c8261231a565b60405161236982826122ed565b83815260059390931b850182019282810191508684111561238957600080fd5b8286015b848110156123a4578035835291830191830161238d565b509695505050505050565b600082601f8301126123c057600080fd5b813567ffffffffffffffff8111156123da576123da6122d7565b6040516123f1601f8301601f1916602001826122ed565b81815284602083860101111561240657600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561243b57600080fd5b61244486612176565b945061245260208701612176565b9350604086013567ffffffffffffffff8082111561246f57600080fd5b61247b89838a0161233e565b9450606088013591508082111561249157600080fd5b61249d89838a0161233e565b935060808801359150808211156124b357600080fd5b506124c0888289016123af565b9150509295509295909350565b6000602082840312156124df57600080fd5b61138f82612176565b600080604083850312156124fb57600080fd5b823567ffffffffffffffff8082111561251357600080fd5b818501915085601f83011261252757600080fd5b813560206125348261231a565b60405161254182826122ed565b83815260059390931b850182019282810191508984111561256157600080fd5b948201945b838610156125865761257786612176565b82529482019490820190612566565b9650508601359250508082111561259c57600080fd5b506125a98582860161233e565b9150509250929050565b600081518084526020808501945080840160005b838110156125e3578151875295820195908201906001016125c7565b509495945050505050565b60208152600061138f60208301846125b3565b60006020828403121561261357600080fd5b813567ffffffffffffffff81111561262a57600080fd5b612636848285016123af565b949350505050565b60008060006060848603121561265357600080fd5b8335925061266360208501612176565b9150612671604085016121ef565b90509250925092565b60008060006060848603121561268f57600080fd5b8335925061269f60208501612176565b9150604084013590509250925092565b600080604083850312156126c257600080fd5b82359150602083013567ffffffffffffffff8111156126e057600080fd5b6125a9858286016123af565b600080604083850312156126ff57600080fd5b61270883612176565b91506020830135801515811461271d57600080fd5b809150509250929050565b6000806040838503121561273b57600080fd5b61274483612176565b915061223060208401612176565b600080600080600060a0868803121561276a57600080fd5b61277386612176565b945061278160208701612176565b93506040860135925060608601359150608086013567ffffffffffffffff8111156127ab57600080fd5b6124c0888289016123af565b60208082526006908201526510b0b236b4b760d11b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176105d2576105d26127d7565b60008261282157634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b818103818111156105d2576105d26127d7565b600060018201612861576128616127d7565b5060010190565b600181811c9082168061287c57607f821691505b60208210810361289c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156128e857600081815260208120601f850160051c810160208610156128c95750805b601f850160051c820191505b8181101561157c578281556001016128d5565b505050565b815167ffffffffffffffff811115612907576129076122d7565b61291b816129158454612868565b846128a2565b602080601f83116001811461295057600084156129385750858301515b600019600386901b1c1916600185901b17855561157c565b600085815260208120601f198616915b8281101561297f57888601518255948401946001909101908401612960565b508582101561299d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252602a908201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646040820152692073616c65507269636560b01b606082015260800190565b6000808454612a0581612868565b60018281168015612a1d5760018114612a3257612a61565b60ff1984168752821515830287019450612a61565b8860005260208060002060005b85811015612a585781548a820152908401908201612a3f565b50505082870194505b505050508351612a75818360208801612239565b01949350505050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b808201808211156105d2576105d26127d7565b604081526000612b3360408301856125b3565b8281036020840152612b4581856125b3565b95945050505050565b6001600160a01b0386811682528516602082015260a060408201819052600090612b7a908301866125b3565b8281036060840152612b8c81866125b3565b90508281036080840152612ba0818561225d565b98975050505050505050565b600060208284031215612bbe57600080fd5b815161138f816121bc565b600060033d1115612be25760046000803e5060005160e01c5b90565b600060443d1015612bf35790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715612c2357505050505090565b8285019150815181811115612c3b5750505050505090565b843d8701016020828501011115612c555750505050505090565b612c64602082860101876122ed565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612cf19083018461225d565b97965050505050505056fea2646970667358221220c4dd483265ff015366a511904b36345acc2703e45cc949550a4b18de73d3d4d964736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101fa5760003560e01c8063704b6c021161011a578063a996d6ce116100ad578063e985e9c51161007c578063e985e9c5146104b5578063f242432a146104f1578063f2fde38b14610504578063f851a44014610517578063fca3b5aa1461052a57600080fd5b8063a996d6ce14610467578063b390c0ab1461047a578063bd85b0391461048d578063e8a3d485146104ad57600080fd5b80638da5cb5b116100e95780638da5cb5b1461040d578063938e3d7b1461042057806395d89b4114610433578063a22cb4651461045457600080fd5b8063704b6c02146103c1578063836a1040146103d4578063862440e2146103e75780638cb0a511146103fa57600080fd5b806327810b6e116101925780634e1273f4116101615780634e1273f4146103595780634f558e791461037957806355f804b31461039b5780635944c753146103ae57600080fd5b806327810b6e146102df5780632a55205a146102f25780632eb2c2d6146103245780632f54bf6e1461033757600080fd5b806307546172116101ce57806307546172146102915780630e89341c146102bc5780631579c133146102cf578063180b0d7e146102d757600080fd5b8062fdd58e146101ff57806301ffc9a71461022557806304634d8d1461024857806306fdde031461025d575b600080fd5b61021261020d366004612192565b61053d565b6040519081526020015b60405180910390f35b6102386102333660046121d2565b6105d8565b604051901515815260200161021c565b61025b610256366004612206565b61060c565b005b60408051808201909152600f81526e1499585b08115cdd185d1948139195608a1b60208201525b60405161021c9190612289565b600c546102a4906001600160a01b031681565b6040516001600160a01b03909116815260200161021c565b6102846102ca36600461229c565b61068e565b610212610699565b612710610212565b600d546102a4906001600160a01b031681565b6103056103003660046122b5565b6106a9565b604080516001600160a01b03909316835260208301919091520161021c565b61025b610332366004612423565b610755565b6102386103453660046124cd565b6009546001600160a01b0391821691161490565b61036c6103673660046124e8565b610927565b60405161021c91906125ee565b61023861038736600461229c565b600090815260076020526040902054151590565b61025b6103a9366004612601565b610a51565b61025b6103bc36600461263e565b610a87565b61025b6103cf3660046124cd565b610b0d565b61025b6103e236600461267a565b610bd0565b61025b6103f53660046126af565b610d08565b61023861040836600461267a565b610d40565b6009546102a4906001600160a01b031681565b61025b61042e366004612601565b610d5a565b6040805180820190915260058152641c9953919560da1b6020820152610284565b61025b6104623660046126ec565b610dd5565b61025b6104753660046124cd565b610de0565b61025b6104883660046122b5565b610ea1565b61021261049b36600461229c565b60009081526007602052604090205490565b610284610f2d565b6102386104c3366004612728565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205460ff1690565b61025b6104ff366004612752565b610fbb565b61025b6105123660046124cd565b611098565b600a546102a4906001600160a01b031681565b61025b6105383660046124cd565b6110cb565b60006001600160a01b0383166105ad5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060008181526002602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b0319821663152a902d60e11b14806105fd57506105fd8261118c565b806105d257506105d2826111c7565b600a546001600160a01b031633146106365760405162461bcd60e51b81526004016105a4906127b7565b61064082826111fc565b6040516001600160601b03821681526001600160a01b0383169033907f88a2d4bd6249f327d8b3cf28358e7d2bfe4a9701adcad78dfd54f27f2bb4d709906020015b60405180910390a35050565b60606105d2826112b6565b60006106a4600e5490565b905090565b60008281526001602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b031692820192909252829161071e5750604080518082019091526000546001600160a01b0381168252600160a01b90046001600160601b031660208201525b60208101516000906127109061073d906001600160601b0316876127ed565b6107479190612804565b915196919550909350505050565b6001600160a01b0385163314801590610775575061077385336104c3565b155b156109135760005b83518110156109115782818151811061079857610798612826565b6020026020010151600860008684815181106107b6576107b6612826565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060006107f83390565b6001600160a01b03166001600160a01b031681526020019081526020016000205410156108585760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b60448201526064016105a4565b82818151811061086a5761086a612826565b60200260200101516008600086848151811061088857610888612826565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060006108ca3390565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546108f9919061283c565b909155508190506109098161284f565b91505061077d565b505b6109208585858585611396565b5050505050565b6060815183511461098c5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016105a4565b6000835167ffffffffffffffff8111156109a8576109a86122d7565b6040519080825280602002602001820160405280156109d1578160200160208202803683370190505b50905060005b8451811015610a4957610a1c8582815181106109f5576109f5612826565b6020026020010151858381518110610a0f57610a0f612826565b602002602001015161053d565b828281518110610a2e57610a2e612826565b6020908102919091010152610a428161284f565b90506109d7565b509392505050565b600a546001600160a01b03163314610a7b5760405162461bcd60e51b81526004016105a4906127b7565b610a8481611584565b50565b600a546001600160a01b03163314610ab15760405162461bcd60e51b81526004016105a4906127b7565b610abc838383611590565b6040516001600160601b03821681526001600160a01b03831690849033907f367d8e97df7923e8e2a3c37798fce0d36df7027840432cbeb96cf571afa50280906020015b60405180910390a4505050565b600a546001600160a01b03163314610b375760405162461bcd60e51b81526004016105a4906127b7565b600a546001600160a01b03808316911603610b865760405162461bcd60e51b815260206004820152600f60248201526e30b236b4b7101e9e902fb0b236b4b760891b60448201526064016105a4565b600a80546001600160a01b0319166001600160a01b0383169081179091556040517f71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c90600090a250565b600c546001600160a01b0316336001600160a01b031614610c1d5760405162461bcd60e51b815260206004820152600760248201526610b6b4b73a32b960c91b60448201526064016105a4565b600083815260076020526040902054600003610ca757821580610c4d57506000610c4b61049b60018661283c565b115b610c995760405162461bcd60e51b815260206004820152601860248201527f4944732073686f756c642062652073657175656e7469616c000000000000000060448201526064016105a4565b610ca7600e80546001019055565b610cc28284836040518060200160405280600081525061165b565b6001600160a01b038216336001600160a01b0316847fd221ed6d0b64f2e9f972fbc48b2ce5210f880f75f0cd09111b73eca6937827eb84604051610b0091815260200190565b600a546001600160a01b03163314610d325760405162461bcd60e51b81526004016105a4906127b7565b610d3c8282611780565b5050565b600033610d4f858286866117dd565b506001949350505050565b600a546001600160a01b03163314610d845760405162461bcd60e51b81526004016105a4906127b7565b600b610d9082826128ed565b50336001600160a01b03167f1ca91f64ead03abb06ea28975dfbf18044ac06f9fa1cb62a54ccc905df1028ed82604051610dca9190612289565b60405180910390a250565b610d3c3383836118f8565b600a546001600160a01b03163314610e0a5760405162461bcd60e51b81526004016105a4906127b7565b600d546001600160a01b03808316911603610e555760405162461bcd60e51b815260206004820152600b60248201526a29b0b6b290313ab93732b960a91b60448201526064016105a4565b600d80546001600160a01b0319166001600160a01b03831690811790915560405133907f0258795f167353770fc90e124d23e59bea1e1a7005a96e27c9bcadedf7775f7190600090a350565b600d546001600160a01b0316336001600160a01b031614610eee5760405162461bcd60e51b815260206004820152600760248201526610b13ab93732b960c91b60448201526064016105a4565b610ef93383836119d8565b604051818152339083907ff0b3d7246d5788c3201f9da8a6cfcc9377e1864279750d9c959b87a6660f81cd90602001610682565b600b8054610f3a90612868565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6690612868565b8015610fb35780601f10610f8857610100808354040283529160200191610fb3565b820191906000526020600020905b815481529060010190602001808311610f9657829003601f168201915b505050505081565b6001600160a01b0385163314801590610fdb5750610fd985336104c3565b155b1561108b5760008381526008602090815260408083206001600160a01b0389168452825280832033845290915290205482111561104b5760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b60448201526064016105a4565b60008381526008602090815260408083206001600160a01b038916845282528083203384529091528120805484929061108590849061283c565b90915550505b6109208585858585611b6c565b600a546001600160a01b031633146110c25760405162461bcd60e51b81526004016105a4906127b7565b610a8481611ca8565b600a546001600160a01b031633146110f55760405162461bcd60e51b81526004016105a4906127b7565b600c546001600160a01b038083169116036111405760405162461bcd60e51b815260206004820152600b60248201526a29b0b6b29036b4b73a32b960a91b60448201526064016105a4565b600c80546001600160a01b0319166001600160a01b03831690811790915560405133907fe490d3138e32f1f66ef3971a3c73c7f7704ba0c1d1000f1e2c3df6fc0376610b90600090a350565b60006001600160e01b03198216636cdb3d1360e11b14806105fd57506001600160e01b031982166303a24d0760e21b14806105d257506105d2825b60006001600160e01b0319821663152a902d60e11b14806105d257506301ffc9a760e01b6001600160e01b03198316146105d2565b6127106001600160601b03821611156112275760405162461bcd60e51b81526004016105a4906129ad565b6001600160a01b03821661127d5760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c69642072656365697665720000000000000060448201526064016105a4565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600055565b6000818152600660205260408120805460609291906112d490612868565b80601f016020809104026020016040519081016040528092919081815260200182805461130090612868565b801561134d5780601f106113225761010080835404028352916020019161134d565b820191906000526020600020905b81548152906001019060200180831161133057829003601f168201915b50505050509050600081511161136b5761136683611cfa565b61138f565b60058160405160200161137f9291906129f7565b6040516020818303038152906040525b9392505050565b81518351146113f85760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016105a4565b6001600160a01b03841661141e5760405162461bcd60e51b81526004016105a490612a7e565b3361142d818787878787611d8e565b60005b845181101561151657600085828151811061144d5761144d612826565b60200260200101519050600085838151811061146b5761146b612826565b60209081029190910181015160008481526002835260408082206001600160a01b038e1683529093529190912054909150818110156114bc5760405162461bcd60e51b81526004016105a490612ac3565b60008381526002602090815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906114fb908490612b0d565b925050819055505050508061150f9061284f565b9050611430565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611566929190612b20565b60405180910390a461157c818787878787611d9c565b505050505050565b6005610d3c82826128ed565b6127106001600160601b03821611156115bb5760405162461bcd60e51b81526004016105a4906129ad565b6001600160a01b0382166116115760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d6574657273000000000060448201526064016105a4565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752600190529190942093519051909116600160a01b029116179055565b6001600160a01b0384166116bb5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016105a4565b3360006116c785611ef7565b905060006116d485611ef7565b90506116e583600089858589611d8e565b60008681526002602090815260408083206001600160a01b038b16845290915281208054879290611717908490612b0d565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461177783600089898989611f42565b50505050505050565b600082815260066020526040902061179882826128ed565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b6117c48461068e565b6040516117d19190612289565b60405180910390a25050565b6001600160a01b0383166118335760405162461bcd60e51b815260206004820152601d60248201527f417070726f76652066726f6d20746865207a65726f206164647265737300000060448201526064016105a4565b6001600160a01b0382166118895760405162461bcd60e51b815260206004820152601b60248201527f417070726f766520746f20746865207a65726f2061646472657373000000000060448201526064016105a4565b60008481526008602090815260408083206001600160a01b03878116808652918452828520908716808652908452938290208590559051848152909187917f69e4aaf23f9318cf40839ac20453d8fbedaac2955eb08a27ae5189cc71925716910160405180910390a450505050565b816001600160a01b0316836001600160a01b03160361196b5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016105a4565b6001600160a01b03838116600081815260036020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038316611a3a5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016105a4565b336000611a4684611ef7565b90506000611a5384611ef7565b9050611a7383876000858560405180602001604052806000815250611d8e565b60008581526002602090815260408083206001600160a01b038a16845290915290205484811015611af25760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016105a4565b60008681526002602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4604080516020810190915260009052611777565b6001600160a01b038416611b925760405162461bcd60e51b81526004016105a490612a7e565b336000611b9e85611ef7565b90506000611bab85611ef7565b9050611bbb838989858589611d8e565b60008681526002602090815260408083206001600160a01b038c16845290915290205485811015611bfe5760405162461bcd60e51b81526004016105a490612ac3565b60008781526002602090815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290611c3d908490612b0d565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611c9d848a8a8a8a8a611f42565b505050505050505050565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606060048054611d0990612868565b80601f0160208091040260200160405190810160405280929190818152602001828054611d3590612868565b8015611d825780601f10611d5757610100808354040283529160200191611d82565b820191906000526020600020905b815481529060010190602001808311611d6557829003601f168201915b50505050509050919050565b61157c868686868686611ffd565b6001600160a01b0384163b1561157c5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611de09089908990889088908890600401612b4e565b6020604051808303816000875af1925050508015611e1b575060408051601f3d908101601f19168201909252611e1891810190612bac565b60015b611ec757611e27612bc9565b806308c379a003611e605750611e3b612be5565b80611e465750611e62565b8060405162461bcd60e51b81526004016105a49190612289565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016105a4565b6001600160e01b0319811663bc197c8160e01b146117775760405162461bcd60e51b81526004016105a490612c6f565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611f3157611f31612826565b602090810291909101015292915050565b6001600160a01b0384163b1561157c5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611f869089908990889088908890600401612cb7565b6020604051808303816000875af1925050508015611fc1575060408051601f3d908101601f19168201909252611fbe91810190612bac565b60015b611fcd57611e27612bc9565b6001600160e01b0319811663f23a6e6160e01b146117775760405162461bcd60e51b81526004016105a490612c6f565b6001600160a01b0385166120845760005b83518110156120825782818151811061202957612029612826565b60200260200101516007600086848151811061204757612047612826565b60200260200101518152602001908152602001600020600082825461206c9190612b0d565b9091555061207b90508161284f565b905061200e565b505b6001600160a01b03841661157c5760005b83518110156117775760008482815181106120b2576120b2612826565b6020026020010151905060008483815181106120d0576120d0612826565b60200260200101519050600060076000848152602001908152602001600020549050818110156121535760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f74604482015267616c537570706c7960c01b60648201526084016105a4565b6000928352600760205260409092209103905561216f8161284f565b9050612095565b80356001600160a01b038116811461218d57600080fd5b919050565b600080604083850312156121a557600080fd5b6121ae83612176565b946020939093013593505050565b6001600160e01b031981168114610a8457600080fd5b6000602082840312156121e457600080fd5b813561138f816121bc565b80356001600160601b038116811461218d57600080fd5b6000806040838503121561221957600080fd5b61222283612176565b9150612230602084016121ef565b90509250929050565b60005b8381101561225457818101518382015260200161223c565b50506000910152565b60008151808452612275816020860160208601612239565b601f01601f19169290920160200192915050565b60208152600061138f602083018461225d565b6000602082840312156122ae57600080fd5b5035919050565b600080604083850312156122c857600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715612313576123136122d7565b6040525050565b600067ffffffffffffffff821115612334576123346122d7565b5060051b60200190565b600082601f83011261234f57600080fd5b8135602061235c8261231a565b60405161236982826122ed565b83815260059390931b850182019282810191508684111561238957600080fd5b8286015b848110156123a4578035835291830191830161238d565b509695505050505050565b600082601f8301126123c057600080fd5b813567ffffffffffffffff8111156123da576123da6122d7565b6040516123f1601f8301601f1916602001826122ed565b81815284602083860101111561240657600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561243b57600080fd5b61244486612176565b945061245260208701612176565b9350604086013567ffffffffffffffff8082111561246f57600080fd5b61247b89838a0161233e565b9450606088013591508082111561249157600080fd5b61249d89838a0161233e565b935060808801359150808211156124b357600080fd5b506124c0888289016123af565b9150509295509295909350565b6000602082840312156124df57600080fd5b61138f82612176565b600080604083850312156124fb57600080fd5b823567ffffffffffffffff8082111561251357600080fd5b818501915085601f83011261252757600080fd5b813560206125348261231a565b60405161254182826122ed565b83815260059390931b850182019282810191508984111561256157600080fd5b948201945b838610156125865761257786612176565b82529482019490820190612566565b9650508601359250508082111561259c57600080fd5b506125a98582860161233e565b9150509250929050565b600081518084526020808501945080840160005b838110156125e3578151875295820195908201906001016125c7565b509495945050505050565b60208152600061138f60208301846125b3565b60006020828403121561261357600080fd5b813567ffffffffffffffff81111561262a57600080fd5b612636848285016123af565b949350505050565b60008060006060848603121561265357600080fd5b8335925061266360208501612176565b9150612671604085016121ef565b90509250925092565b60008060006060848603121561268f57600080fd5b8335925061269f60208501612176565b9150604084013590509250925092565b600080604083850312156126c257600080fd5b82359150602083013567ffffffffffffffff8111156126e057600080fd5b6125a9858286016123af565b600080604083850312156126ff57600080fd5b61270883612176565b91506020830135801515811461271d57600080fd5b809150509250929050565b6000806040838503121561273b57600080fd5b61274483612176565b915061223060208401612176565b600080600080600060a0868803121561276a57600080fd5b61277386612176565b945061278160208701612176565b93506040860135925060608601359150608086013567ffffffffffffffff8111156127ab57600080fd5b6124c0888289016123af565b60208082526006908201526510b0b236b4b760d11b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176105d2576105d26127d7565b60008261282157634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b818103818111156105d2576105d26127d7565b600060018201612861576128616127d7565b5060010190565b600181811c9082168061287c57607f821691505b60208210810361289c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156128e857600081815260208120601f850160051c810160208610156128c95750805b601f850160051c820191505b8181101561157c578281556001016128d5565b505050565b815167ffffffffffffffff811115612907576129076122d7565b61291b816129158454612868565b846128a2565b602080601f83116001811461295057600084156129385750858301515b600019600386901b1c1916600185901b17855561157c565b600085815260208120601f198616915b8281101561297f57888601518255948401946001909101908401612960565b508582101561299d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252602a908201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646040820152692073616c65507269636560b01b606082015260800190565b6000808454612a0581612868565b60018281168015612a1d5760018114612a3257612a61565b60ff1984168752821515830287019450612a61565b8860005260208060002060005b85811015612a585781548a820152908401908201612a3f565b50505082870194505b505050508351612a75818360208801612239565b01949350505050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b808201808211156105d2576105d26127d7565b604081526000612b3360408301856125b3565b8281036020840152612b4581856125b3565b95945050505050565b6001600160a01b0386811682528516602082015260a060408201819052600090612b7a908301866125b3565b8281036060840152612b8c81866125b3565b90508281036080840152612ba0818561225d565b98975050505050505050565b600060208284031215612bbe57600080fd5b815161138f816121bc565b600060033d1115612be25760046000803e5060005160e01c5b90565b600060443d1015612bf35790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715612c2357505050505090565b8285019150815181811115612c3b5750505050505090565b843d8701016020828501011115612c555750505050505090565b612c64602082860101876122ed565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612cf19083018461225d565b97965050505050505056fea2646970667358221220c4dd483265ff015366a511904b36345acc2703e45cc949550a4b18de73d3d4d964736f6c63430008110033",
  "devdoc": {
    "author": "Yuri Fernandes (HorizonDAO)",
    "events": {
      "RealEstateNFTBurned(uint256,address,uint256)": {
        "details": "Emitted when reNFTs are burned"
      },
      "RealEstateNFTMinted(uint256,address,address,uint256)": {
        "details": "Emitted when new reNFTs are minted"
      },
      "SetBurner(address,address)": {
        "details": "Emitted when a new burner is set"
      },
      "SetMinter(address,address)": {
        "details": "Emitted when a new minter is set"
      }
    },
    "kind": "dev",
    "methods": {
      "approve(uint256,address,uint256)": {
        "params": {
          "_amount": "Amount allowed",
          "_spender": "Spender address",
          "_tokenId": "Collection ID"
        }
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "burn(uint256,uint256)": {
        "details": "Burns own tokensRequires Burner role",
        "params": {
          "_amount": "Amount of tokens to burn",
          "_id": "Token ID"
        }
      },
      "constructor": {
        "details": "Initialize RealEstateNFT",
        "params": {
          "_admin": "Address with contract administration privileges",
          "_baseUri": "Base URI for the offchain NFT metadata",
          "_owner": "EOA to be used as OpenSea token admin"
        }
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "isOwner(address)": {
        "returns": {
          "_0": "true if the caller is the current owner."
        }
      },
      "mint(uint256,address,uint256)": {
        "details": "Mint new reNFT tokensRequires Minter role",
        "params": {
          "_amount": "Amount to mint",
          "_id": "Token ID",
          "_to": "Address to transfer minted tokens"
        }
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."
      },
      "setAdmin(address)": {
        "details": "Set new admin role",
        "params": {
          "_admin": "New admin address"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setBaseURI(string)": {
        "details": "Sets `baseURI` as the `_baseURI` for all tokens",
        "params": {
          "_baseURI": "Base URI to be prepended to the token URI"
        }
      },
      "setBurner(address)": {
        "details": "Set new burner role",
        "params": {
          "_burner": "New burner address"
        }
      },
      "setContractURI(string)": {
        "details": "Restricted access function which updates the contract URI",
        "params": {
          "_contractURI": "new contract URI to set"
        }
      },
      "setDefaultRoyalty(address,uint96)": {
        "details": "Set the default royalties info (for all token IDs)",
        "params": {
          "_feeNumerator": "Fee in basis points",
          "_receiver": "Address of the royalties receiver"
        }
      },
      "setMinter(address)": {
        "details": "Set new minter role",
        "params": {
          "_minter": "New minter address"
        }
      },
      "setTokenRoyalty(uint256,address,uint96)": {
        "details": "Set royalties info for a specific token ID",
        "params": {
          "_feeNumerator": "Fee in basis points",
          "_receiver": "Address of the royalties receiver",
          "_tokenId": "Token"
        }
      },
      "setURI(uint256,string)": {
        "details": "Sets `tokenURI` as the tokenURI of `tokenId`.",
        "params": {
          "_tokenId": "ID of the token",
          "_tokenURI": "URI of the token (will be prepended by _baseURI when uri function is called)"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "transferOwnership(address)": {
        "details": "Restricted access function to set smart contract \"owner\"      Note: an \"owner\" set doesn't have any authority, and cannot even update \"owner\"",
        "params": {
          "_owner": "new \"owner\" of the smart contract"
        }
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the concatenation of the `_baseURI` and the token-specific uri if the latter is set This enables the following behaviors: - if `_tokenURIs[tokenId]` is set, then the result is the concatenation   of `_baseURI` and `_tokenURIs[tokenId]` (keep in mind that `_baseURI`   is empty per default); - if `_tokenURIs[tokenId]` is NOT set then we fallback to `super.uri()`   which in most cases will contain `ERC1155._uri`; - if `_tokenURIs[tokenId]` is NOT set, and if the parents do not have a   uri value set, then the result is empty."
      }
    },
    "stateVariables": {
      "_currentId": {
        "details": "Current value shows the next available token ID"
      },
      "burner": {
        "details": "Address of the burner: Can execute burning functions"
      },
      "minter": {
        "details": "Address of the minter: Can execute mint function"
      }
    },
    "title": "Real Estate NFT",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(uint256,address,uint256)": {
        "notice": "Approve a spender to transfer tokens"
      },
      "contractURI()": {
        "notice": "Contract level metadata to define collection name, description, and royalty fees.         see https://docs.opensea.io/docs/contract-level-metadata"
      },
      "feeDenominator()": {
        "notice": "The denominator of which will be used to calculate the fee (feeNumerator/feeDenominator)"
      },
      "isOwner(address)": {
        "notice": "Checks if the address supplied is an \"owner\" of the smart contract      Note: an \"owner\" doesn't have any authority on the smart contract and is \"nominal\""
      },
      "name()": {
        "notice": "Returns the name of the RealEstateERC1155 contract"
      },
      "nextRealEstateId()": {
        "notice": "Returns the ID of the next available reNFT"
      },
      "symbol()": {
        "notice": "Returns the symbol of the RealEstateERC1155 contract"
      }
    },
    "notice": "Used to Tokenize and Fractionate Real EstateOnly minter can mint tokens and set token metadataNew tokens should be minted by incrementing the tokenId by 1",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1684,
        "contract": "contracts/token/RealEstateERC1155.sol:RealEstateERC1155",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(RoyaltyInfo)1681_storage"
      },
      {
        "astId": 1689,
        "contract": "contracts/token/RealEstateERC1155.sol:RealEstateERC1155",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)1681_storage)"
      },
      {
        "astId": 47,
        "contract": "contracts/token/RealEstateERC1155.sol:RealEstateERC1155",
        "label": "_balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 53,
        "contract": "contracts/token/RealEstateERC1155.sol:RealEstateERC1155",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 55,
        "contract": "contracts/token/RealEstateERC1155.sol:RealEstateERC1155",
        "label": "_uri",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 1577,
        "contract": "contracts/token/RealEstateERC1155.sol:RealEstateERC1155",
        "label": "_baseURI",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 1581,
        "contract": "contracts/token/RealEstateERC1155.sol:RealEstateERC1155",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1417,
        "contract": "contracts/token/RealEstateERC1155.sol:RealEstateERC1155",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5811,
        "contract": "contracts/token/RealEstateERC1155.sol:RealEstateERC1155",
        "label": "_allowances",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 5495,
        "contract": "contracts/token/RealEstateERC1155.sol:RealEstateERC1155",
        "label": "owner",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 5498,
        "contract": "contracts/token/RealEstateERC1155.sol:RealEstateERC1155",
        "label": "admin",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 5501,
        "contract": "contracts/token/RealEstateERC1155.sol:RealEstateERC1155",
        "label": "contractURI",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 5243,
        "contract": "contracts/token/RealEstateERC1155.sol:RealEstateERC1155",
        "label": "minter",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 5246,
        "contract": "contracts/token/RealEstateERC1155.sol:RealEstateERC1155",
        "label": "burner",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 5250,
        "contract": "contracts/token/RealEstateERC1155.sol:RealEstateERC1155",
        "label": "_currentId",
        "offset": 0,
        "slot": "14",
        "type": "t_struct(Counter)2270_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)1681_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)1681_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2270_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2269,
            "contract": "contracts/token/RealEstateERC1155.sol:RealEstateERC1155",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyInfo)1681_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 1678,
            "contract": "contracts/token/RealEstateERC1155.sol:RealEstateERC1155",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1680,
            "contract": "contracts/token/RealEstateERC1155.sol:RealEstateERC1155",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}
