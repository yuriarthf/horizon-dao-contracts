{
  "address": "0x90c4512c6F05b1883fB7eB4423dbD99147f7763F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_imageUri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenUnitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256[3]",
          "name": "_chances",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "enum CitizenshipPromoERC1155.Citizenship",
          "name": "_citizenship",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "_isWhitelist",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "CitizenshipClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_value",
          "type": "string"
        }
      ],
      "name": "ContractURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "GoldMerkleRootSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "NewAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "NewImageUri",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_oldVal",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newVal",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_percentage",
          "type": "uint16"
        }
      ],
      "name": "RoyaltyInfoUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "SilverMerkleRootSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_CHANCE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PURCHASABLE_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        }
      ],
      "name": "claimGold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        }
      ],
      "name": "claimSilver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "collectionDescription",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "collectionMetadata",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "collectionName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "goldClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "goldMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "imageURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "purchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchasedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyPercentage",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_contractURI",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "setGoldMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setImageBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_royaltyReceiver",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_royaltyPercentage",
          "type": "uint16"
        }
      ],
      "name": "setRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "setSilverMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "silverClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "silverMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum CitizenshipPromoERC1155.Citizenship",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "thresholds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6972edc9f0c8ef55a8dbe3db13404dd174b4340cd47c4b446a949b3cc67a9223",
  "receipt": {
    "to": null,
    "from": "0x39a242169BA3B28623E6d235A4Bdd46287d4bae3",
    "contractAddress": "0x90c4512c6F05b1883fB7eB4423dbD99147f7763F",
    "transactionIndex": 87,
    "gasUsed": "2949992",
    "logsBloom": "0x
    "blockHash": "0x500d416808f0d7ea428f44034ccbb0a7de61b62d65c86f0151a3b781327dc1c9",
    "transactionHash": "0x6972edc9f0c8ef55a8dbe3db13404dd174b4340cd47c4b446a949b3cc67a9223",
    "logs": [
      {
        "transactionIndex": 87,
        "blockNumber": 7819669,
        "transactionHash": "0x6972edc9f0c8ef55a8dbe3db13404dd174b4340cd47c4b446a949b3cc67a9223",
        "address": "0x90c4512c6F05b1883fB7eB4423dbD99147f7763F",
        "topics": [
          "0x71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c",
          "0x00000000000000000000000063926e60619172fe58870bceb057b3b437fa62fc"
        ],
        "data": "0x",
        "logIndex": 224,
        "blockHash": "0x500d416808f0d7ea428f44034ccbb0a7de61b62d65c86f0151a3b781327dc1c9"
      },
      {
        "transactionIndex": 87,
        "blockNumber": 7819669,
        "transactionHash": "0x6972edc9f0c8ef55a8dbe3db13404dd174b4340cd47c4b446a949b3cc67a9223",
        "address": "0x90c4512c6F05b1883fB7eB4423dbD99147f7763F",
        "topics": [
          "0xff9f5326d1d2833dce5b39220446d89e1d49234ceacf56ad194c69a5cb423d2a",
          "0x00000000000000000000000039a242169ba3b28623e6d235a4bdd46287d4bae3"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 225,
        "blockHash": "0x500d416808f0d7ea428f44034ccbb0a7de61b62d65c86f0151a3b781327dc1c9"
      }
    ],
    "blockNumber": 7819669,
    "cumulativeGasUsed": "17874520",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "",
    "0x63926E60619172FE58870BCeb057b3B437Fa62FC",
    "0x39a242169BA3B28623E6d235A4Bdd46287d4bae3",
    "250000000000000000",
    [948, 47, 5]
  ],
  "numDeployments": 1,
  "solcInputHash": "a1c13e67e4976aa2c89a5411f2e4c6fa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_imageUri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"_chances\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum CitizenshipPromoERC1155.Citizenship\",\"name\":\"_citizenship\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_isWhitelist\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CitizenshipClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"GoldMerkleRootSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"NewImageUri\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldVal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newVal\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_percentage\",\"type\":\"uint16\"}],\"name\":\"RoyaltyInfoUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"SilverMerkleRootSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_CHANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PURCHASABLE_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"claimGold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"claimSilver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"collectionDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"collectionMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"collectionName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"goldClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goldMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"imageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyPercentage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"setGoldMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setImageBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_royaltyPercentage\",\"type\":\"uint16\"}],\"name\":\"setRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"setSilverMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"silverClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"silverMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CitizenshipPromoERC1155.Citizenship\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"thresholds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Horizon DAO (Yuri Fernandes)\",\"events\":{\"CitizenshipClaimed(address,uint8,bool,uint256)\":{\"details\":\"Emitted when an amount of citizenship NFTs are claimed\"},\"GoldMerkleRootSet(address,bytes32)\":{\"details\":\"Emitted when gold merkle root is set (only possible one time)\"},\"NewImageUri(address,string)\":{\"details\":\"Emitted when a new base image URI is set for the collections\"},\"SilverMerkleRootSet(address,bytes32)\":{\"details\":\"Emitted when silver merkle root is set (only possible one time)\"},\"Withdrawal(address,address,uint256)\":{\"details\":\"Emitted when ethers are withdrawn from the contract\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"claimGold(bytes32[])\":{\"details\":\"Used for whitelisted gold citizenship claims\",\"params\":{\"_proof\":\"Merkle proof for the executing address\"}},\"claimSilver(bytes32[])\":{\"details\":\"Used for whitelisted silver citizenship claims\",\"params\":{\"_proof\":\"Merkle proof for the executing address\"}},\"collectionDescription(uint256)\":{\"params\":{\"_id\":\"Collection ID\"},\"returns\":{\"_0\":\"Collection description\"}},\"collectionMetadata(uint256)\":{\"params\":{\"_id\":\"Collection ID\"},\"returns\":{\"_0\":\"Stringified metadata JSON\"}},\"collectionName(uint256)\":{\"params\":{\"_id\":\"Collection ID\"},\"returns\":{\"_0\":\"Collection name\"}},\"constructor\":{\"details\":\"constructor to initialize CitizenshipPromoERC1155 contract\",\"params\":{\"_admin\":\"Adminstrative address, can execute various configuration related functions\",\"_chances\":\"Array with the chances of getting a citizenship for each collection\",\"_imageUri\":\"Base image URI\",\"_owner\":\"Should be an EOA, will have rights over OpenSea collection configuration\",\"_tokenUnitPrice\":\"Price per random NFT claim\"}},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"imageURI(uint256)\":{\"params\":{\"_id\":\"Collection ID\"},\"returns\":{\"_0\":\"Image URI\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"isOwner(address)\":{\"returns\":{\"_0\":\"true if the caller is the current owner.\"}},\"purchase(uint256)\":{\"params\":{\"_amount\":\"Amount to purchase\"}},\"royaltyInfo(uint256,uint256)\":{\"params\":{\"_salePrice\":\"the price (in any unit, .e.g wei, ERC20 token, et.c.) of the token to be sold\"},\"returns\":{\"receiver\":\"the royalty receiver\",\"royaltyAmount\":\"royalty amount in the same unit as _salePrice\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setAdmin(address)\":{\"details\":\"Set new admin role\",\"params\":{\"_admin\":\"New admin address\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setContractURI(string)\":{\"details\":\"Restricted access function which updates the contract URI\",\"params\":{\"_contractURI\":\"new contract URI to set\"}},\"setGoldMerkleRoot(bytes32)\":{\"details\":\"Set Gold merkle root (whitelist for gold citizenship claims)\",\"params\":{\"_root\":\"Merkle root\"}},\"setImageBaseURI(string)\":{\"details\":\"Set new base image URI for collections\",\"params\":{\"_uri\":\"Base image URI\"}},\"setRoyaltyInfo(address,uint16)\":{\"details\":\"Restricted access function which updates the royalty info\",\"params\":{\"_royaltyPercentage\":\"new royalty percentage to set\",\"_royaltyReceiver\":\"new royalty receiver to set\"}},\"setSilverMerkleRoot(bytes32)\":{\"details\":\"Set Silver merkle root (whitelist for gold citizenship claims)\",\"params\":{\"_root\":\"Merkle root\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"transferOwnership(address)\":{\"details\":\"Restricted access function to set smart contract \\\"owner\\\"      Note: an \\\"owner\\\" set doesn't have any authority, and cannot even update \\\"owner\\\"\",\"params\":{\"_owner\":\"new \\\"owner\\\" of the smart contract\"}},\"uri(uint256)\":{\"params\":{\"_id\":\"Collection ID\"},\"returns\":{\"_0\":\"Base64 encoded metadata\"}},\"withdraw(address)\":{\"details\":\"Withdraw all ethers from contract\",\"params\":{\"_to\":\"Address to send the funds\"}}},\"stateVariables\":{\"MAX_CHANCE\":{\"details\":\"Represents 100% chance, there will be 3 Citizenship collection     with decreasing chances to be minted during purchases     the total chances should sum to MAX_CHANCE\"},\"PURCHASABLE_SUPPLY\":{\"details\":\"The maximum purchaseable supply     does not count with the whitelisted citizenship claims\"},\"goldClaimed\":{\"details\":\"Used to mark a gold citizenship as claimed from a whitelisted address\"},\"goldMerkleRoot\":{\"details\":\"Merkle root used to whitelist addresses to claim gold citizenship\"},\"purchasedAmount\":{\"details\":\"Amount of NFTs that have been purchased so far\"},\"silverClaimed\":{\"details\":\"Used to mark a silver citizenship as claimed for a whitelisted address\"},\"silverMerkleRoot\":{\"details\":\"Merkle root used to whitelist addresses to claim gold citizenshi\"},\"thresholds\":{\"details\":\"Calculated pseudo-random number should fall in range to acquire a certain citizenship\"},\"tokenUnitPrice\":{\"details\":\"The unit price to purchase a citizenship NFT from a random collection\"}},\"title\":\"Horizon DAO Citizenship Promotional NFTs\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collectionDescription(uint256)\":{\"notice\":\"Get collection description\"},\"collectionMetadata(uint256)\":{\"notice\":\"Returns the stringified metadata JSON for a given collection\"},\"collectionName(uint256)\":{\"notice\":\"Get collection name\"},\"contractURI()\":{\"notice\":\"Contract level metadata to define collection name, description, and royalty fees.         see https://docs.opensea.io/docs/contract-level-metadata\"},\"imageURI(uint256)\":{\"notice\":\"Get the image URI for a given collection\"},\"isOwner(address)\":{\"notice\":\"Checks if the address supplied is an \\\"owner\\\" of the smart contract      Note: an \\\"owner\\\" doesn't have any authority on the smart contract and is \\\"nominal\\\"\"},\"purchase(uint256)\":{\"notice\":\"Purchase citizenship NFTs randomly from the 3 collections (Bronze, Silver and Gold)\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"EIP-2981 function to calculate royalties for sales in secondary marketplaces.         see https://eips.ethereum.org/EIPS/eip-2981\"},\"royaltyPercentage()\":{\"notice\":\"Percentage of token sale price to be used for EIP-2981 royalties from secondary sales         see https://eips.ethereum.org/EIPS/eip-2981\"},\"royaltyReceiver()\":{\"notice\":\"Address to receive EIP-2981 royalties from secondary sales         see https://eips.ethereum.org/EIPS/eip-2981\"},\"uri(uint256)\":{\"notice\":\"Returns the Base64 encoded metadata for a given collection\"}},\"notice\":\"Promotional NFTs that will have utility added during     Horizon DAO development stages, Citizenship NFT holder will     also be eligible to various SKY (Governance token) airdrops\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/CitizenshipPromoERC1155.sol\":\"CitizenshipPromoERC1155\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x447a21c87433c0f11252912313a96f3454629ef88cca7a4eefbb283b3ec409f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe3deb5f3b0c9d12944f62ab680f041bbf1910d9d3ac6b545b4b8e399643c538d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x596ed72a251d391b814a4aa19d7acb02ebdcc92ba27d3fff74a6f0c158b12ab7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/interfaces/IEIP2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n///\\n/// @dev Interface for the NFT Royalty Standard\\n///\\ninterface IEIP2981 is IERC165 {\\n    /// ERC165 bytes to add to interface array - set in parent contract\\n    /// implementing this standard\\n    ///\\n    /// bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\\n\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n    /// @return receiver - address of who should be sent the royalty payment\\n    /// @return royaltyAmount - the royalty payment amount for _salePrice\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x423e360cb352267aa1cca4726bae527f0db6b3f2e57ddc780e2006ad4bba5ab6\",\"license\":\"MIT\"},\"contracts/token/CitizenshipPromoERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { MerkleProof } from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport { Base64 } from \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { RoyalERC1155 } from \\\"./RoyalERC1155.sol\\\";\\n\\n/// @title Horizon DAO Citizenship Promotional NFTs\\n/// @author Horizon DAO (Yuri Fernandes)\\n/// @notice Promotional NFTs that will have utility added during\\n///     Horizon DAO development stages, Citizenship NFT holder will\\n///     also be eligible to various SKY (Governance token) airdrops\\ncontract CitizenshipPromoERC1155 is RoyalERC1155 {\\n    using Strings for uint256;\\n\\n    enum Citizenship {\\n        BRONZE,\\n        SILVER,\\n        GOLD\\n    }\\n\\n    /// @dev The maximum purchaseable supply\\n    ///     does not count with the whitelisted citizenship claims\\n    uint256 public constant PURCHASABLE_SUPPLY = 10550;\\n\\n    /// @dev Represents 100% chance, there will be 3 Citizenship collection\\n    ///     with decreasing chances to be minted during purchases\\n    ///     the total chances should sum to MAX_CHANCE\\n    uint256 public constant MAX_CHANCE = 1_000;\\n\\n    /// @dev The unit price to purchase a citizenship NFT from a random collection\\n    uint256 public immutable tokenUnitPrice;\\n\\n    /// @dev Amount of NFTs that have been purchased so far\\n    uint256 public purchasedAmount;\\n\\n    /// @dev Calculated pseudo-random number should fall in range to acquire a certain citizenship\\n    mapping(Citizenship => uint256) public thresholds;\\n\\n    /// @dev Merkle root used to whitelist addresses to claim gold citizenship\\n    bytes32 public goldMerkleRoot;\\n\\n    /// @dev Merkle root used to whitelist addresses to claim gold citizenshi\\n    bytes32 public silverMerkleRoot;\\n\\n    /// @dev Used to mark a gold citizenship as claimed from a whitelisted address\\n    mapping(address => bool) public goldClaimed;\\n\\n    /// @dev Used to mark a silver citizenship as claimed for a whitelisted address\\n    mapping(address => bool) public silverClaimed;\\n\\n    /// @dev Emitted when gold merkle root is set (only possible one time)\\n    event GoldMerkleRootSet(address indexed _admin, bytes32 _root);\\n\\n    /// @dev Emitted when silver merkle root is set (only possible one time)\\n    event SilverMerkleRootSet(address indexed _admin, bytes32 _root);\\n\\n    /// @dev Emitted when a new base image URI is set for the collections\\n    event NewImageUri(address indexed _admin, string _uri);\\n\\n    /// @dev Emitted when ethers are withdrawn from the contract\\n    event Withdrawal(address indexed _admin, address indexed _to, uint256 _amount);\\n\\n    /// @dev Emitted when an amount of citizenship NFTs are claimed\\n    event CitizenshipClaimed(\\n        address indexed _by,\\n        Citizenship indexed _citizenship,\\n        bool indexed _isWhitelist,\\n        uint256 _amount\\n    );\\n\\n    /// @dev constructor to initialize CitizenshipPromoERC1155 contract\\n    /// @param _imageUri Base image URI\\n    /// @param _admin Adminstrative address, can execute various configuration related functions\\n    /// @param _owner Should be an EOA, will have rights over OpenSea collection configuration\\n    /// @param _tokenUnitPrice Price per random NFT claim\\n    /// @param _chances Array with the chances of getting a citizenship for each collection\\n    constructor(\\n        string memory _imageUri,\\n        address _admin,\\n        address _owner,\\n        uint256 _tokenUnitPrice,\\n        uint256[3] memory _chances\\n    ) RoyalERC1155(_imageUri, _admin, _owner) {\\n        require(_admin != address(0), \\\"!admin\\\");\\n        for (uint8 i = 0; i < _chances.length; i++) {\\n            if (i > 0) {\\n                require(_chances[i - 1] >= _chances[i], \\\"Invalid _chance array\\\");\\n                thresholds[Citizenship(i)] += thresholds[Citizenship(i - 1)];\\n            }\\n            thresholds[Citizenship(i)] += _chances[i];\\n        }\\n        require(thresholds[Citizenship.GOLD] == MAX_CHANCE, \\\"_chances sum should be MAX_CHANCE\\\");\\n        tokenUnitPrice = _tokenUnitPrice;\\n        emit NewImageUri(msg.sender, _imageUri);\\n    }\\n\\n    /// @dev Set Gold merkle root (whitelist for gold citizenship claims)\\n    /// @param _root Merkle root\\n    function setGoldMerkleRoot(bytes32 _root) external onlyAdmin {\\n        require(goldMerkleRoot == bytes32(0), \\\"Merkle root already set\\\");\\n        goldMerkleRoot = _root;\\n        emit GoldMerkleRootSet(msg.sender, _root);\\n    }\\n\\n    /// @dev Set Silver merkle root (whitelist for gold citizenship claims)\\n    /// @param _root Merkle root\\n    function setSilverMerkleRoot(bytes32 _root) external onlyAdmin {\\n        require(silverMerkleRoot == bytes32(0), \\\"Merkle root already set\\\");\\n        silverMerkleRoot = _root;\\n        emit SilverMerkleRootSet(msg.sender, _root);\\n    }\\n\\n    /// @dev Set new base image URI for collections\\n    /// @param _uri Base image URI\\n    function setImageBaseURI(string memory _uri) external onlyAdmin {\\n        _setURI(_uri);\\n        emit NewImageUri(msg.sender, _uri);\\n    }\\n\\n    /// @dev Used for whitelisted gold citizenship claims\\n    /// @param _proof Merkle proof for the executing address\\n    function claimGold(bytes32[] memory _proof) external {\\n        require(MerkleProof.verify(_proof, goldMerkleRoot, keccak256(abi.encodePacked(msg.sender))), \\\"Access Denied\\\");\\n        require(!goldClaimed[msg.sender], \\\"Already claimed\\\");\\n        _mint(msg.sender, uint256(Citizenship.GOLD), 1, bytes(\\\"\\\"));\\n        emit CitizenshipClaimed(msg.sender, Citizenship.GOLD, true, 1);\\n    }\\n\\n    /// @dev Used for whitelisted silver citizenship claims\\n    /// @param _proof Merkle proof for the executing address\\n    function claimSilver(bytes32[] memory _proof) external {\\n        require(MerkleProof.verify(_proof, goldMerkleRoot, keccak256(abi.encodePacked(msg.sender))), \\\"Access Denied\\\");\\n        require(!goldClaimed[msg.sender], \\\"Already claimed\\\");\\n        _mint(msg.sender, uint256(Citizenship.GOLD), 1, bytes(\\\"\\\"));\\n        emit CitizenshipClaimed(msg.sender, Citizenship.GOLD, true, 1);\\n    }\\n\\n    /// @notice Purchase citizenship NFTs randomly from the 3 collections (Bronze, Silver and Gold)\\n    /// @param _amount Amount to purchase\\n    function purchase(uint256 _amount) external payable {\\n        uint256 totalPrice = _amount * tokenUnitPrice;\\n        require(msg.value >= totalPrice, \\\"Not enough ethers\\\");\\n        require(purchasedAmount + _amount <= PURCHASABLE_SUPPLY, \\\"_amount is too big\\\");\\n        uint256 magicValue = uint256(\\n            keccak256(abi.encodePacked(msg.sender, block.timestamp, _amount, purchasedAmount))\\n        );\\n\\n        uint256 chance;\\n        uint256[3] memory amounts;\\n        for (uint256 i = 0; i < _amount; i++) {\\n            chance = magicValue % MAX_CHANCE;\\n            if (chance < thresholds[Citizenship.BRONZE]) ++amounts[0];\\n            else if (chance < thresholds[Citizenship.SILVER]) ++amounts[1];\\n            else ++amounts[2];\\n            magicValue = uint256(keccak256(abi.encodePacked(magicValue / MAX_CHANCE)));\\n        }\\n\\n        for (uint8 i = 0; i < amounts.length; i++) {\\n            if (amounts[i] == 0) continue;\\n            _mint(msg.sender, i + 1, amounts[i], bytes(\\\"\\\"));\\n            emit CitizenshipClaimed(msg.sender, Citizenship(i + 1), false, amounts[i]);\\n        }\\n        purchasedAmount += _amount;\\n\\n        uint256 surplus = msg.value - totalPrice;\\n        if (surplus > 0) _sendValue(msg.sender, surplus);\\n    }\\n\\n    /// @dev Withdraw all ethers from contract\\n    /// @param _to Address to send the funds\\n    function withdraw(address _to) external onlyAdmin {\\n        uint256 etherBalance = address(this).balance;\\n        require(etherBalance > 0, \\\"No ethers to withdraw\\\");\\n        _sendValue(_to, etherBalance);\\n        emit Withdrawal(msg.sender, _to, etherBalance);\\n    }\\n\\n    /// @notice Returns the Base64 encoded metadata for a given collection\\n    /// @param _id Collection ID\\n    /// @return Base64 encoded metadata\\n    function uri(uint256 _id) public view override returns (string memory) {\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", Base64.encode(bytes(collectionMetadata(_id)))));\\n    }\\n\\n    /// @notice Returns the stringified metadata JSON for a given collection\\n    /// @param _id Collection ID\\n    /// @return Stringified metadata JSON\\n    function collectionMetadata(uint256 _id) public view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{ \\\"name\\\": \\\"',\\n                    collectionName(_id),\\n                    '\\\", \\\"description\\\": \\\"',\\n                    collectionDescription(_id),\\n                    '\\\", \\\"image\\\": \\\"',\\n                    imageURI(_id),\\n                    '\\\" }'\\n                )\\n            );\\n    }\\n\\n    /// @notice Get collection name\\n    /// @param _id Collection ID\\n    /// @return Collection name\\n    function collectionName(uint256 _id) public pure returns (string memory) {\\n        require(_id >= uint256(Citizenship.BRONZE) && _id <= uint256(Citizenship.GOLD), \\\"Invalid token ID\\\");\\n        if (_id == uint256(Citizenship.BRONZE)) return \\\"Bronze Citizenship\\\";\\n        if (_id == uint256(Citizenship.GOLD)) return \\\"Silver Citizenship\\\";\\n        return \\\"Gold Citizenship\\\";\\n    }\\n\\n    /// @notice Get collection description\\n    /// @param _id Collection ID\\n    /// @return Collection description\\n    function collectionDescription(uint256 _id) public pure returns (string memory) {\\n        require(_id >= uint256(Citizenship.BRONZE) && _id <= uint256(Citizenship.GOLD), \\\"Invalid token ID\\\");\\n        if (_id == uint256(Citizenship.BRONZE)) return \\\"\\\";\\n        if (_id == uint256(Citizenship.GOLD)) return \\\"\\\";\\n        return \\\"\\\";\\n    }\\n\\n    /// @notice Get the image URI for a given collection\\n    /// @param _id Collection ID\\n    /// @return Image URI\\n    function imageURI(uint256 _id) public view returns (string memory) {\\n        return string(abi.encodePacked(super.uri(uint256(0)), _id.toString()));\\n    }\\n\\n    /// @dev Utility function to send an amount of ethers to a given address\\n    /// @param _to Address to send ethers\\n    /// @param _amount Amount of ethers to send\\n    function _sendValue(address _to, uint256 _amount) internal {\\n        (bool success, ) = _to.call{ value: _amount }(\\\"\\\");\\n        require(success, \\\"Failed sending ethers\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x23cf22bd3156e292f0da8b30c5e3c66f6cbbb9dc9f47bee3c5e3760170497ef5\",\"license\":\"MIT\"},\"contracts/token/RoyalERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport { ERC1155 } from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport { ERC1155Supply } from \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\\";\\r\\nimport { IERC165 } from \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\r\\nimport { IEIP2981 } from \\\"../interfaces/IEIP2981.sol\\\";\\r\\n\\r\\n/// @title Royal ERC1155\\r\\n/// @dev Supports EIP-2981 royalties on NFT secondary sales\\r\\n///      Supports OpenSea contract metadata royalties\\r\\n///      Introduces fake \\\"owner\\\" to support OpenSea collections\\r\\nabstract contract RoyalERC1155 is IEIP2981, ERC1155Supply {\\r\\n    /// @dev OpenSea expects NFTs to be \\\"Ownable\\\", that is having an \\\"owner\\\",\\r\\n    ///      we introduce a fake \\\"owner\\\" here with no authority\\r\\n    address public owner;\\r\\n\\r\\n    /// @dev Address of the admin: Can set a new admin among other privileged roles\\r\\n    address public admin;\\r\\n\\r\\n    /// @notice Address to receive EIP-2981 royalties from secondary sales\\r\\n    ///         see https://eips.ethereum.org/EIPS/eip-2981\\r\\n    address public royaltyReceiver;\\r\\n\\r\\n    /// @notice Percentage of token sale price to be used for EIP-2981 royalties from secondary sales\\r\\n    ///         see https://eips.ethereum.org/EIPS/eip-2981\\r\\n    /// @dev Has 2 decimal precision. E.g. a value of 500 would result in a 5% royalty fee\\r\\n    uint16 public royaltyPercentage; // default OpenSea value is 750\\r\\n\\r\\n    /// @notice Contract level metadata to define collection name, description, and royalty fees.\\r\\n    ///         see https://docs.opensea.io/docs/contract-level-metadata\\r\\n    /// @dev Should be overwritten by inheriting contracts. By default only includes royalty information\\r\\n    string public contractURI;\\r\\n\\r\\n    /// @dev Fired in setContractURI()\\r\\n    /// @param _by an address which executed update\\r\\n    /// @param _value new contractURI value\\r\\n    event ContractURIUpdated(address indexed _by, string _value);\\r\\n\\r\\n    /// @dev Fired in setRoyaltyInfo()\\r\\n    /// @param _by an address which executed update\\r\\n    /// @param _receiver new royaltyReceiver value\\r\\n    /// @param _percentage new royaltyPercentage value\\r\\n    event RoyaltyInfoUpdated(address indexed _by, address indexed _receiver, uint16 _percentage);\\r\\n\\r\\n    /// @dev Fired in setOwner()\\r\\n    /// @param _by an address which set the new \\\"owner\\\"\\r\\n    /// @param _oldVal previous \\\"owner\\\" address\\r\\n    /// @param _newVal new \\\"owner\\\" address\\r\\n    event OwnerUpdated(address indexed _by, address indexed _oldVal, address indexed _newVal);\\r\\n\\r\\n    /// @dev Emitted when a new admin is set\\r\\n    event NewAdmin(address indexed _admin);\\r\\n\\r\\n    /// @dev Checks if msg.sender is the admin\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == admin, \\\"!admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(string memory uri_, address _admin, address _owner) ERC1155(uri_) {\\r\\n        // initialize owner as the \\\"_owner\\\", necessary for OpenSea\\r\\n        owner = _owner;\\r\\n\\r\\n        // set contract admin\\r\\n        admin = _admin;\\r\\n        emit NewAdmin(_admin);\\r\\n    }\\r\\n\\r\\n    /// @dev Set new admin role\\r\\n    /// @param _admin New admin address\\r\\n    function setAdmin(address _admin) external onlyAdmin {\\r\\n        require(admin != _admin, \\\"admin == _admin\\\");\\r\\n        admin = _admin;\\r\\n        emit NewAdmin(_admin);\\r\\n    }\\r\\n\\r\\n    /// @dev Restricted access function which updates the contract URI\\r\\n    /// @param _contractURI new contract URI to set\\r\\n    function setContractURI(string memory _contractURI) public virtual onlyAdmin {\\r\\n        // update the contract URI\\r\\n        contractURI = _contractURI;\\r\\n\\r\\n        // emit an event first\\r\\n        emit ContractURIUpdated(msg.sender, _contractURI);\\r\\n    }\\r\\n\\r\\n    /// @notice EIP-2981 function to calculate royalties for sales in secondary marketplaces.\\r\\n    ///         see https://eips.ethereum.org/EIPS/eip-2981\\r\\n    /// @param _salePrice the price (in any unit, .e.g wei, ERC20 token, et.c.) of the token to be sold\\r\\n    /// @return receiver the royalty receiver\\r\\n    /// @return royaltyAmount royalty amount in the same unit as _salePrice\\r\\n    function royaltyInfo(uint256, uint256 _salePrice)\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (address receiver, uint256 royaltyAmount)\\r\\n    {\\r\\n        // simply calculate the values and return the result\\r\\n        return (royaltyReceiver, (_salePrice * royaltyPercentage) / 100_00);\\r\\n    }\\r\\n\\r\\n    /// @dev Restricted access function which updates the royalty info\\r\\n    /// @param _royaltyReceiver new royalty receiver to set\\r\\n    /// @param _royaltyPercentage new royalty percentage to set\\r\\n    function setRoyaltyInfo(address _royaltyReceiver, uint16 _royaltyPercentage) public virtual onlyAdmin {\\r\\n        // verify royalty percentage is zero if receiver is also zero\\r\\n        require(_royaltyReceiver != address(0) || _royaltyPercentage == 0, \\\"invalid receiver\\\");\\r\\n\\r\\n        // update the values\\r\\n        royaltyReceiver = _royaltyReceiver;\\r\\n        royaltyPercentage = _royaltyPercentage;\\r\\n\\r\\n        // emit an event first\\r\\n        emit RoyaltyInfoUpdated(msg.sender, _royaltyReceiver, _royaltyPercentage);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if the address supplied is an \\\"owner\\\" of the smart contract\\r\\n    ///      Note: an \\\"owner\\\" doesn't have any authority on the smart contract and is \\\"nominal\\\"\\r\\n    /// @return true if the caller is the current owner.\\r\\n    function isOwner(address _addr) public view virtual returns (bool) {\\r\\n        // just evaluate and return the result\\r\\n        return _addr == owner;\\r\\n    }\\r\\n\\r\\n    /// @dev Restricted access function to set smart contract \\\"owner\\\"\\r\\n    ///      Note: an \\\"owner\\\" set doesn't have any authority, and cannot even update \\\"owner\\\"\\r\\n    /// @param _owner new \\\"owner\\\" of the smart contract\\r\\n    function transferOwnership(address _owner) public virtual onlyAdmin {\\r\\n        // update \\\"owner\\\"\\r\\n        owner = _owner;\\r\\n\\r\\n        // emit an event first - to log both old and new values\\r\\n        emit OwnerUpdated(msg.sender, owner, _owner);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IERC165\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155, IERC165) returns (bool) {\\r\\n        // construct the interface support from EIP-2981 and super interfaces\\r\\n        return interfaceId == type(IEIP2981).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x73201fc23981cad8d91d4032b694cd7646abcc3817ff85c173abfb7c6dadfb24\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620039b0380380620039b08339810160408190526200003491620004dd565b848484826200004381620003cb565b50600480546001600160a01b038084166001600160a01b0319928316179092556005805492851692909116821790556040517f71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c90600090a25050506001600160a01b038416620000e35760405162461bcd60e51b815260206004820152600660248201526510b0b236b4b760d11b60448201526064015b60405180910390fd5b60005b60038160ff161015620002f65760ff8116156200025b57818160ff1660038110620001155762000115620005bf565b60200201518262000128600184620005eb565b60ff16600381106200013e576200013e620005bf565b60200201511015620001935760405162461bcd60e51b815260206004820152601560248201527f496e76616c6964205f6368616e636520617272617900000000000000000000006044820152606401620000da565b60096000620001a4600184620005eb565b60ff166002811115620001bb57620001bb6200060d565b6002811115620001cf57620001cf6200060d565b6002811115620001e357620001e36200060d565b815260200190815260200160002054600960008360ff1660028111156200020e576200020e6200060d565b60028111156200022257620002226200060d565b60028111156200023657620002366200060d565b8152602001908152602001600020600082825462000255919062000623565b90915550505b818160ff1660038110620002735762000273620005bf565b6020020151600960008360ff1660028111156200029457620002946200060d565b6002811115620002a857620002a86200060d565b6002811115620002bc57620002bc6200060d565b81526020019081526020016000206000828254620002db919062000623565b90915550819050620002ed8162000639565b915050620000e6565b50600260005260096020527f6cde3cea4b3a3fb2488b2808bae7556f4a405e50f65e1794383bc026131b13c3546103e8146200037f5760405162461bcd60e51b815260206004820152602160248201527f5f6368616e6365732073756d2073686f756c64206265204d41585f4348414e436044820152604560f81b6064820152608401620000da565b608082905260405133907fff9f5326d1d2833dce5b39220446d89e1d49234ceacf56ad194c69a5cb423d2a90620003b89088906200065b565b60405180910390a25050505050620007eb565b6002620003d982826200071f565b5050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200041e576200041e620003dd565b604052919050565b60005b838110156200044357818101518382015260200162000429565b50506000910152565b80516001600160a01b03811681146200046457600080fd5b919050565b600082601f8301126200047b57600080fd5b604051606081016001600160401b0381118282101715620004a057620004a0620003dd565b604052806060840185811115620004b657600080fd5b845b81811015620004d2578051835260209283019201620004b8565b509195945050505050565b600080600080600060e08688031215620004f657600080fd5b85516001600160401b03808211156200050e57600080fd5b818801915088601f8301126200052357600080fd5b815181811115620005385762000538620003dd565b6200054d601f8201601f1916602001620003f3565b91508082528960208285010111156200056557600080fd5b6200057881602084016020860162000426565b5095506200058b9050602087016200044c565b93506200059b604087016200044c565b925060608601519150620005b3876080880162000469565b90509295509295909350565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60ff8281168282160390811115620006075762000607620005d5565b92915050565b634e487b7160e01b600052602160045260246000fd5b80820180821115620006075762000607620005d5565b600060ff821660ff8103620006525762000652620005d5565b60010192915050565b60208152600082518060208401526200067c81604085016020870162000426565b601f01601f19169190910160400192915050565b600181811c90821680620006a557607f821691505b602082108103620006c657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200071a57600081815260208120601f850160051c81016020861015620006f55750805b601f850160051c820191505b81811015620007165782815560010162000701565b5050505b505050565b81516001600160401b038111156200073b576200073b620003dd565b62000753816200074c845462000690565b84620006cc565b602080601f8311600181146200078b5760008415620007725750858301515b600019600386901b1c1916600185901b17855562000716565b600085815260208120601f198616915b82811015620007bc578886015182559484019460019091019084016200079b565b5085821015620007db5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6080516131a26200080e600039600081816102ec01526112cb01526131a26000f3fe6080604052600436106102455760003560e01c8063704b6c0211610139578063a09cfa55116100b6578063e985e9c51161007a578063e985e9c514610744578063efef39a11461078d578063f242432a146107a0578063f2fde38b146107c0578063f5c0a5ff146107e0578063f851a4401461080057600080fd5b8063a09cfa551461065c578063a22cb465146106cc578063bd85b039146106ec578063e613d8aa14610719578063e8a3d4851461072f57600080fd5b8063920ac79d116100fd578063920ac79d1461061c578063938e3d7b1461063c57806397423cfa1461065c5780639e9cf6cd1461067c5780639fbc8713146106ac57600080fd5b8063704b6c021461054f57806372504a241461056f5780638a71bb2d1461058f5780638da5cb5b146105c45780638f742d16146105fc57600080fd5b80632eb2c2d6116101c757806351cff8d91161018b57806351cff8d91461049257806357df96d8146104b25780635a50d2f4146104d25780635edaaf87146104ff5780636cfa24cc1461052f57600080fd5b80632eb2c2d6146103d15780632f54bf6e146103f157806344dee598146104205780634e1273f4146104365780634f558e791461046357600080fd5b80631acbc8231161020e5780631acbc8231461032e5780631b004d141461034457806320e66bd31461035a578063220cdd21146103705780632a55205a1461039257600080fd5b8062fdd58e1461024a57806301ffc9a71461027d57806303504235146102ad5780630b58c8e8146102da5780630e89341c1461030e575b600080fd5b34801561025657600080fd5b5061026a6102653660046124c1565b610820565b6040519081526020015b60405180910390f35b34801561028957600080fd5b5061029d610298366004612504565b6108b9565b6040519015158152602001610274565b3480156102b957600080fd5b506102cd6102c8366004612521565b6108de565b604051610274919061258a565b3480156102e657600080fd5b5061026a7f000000000000000000000000000000000000000000000000000000000000000081565b34801561031a57600080fd5b506102cd610329366004612521565b6109b9565b34801561033a57600080fd5b5061026a60085481565b34801561035057600080fd5b5061026a61293681565b34801561036657600080fd5b5061026a6103e881565b34801561037c57600080fd5b5061039061038b366004612521565b6109f2565b005b34801561039e57600080fd5b506103b26103ad36600461259d565b610aa4565b604080516001600160a01b039093168352602083019190915201610274565b3480156103dd57600080fd5b506103906103ec366004612712565b610ae5565b3480156103fd57600080fd5b5061029d61040c3660046127bb565b6004546001600160a01b0391821691161490565b34801561042c57600080fd5b5061026a600b5481565b34801561044257600080fd5b506104566104513660046127d6565b610b31565b60405161027491906128db565b34801561046f57600080fd5b5061029d61047e366004612521565b600090815260036020526040902054151590565b34801561049e57600080fd5b506103906104ad3660046127bb565b610c5a565b3480156104be57600080fd5b506103906104cd366004612521565b610d19565b3480156104de57600080fd5b5061026a6104ed3660046128ee565b60096020526000908152604090205481565b34801561050b57600080fd5b5061029d61051a3660046127bb565b600c6020526000908152604090205460ff1681565b34801561053b57600080fd5b5061039061054a36600461290f565b610dc4565b34801561055b57600080fd5b5061039061056a3660046127bb565b610e30565b34801561057b57600080fd5b5061039061058a366004612957565b610ef3565b34801561059b57600080fd5b506006546105b190600160a01b900461ffff1681565b60405161ffff9091168152602001610274565b3480156105d057600080fd5b506004546105e4906001600160a01b031681565b6040516001600160a01b039091168152602001610274565b34801561060857600080fd5b506102cd610617366004612521565b610fd8565b34801561062857600080fd5b506102cd610637366004612521565b610ffe565b34801561064857600080fd5b5061039061065736600461290f565b61108d565b34801561066857600080fd5b50610390610677366004612995565b6110fd565b34801561068857600080fd5b5061029d6106973660046127bb565b600d6020526000908152604090205460ff1681565b3480156106b857600080fd5b506006546105e4906001600160a01b031681565b3480156106d857600080fd5b506103906106e7366004612a30565b611227565b3480156106f857600080fd5b5061026a610707366004612521565b60009081526003602052604090205490565b34801561072557600080fd5b5061026a600a5481565b34801561073b57600080fd5b506102cd611236565b34801561075057600080fd5b5061029d61075f366004612a61565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b61039061079b366004612521565b6112c4565b3480156107ac57600080fd5b506103906107bb366004612a94565b61162c565b3480156107cc57600080fd5b506103906107db3660046127bb565b611671565b3480156107ec57600080fd5b506102cd6107fb366004612521565b6116e9565b34801561080c57600080fd5b506005546105e4906001600160a01b031681565b60006001600160a01b0383166108905760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b0319821663152a902d60e11b14806108b357506108b382611718565b606060028211156109245760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081d1bdad95b88125160821b6044820152606401610887565b81610957575050604080518082019091526012815271042726f6e7a6520436974697a656e736869760741b602082015290565b6002820361098d575050604080518082019091526012815271053696c76657220436974697a656e736869760741b602082015290565b505060408051808201909152601081526f0476f6c6420436974697a656e736869760841b602082015290565b60606109cc6109c7836116e9565b611768565b6040516020016109dc9190612b0e565b6040516020818303038152906040529050919050565b6005546001600160a01b03163314610a1c5760405162461bcd60e51b815260040161088790612b53565b600b5415610a665760405162461bcd60e51b815260206004820152601760248201527613595c9adb19481c9bdbdd08185b1c9958591e481cd95d604a1b6044820152606401610887565b600b81905560405181815233907f7f3f7d96a1f0045fbb03711adb578bcbee23733d2dd8eefc455375639bbc19ff906020015b60405180910390a250565b60065460009081906001600160a01b0381169061271090610ad090600160a01b900461ffff1686612b89565b610ada9190612bb6565b915091509250929050565b6001600160a01b038516331480610b015750610b01853361075f565b610b1d5760405162461bcd60e51b815260040161088790612bca565b610b2a85858585856118ba565b5050505050565b60608151835114610b965760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610887565b600083516001600160401b03811115610bb157610bb16125bf565b604051908082528060200260200182016040528015610bda578160200160208202803683370190505b50905060005b8451811015610c5257610c25858281518110610bfe57610bfe612c19565b6020026020010151858381518110610c1857610c18612c19565b6020026020010151610820565b828281518110610c3757610c37612c19565b6020908102919091010152610c4b81612c2f565b9050610be0565b509392505050565b6005546001600160a01b03163314610c845760405162461bcd60e51b815260040161088790612b53565b4780610cca5760405162461bcd60e51b81526020600482015260156024820152744e6f2065746865727320746f20776974686472617760581b6044820152606401610887565b610cd48282611a9d565b6040518181526001600160a01b0383169033907f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398906020015b60405180910390a35050565b6005546001600160a01b03163314610d435760405162461bcd60e51b815260040161088790612b53565b600a5415610d8d5760405162461bcd60e51b815260206004820152601760248201527613595c9adb19481c9bdbdd08185b1c9958591e481cd95d604a1b6044820152606401610887565b600a81905560405181815233907fcf4d8beb8cd05e591ea1bd8bd7bc9ff775e6b564d6135f19643e452e1624ca8790602001610a99565b6005546001600160a01b03163314610dee5760405162461bcd60e51b815260040161088790612b53565b610df781611b3d565b336001600160a01b03167fff9f5326d1d2833dce5b39220446d89e1d49234ceacf56ad194c69a5cb423d2a82604051610a99919061258a565b6005546001600160a01b03163314610e5a5760405162461bcd60e51b815260040161088790612b53565b6005546001600160a01b03808316911603610ea95760405162461bcd60e51b815260206004820152600f60248201526e30b236b4b7101e9e902fb0b236b4b760891b6044820152606401610887565b600580546001600160a01b0319166001600160a01b0383169081179091556040517f71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c90600090a250565b6005546001600160a01b03163314610f1d5760405162461bcd60e51b815260040161088790612b53565b6001600160a01b038216151580610f36575061ffff8116155b610f755760405162461bcd60e51b815260206004820152601060248201526f34b73b30b634b2103932b1b2b4bb32b960811b6044820152606401610887565b600680546001600160a01b0384166001600160b01b03199091168117600160a01b61ffff8516908102919091179092556040519182529033907f9ca088b6b695032bcd5d1fa450e8fa2773391294f09e3710ace940c4ae8cffac90602001610d0d565b6060610fe46000611b49565b610fed83611bdd565b6040516020016109dc929190612c48565b606060028211156110445760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081d1bdad95b88125160821b6044820152606401610887565b8161105d57505060408051602081019091526000815290565b6002820361107957505060408051602081019091526000815290565b505060408051602081019091526000815290565b6005546001600160a01b031633146110b75760405162461bcd60e51b815260040161088790612b53565b60076110c38282612cf7565b50336001600160a01b03167f1ca91f64ead03abb06ea28975dfbf18044ac06f9fa1cb62a54ccc905df1028ed82604051610a99919061258a565b600a546040516bffffffffffffffffffffffff193360601b16602082015261113f91839160340160405160208183030381529060405280519060200120611ce5565b61117b5760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc811195b9a5959609a1b6044820152606401610887565b336000908152600c602052604090205460ff16156111cd5760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e4818db185a5b5959608a1b6044820152606401610887565b6111ea336002600160405180602001604052806000815250611cfb565b600160026040516001815233907fe38391cef209d6c2889e32d4f5a39e40e6a9dc77c54e854455cf262fdedbee799060200160405180910390a450565b611232338383611e1e565b5050565b6007805461124390612c77565b80601f016020809104026020016040519081016040528092919081815260200182805461126f90612c77565b80156112bc5780601f10611291576101008083540402835291602001916112bc565b820191906000526020600020905b81548152906001019060200180831161129f57829003601f168201915b505050505081565b60006112f07f000000000000000000000000000000000000000000000000000000000000000083612b89565b9050803410156113365760405162461bcd60e51b81526020600482015260116024820152704e6f7420656e6f7567682065746865727360781b6044820152606401610887565b612936826008546113479190612db6565b111561138a5760405162461bcd60e51b81526020600482015260126024820152715f616d6f756e7420697320746f6f2062696760701b6044820152606401610887565b6008546040516bffffffffffffffffffffffff193360601b1660208201524260348201526054810184905260748101919091526000906094016040516020818303038152906040528051906020012060001c905060006113e8612487565b60005b858110156114e5576113ff6103e885612dc9565b6000805260096020527fec8156718a8372b1db44bb411437d0870f3e3790d4a08526d024ce1b0b668f6b5490935083101561144e578160005b60200201805161144790612c2f565b905261149b565b600160005260096020527f92e85d02570a8092d09a6e3a57665bc3815a2699a4074001bf1ccabf660f5a365483101561148957816001611438565b60408201805161149890612c2f565b90525b6114a76103e885612bb6565b6040516020016114b991815260200190565b60408051601f1981840301815291905280516020909101209350806114dd81612c2f565b9150506113eb565b5060005b60038160ff1610156115ed57818160ff166003811061150a5761150a612c19565b6020020151156115db5761155533611523836001612ddd565b60ff16848460ff166003811061153b5761153b612c19565b602002015160405180602001604052806000815250611cfb565b6000611562826001612ddd565b60ff16600281111561157657611576612af8565b600281111561158757611587612af8565b337fe38391cef209d6c2889e32d4f5a39e40e6a9dc77c54e854455cf262fdedbee798560ff8616600381106115be576115be612c19565b60200201516040516115d291815260200190565b60405180910390a45b806115e581612df6565b9150506114e9565b5084600860008282546116009190612db6565b90915550600090506116128534612e15565b90508015611624576116243382611a9d565b505050505050565b6001600160a01b0385163314806116485750611648853361075f565b6116645760405162461bcd60e51b815260040161088790612bca565b610b2a8585858585611efe565b6005546001600160a01b0316331461169b5760405162461bcd60e51b815260040161088790612b53565b600480546001600160a01b0319166001600160a01b038316908117909155604051819033907fb9312e2100469bd44e3f762c248f4dcc8d7788906fabf34f79db45920c37e26990600090a450565b60606116f4826108de565b6116fd83610ffe565b61170684610fd8565b6040516020016109dc93929190612e28565b60006001600160e01b03198216636cdb3d1360e11b148061174957506001600160e01b031982166303a24d0760e21b145b806108b357506301ffc9a760e01b6001600160e01b03198316146108b3565b6060815160000361178757505060408051602081019091526000815290565b600060405180606001604052806040815260200161312d60409139905060006003845160026117b69190612db6565b6117c09190612bb6565b6117cb906004612b89565b6001600160401b038111156117e2576117e26125bf565b6040519080825280601f01601f19166020018201604052801561180c576020820181803683370190505b509050600182016020820185865187015b80821015611878576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f811685015184535060018301925061181d565b505060038651066001811461189457600281146118a7576118af565b603d6001830353603d60028303536118af565b603d60018303535b509195945050505050565b815183511461191c5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610887565b6001600160a01b0384166119425760405162461bcd60e51b815260040161088790612ecd565b33611951818787878787612036565b60005b8451811015611a3757600085828151811061197157611971612c19565b60200260200101519050600085838151811061198f5761198f612c19565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156119df5760405162461bcd60e51b815260040161088790612f12565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611a1c908490612db6565b9250508190555050505080611a3090612c2f565b9050611954565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611a87929190612f5c565b60405180910390a46116248187878787876121af565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611aea576040519150601f19603f3d011682016040523d82523d6000602084013e611aef565b606091505b5050905080611b385760405162461bcd60e51b81526020600482015260156024820152744661696c65642073656e64696e672065746865727360581b6044820152606401610887565b505050565b60026112328282612cf7565b606060028054611b5890612c77565b80601f0160208091040260200160405190810160405280929190818152602001828054611b8490612c77565b8015611bd15780601f10611ba657610100808354040283529160200191611bd1565b820191906000526020600020905b815481529060010190602001808311611bb457829003601f168201915b50505050509050919050565b606081600003611c045750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611c2e5780611c1881612c2f565b9150611c279050600a83612bb6565b9150611c08565b6000816001600160401b03811115611c4857611c486125bf565b6040519080825280601f01601f191660200182016040528015611c72576020820181803683370190505b5090505b8415611cdd57611c87600183612e15565b9150611c94600a86612dc9565b611c9f906030612db6565b60f81b818381518110611cb457611cb4612c19565b60200101906001600160f81b031916908160001a905350611cd6600a86612bb6565b9450611c76565b949350505050565b600082611cf2858461230a565b14949350505050565b6001600160a01b038416611d5b5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610887565b336000611d678561234f565b90506000611d748561234f565b9050611d8583600089858589612036565b6000868152602081815260408083206001600160a01b038b16845290915281208054879290611db5908490612db6565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611e158360008989898961239a565b50505050505050565b816001600160a01b0316836001600160a01b031603611e915760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610887565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416611f245760405162461bcd60e51b815260040161088790612ecd565b336000611f308561234f565b90506000611f3d8561234f565b9050611f4d838989858589612036565b6000868152602081815260408083206001600160a01b038c16845290915290205485811015611f8e5760405162461bcd60e51b815260040161088790612f12565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290611fcb908490612db6565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461202b848a8a8a8a8a61239a565b505050505050505050565b6001600160a01b0385166120bd5760005b83518110156120bb5782818151811061206257612062612c19565b60200260200101516003600086848151811061208057612080612c19565b6020026020010151815260200190815260200160002060008282546120a59190612db6565b909155506120b4905081612c2f565b9050612047565b505b6001600160a01b0384166116245760005b8351811015611e155760008482815181106120eb576120eb612c19565b60200260200101519050600084838151811061210957612109612c19565b602002602001015190506000600360008481526020019081526020016000205490508181101561218c5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f74604482015267616c537570706c7960c01b6064820152608401610887565b600092835260036020526040909220910390556121a881612c2f565b90506120ce565b6001600160a01b0384163b156116245760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906121f39089908990889088908890600401612f8a565b6020604051808303816000875af192505050801561222e575060408051601f3d908101601f1916820190925261222b91810190612fe8565b60015b6122da5761223a613005565b806308c379a003612273575061224e613021565b806122595750612275565b8060405162461bcd60e51b8152600401610887919061258a565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610887565b6001600160e01b0319811663bc197c8160e01b14611e155760405162461bcd60e51b8152600401610887906130aa565b600081815b8451811015610c525761233b8286838151811061232e5761232e612c19565b6020026020010151612455565b91508061234781612c2f565b91505061230f565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061238957612389612c19565b602090810291909101015292915050565b6001600160a01b0384163b156116245760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906123de90899089908890889088906004016130f2565b6020604051808303816000875af1925050508015612419575060408051601f3d908101601f1916820190925261241691810190612fe8565b60015b6124255761223a613005565b6001600160e01b0319811663f23a6e6160e01b14611e155760405162461bcd60e51b8152600401610887906130aa565b6000818310612471576000828152602084905260409020612480565b60008381526020839052604090205b9392505050565b60405180606001604052806003906020820280368337509192915050565b80356001600160a01b03811681146124bc57600080fd5b919050565b600080604083850312156124d457600080fd5b6124dd836124a5565b946020939093013593505050565b6001600160e01b03198116811461250157600080fd5b50565b60006020828403121561251657600080fd5b8135612480816124eb565b60006020828403121561253357600080fd5b5035919050565b60005b8381101561255557818101518382015260200161253d565b50506000910152565b6000815180845261257681602086016020860161253a565b601f01601f19169290920160200192915050565b602081526000612480602083018461255e565b600080604083850312156125b057600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b03811182821017156125fa576125fa6125bf565b6040525050565b60006001600160401b0382111561261a5761261a6125bf565b5060051b60200190565b600082601f83011261263557600080fd5b8135602061264282612601565b60405161264f82826125d5565b83815260059390931b850182019282810191508684111561266f57600080fd5b8286015b8481101561268a5780358352918301918301612673565b509695505050505050565b60006001600160401b038311156126ae576126ae6125bf565b6040516126c5601f8501601f1916602001826125d5565b8091508381528484840111156126da57600080fd5b83836020830137600060208583010152509392505050565b600082601f83011261270357600080fd5b61248083833560208501612695565b600080600080600060a0868803121561272a57600080fd5b612733866124a5565b9450612741602087016124a5565b935060408601356001600160401b038082111561275d57600080fd5b61276989838a01612624565b9450606088013591508082111561277f57600080fd5b61278b89838a01612624565b935060808801359150808211156127a157600080fd5b506127ae888289016126f2565b9150509295509295909350565b6000602082840312156127cd57600080fd5b612480826124a5565b600080604083850312156127e957600080fd5b82356001600160401b038082111561280057600080fd5b818501915085601f83011261281457600080fd5b8135602061282182612601565b60405161282e82826125d5565b83815260059390931b850182019282810191508984111561284e57600080fd5b948201945b8386101561287357612864866124a5565b82529482019490820190612853565b9650508601359250508082111561288957600080fd5b5061289685828601612624565b9150509250929050565b600081518084526020808501945080840160005b838110156128d0578151875295820195908201906001016128b4565b509495945050505050565b60208152600061248060208301846128a0565b60006020828403121561290057600080fd5b81356003811061248057600080fd5b60006020828403121561292157600080fd5b81356001600160401b0381111561293757600080fd5b8201601f8101841361294857600080fd5b611cdd84823560208401612695565b6000806040838503121561296a57600080fd5b612973836124a5565b9150602083013561ffff8116811461298a57600080fd5b809150509250929050565b600060208083850312156129a857600080fd5b82356001600160401b038111156129be57600080fd5b8301601f810185136129cf57600080fd5b80356129da81612601565b6040516129e782826125d5565b82815260059290921b8301840191848101915087831115612a0757600080fd5b928401925b82841015612a2557833582529284019290840190612a0c565b979650505050505050565b60008060408385031215612a4357600080fd5b612a4c836124a5565b91506020830135801515811461298a57600080fd5b60008060408385031215612a7457600080fd5b612a7d836124a5565b9150612a8b602084016124a5565b90509250929050565b600080600080600060a08688031215612aac57600080fd5b612ab5866124a5565b9450612ac3602087016124a5565b9350604086013592506060860135915060808601356001600160401b03811115612aec57600080fd5b6127ae888289016126f2565b634e487b7160e01b600052602160045260246000fd5b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251612b4681601d85016020870161253a565b91909101601d0192915050565b60208082526006908201526510b0b236b4b760d11b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176108b3576108b3612b73565b634e487b7160e01b600052601260045260246000fd5b600082612bc557612bc5612ba0565b500490565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526e195c881b9bdc88185c1c1c9bdd9959608a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b600060018201612c4157612c41612b73565b5060010190565b60008351612c5a81846020880161253a565b835190830190612c6e81836020880161253a565b01949350505050565b600181811c90821680612c8b57607f821691505b602082108103612cab57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115611b3857600081815260208120601f850160051c81016020861015612cd85750805b601f850160051c820191505b8181101561162457828155600101612ce4565b81516001600160401b03811115612d1057612d106125bf565b612d2481612d1e8454612c77565b84612cb1565b602080601f831160018114612d595760008415612d415750858301515b600019600386901b1c1916600185901b178555611624565b600085815260208120601f198616915b82811015612d8857888601518255948401946001909101908401612d69565b5085821015612da65787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156108b3576108b3612b73565b600082612dd857612dd8612ba0565b500690565b60ff81811683821601908111156108b3576108b3612b73565b600060ff821660ff8103612e0c57612e0c612b73565b60010192915050565b818103818111156108b3576108b3612b73565b6a3d90113730b6b2911d101160a91b81528351600090612e4f81600b85016020890161253a565b72111610113232b9b1b934b83a34b7b7111d101160691b600b918401918201528451612e8281601e84016020890161253a565b6c1116101134b6b0b3b2911d101160991b601e92909101918201528351612eb081602b84016020880161253a565b6222207d60e81b602b9290910191820152602e0195945050505050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b604081526000612f6f60408301856128a0565b8281036020840152612f8181856128a0565b95945050505050565b6001600160a01b0386811682528516602082015260a060408201819052600090612fb6908301866128a0565b8281036060840152612fc881866128a0565b90508281036080840152612fdc818561255e565b98975050505050505050565b600060208284031215612ffa57600080fd5b8151612480816124eb565b600060033d111561301e5760046000803e5060005160e01c5b90565b600060443d101561302f5790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561305e57505050505090565b82850191508151818111156130765750505050505090565b843d87010160208285010111156130905750505050505090565b61309f602082860101876125d5565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612a259083018461255e56fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212206dc4b86b64523539479a5a79dfcb197b2de9cc76935fd73b841ab25e3b92809f64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106102455760003560e01c8063704b6c0211610139578063a09cfa55116100b6578063e985e9c51161007a578063e985e9c514610744578063efef39a11461078d578063f242432a146107a0578063f2fde38b146107c0578063f5c0a5ff146107e0578063f851a4401461080057600080fd5b8063a09cfa551461065c578063a22cb465146106cc578063bd85b039146106ec578063e613d8aa14610719578063e8a3d4851461072f57600080fd5b8063920ac79d116100fd578063920ac79d1461061c578063938e3d7b1461063c57806397423cfa1461065c5780639e9cf6cd1461067c5780639fbc8713146106ac57600080fd5b8063704b6c021461054f57806372504a241461056f5780638a71bb2d1461058f5780638da5cb5b146105c45780638f742d16146105fc57600080fd5b80632eb2c2d6116101c757806351cff8d91161018b57806351cff8d91461049257806357df96d8146104b25780635a50d2f4146104d25780635edaaf87146104ff5780636cfa24cc1461052f57600080fd5b80632eb2c2d6146103d15780632f54bf6e146103f157806344dee598146104205780634e1273f4146104365780634f558e791461046357600080fd5b80631acbc8231161020e5780631acbc8231461032e5780631b004d141461034457806320e66bd31461035a578063220cdd21146103705780632a55205a1461039257600080fd5b8062fdd58e1461024a57806301ffc9a71461027d57806303504235146102ad5780630b58c8e8146102da5780630e89341c1461030e575b600080fd5b34801561025657600080fd5b5061026a6102653660046124c1565b610820565b6040519081526020015b60405180910390f35b34801561028957600080fd5b5061029d610298366004612504565b6108b9565b6040519015158152602001610274565b3480156102b957600080fd5b506102cd6102c8366004612521565b6108de565b604051610274919061258a565b3480156102e657600080fd5b5061026a7f000000000000000000000000000000000000000000000000000000000000000081565b34801561031a57600080fd5b506102cd610329366004612521565b6109b9565b34801561033a57600080fd5b5061026a60085481565b34801561035057600080fd5b5061026a61293681565b34801561036657600080fd5b5061026a6103e881565b34801561037c57600080fd5b5061039061038b366004612521565b6109f2565b005b34801561039e57600080fd5b506103b26103ad36600461259d565b610aa4565b604080516001600160a01b039093168352602083019190915201610274565b3480156103dd57600080fd5b506103906103ec366004612712565b610ae5565b3480156103fd57600080fd5b5061029d61040c3660046127bb565b6004546001600160a01b0391821691161490565b34801561042c57600080fd5b5061026a600b5481565b34801561044257600080fd5b506104566104513660046127d6565b610b31565b60405161027491906128db565b34801561046f57600080fd5b5061029d61047e366004612521565b600090815260036020526040902054151590565b34801561049e57600080fd5b506103906104ad3660046127bb565b610c5a565b3480156104be57600080fd5b506103906104cd366004612521565b610d19565b3480156104de57600080fd5b5061026a6104ed3660046128ee565b60096020526000908152604090205481565b34801561050b57600080fd5b5061029d61051a3660046127bb565b600c6020526000908152604090205460ff1681565b34801561053b57600080fd5b5061039061054a36600461290f565b610dc4565b34801561055b57600080fd5b5061039061056a3660046127bb565b610e30565b34801561057b57600080fd5b5061039061058a366004612957565b610ef3565b34801561059b57600080fd5b506006546105b190600160a01b900461ffff1681565b60405161ffff9091168152602001610274565b3480156105d057600080fd5b506004546105e4906001600160a01b031681565b6040516001600160a01b039091168152602001610274565b34801561060857600080fd5b506102cd610617366004612521565b610fd8565b34801561062857600080fd5b506102cd610637366004612521565b610ffe565b34801561064857600080fd5b5061039061065736600461290f565b61108d565b34801561066857600080fd5b50610390610677366004612995565b6110fd565b34801561068857600080fd5b5061029d6106973660046127bb565b600d6020526000908152604090205460ff1681565b3480156106b857600080fd5b506006546105e4906001600160a01b031681565b3480156106d857600080fd5b506103906106e7366004612a30565b611227565b3480156106f857600080fd5b5061026a610707366004612521565b60009081526003602052604090205490565b34801561072557600080fd5b5061026a600a5481565b34801561073b57600080fd5b506102cd611236565b34801561075057600080fd5b5061029d61075f366004612a61565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b61039061079b366004612521565b6112c4565b3480156107ac57600080fd5b506103906107bb366004612a94565b61162c565b3480156107cc57600080fd5b506103906107db3660046127bb565b611671565b3480156107ec57600080fd5b506102cd6107fb366004612521565b6116e9565b34801561080c57600080fd5b506005546105e4906001600160a01b031681565b60006001600160a01b0383166108905760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b0319821663152a902d60e11b14806108b357506108b382611718565b606060028211156109245760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081d1bdad95b88125160821b6044820152606401610887565b81610957575050604080518082019091526012815271042726f6e7a6520436974697a656e736869760741b602082015290565b6002820361098d575050604080518082019091526012815271053696c76657220436974697a656e736869760741b602082015290565b505060408051808201909152601081526f0476f6c6420436974697a656e736869760841b602082015290565b60606109cc6109c7836116e9565b611768565b6040516020016109dc9190612b0e565b6040516020818303038152906040529050919050565b6005546001600160a01b03163314610a1c5760405162461bcd60e51b815260040161088790612b53565b600b5415610a665760405162461bcd60e51b815260206004820152601760248201527613595c9adb19481c9bdbdd08185b1c9958591e481cd95d604a1b6044820152606401610887565b600b81905560405181815233907f7f3f7d96a1f0045fbb03711adb578bcbee23733d2dd8eefc455375639bbc19ff906020015b60405180910390a250565b60065460009081906001600160a01b0381169061271090610ad090600160a01b900461ffff1686612b89565b610ada9190612bb6565b915091509250929050565b6001600160a01b038516331480610b015750610b01853361075f565b610b1d5760405162461bcd60e51b815260040161088790612bca565b610b2a85858585856118ba565b5050505050565b60608151835114610b965760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610887565b600083516001600160401b03811115610bb157610bb16125bf565b604051908082528060200260200182016040528015610bda578160200160208202803683370190505b50905060005b8451811015610c5257610c25858281518110610bfe57610bfe612c19565b6020026020010151858381518110610c1857610c18612c19565b6020026020010151610820565b828281518110610c3757610c37612c19565b6020908102919091010152610c4b81612c2f565b9050610be0565b509392505050565b6005546001600160a01b03163314610c845760405162461bcd60e51b815260040161088790612b53565b4780610cca5760405162461bcd60e51b81526020600482015260156024820152744e6f2065746865727320746f20776974686472617760581b6044820152606401610887565b610cd48282611a9d565b6040518181526001600160a01b0383169033907f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398906020015b60405180910390a35050565b6005546001600160a01b03163314610d435760405162461bcd60e51b815260040161088790612b53565b600a5415610d8d5760405162461bcd60e51b815260206004820152601760248201527613595c9adb19481c9bdbdd08185b1c9958591e481cd95d604a1b6044820152606401610887565b600a81905560405181815233907fcf4d8beb8cd05e591ea1bd8bd7bc9ff775e6b564d6135f19643e452e1624ca8790602001610a99565b6005546001600160a01b03163314610dee5760405162461bcd60e51b815260040161088790612b53565b610df781611b3d565b336001600160a01b03167fff9f5326d1d2833dce5b39220446d89e1d49234ceacf56ad194c69a5cb423d2a82604051610a99919061258a565b6005546001600160a01b03163314610e5a5760405162461bcd60e51b815260040161088790612b53565b6005546001600160a01b03808316911603610ea95760405162461bcd60e51b815260206004820152600f60248201526e30b236b4b7101e9e902fb0b236b4b760891b6044820152606401610887565b600580546001600160a01b0319166001600160a01b0383169081179091556040517f71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c90600090a250565b6005546001600160a01b03163314610f1d5760405162461bcd60e51b815260040161088790612b53565b6001600160a01b038216151580610f36575061ffff8116155b610f755760405162461bcd60e51b815260206004820152601060248201526f34b73b30b634b2103932b1b2b4bb32b960811b6044820152606401610887565b600680546001600160a01b0384166001600160b01b03199091168117600160a01b61ffff8516908102919091179092556040519182529033907f9ca088b6b695032bcd5d1fa450e8fa2773391294f09e3710ace940c4ae8cffac90602001610d0d565b6060610fe46000611b49565b610fed83611bdd565b6040516020016109dc929190612c48565b606060028211156110445760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081d1bdad95b88125160821b6044820152606401610887565b8161105d57505060408051602081019091526000815290565b6002820361107957505060408051602081019091526000815290565b505060408051602081019091526000815290565b6005546001600160a01b031633146110b75760405162461bcd60e51b815260040161088790612b53565b60076110c38282612cf7565b50336001600160a01b03167f1ca91f64ead03abb06ea28975dfbf18044ac06f9fa1cb62a54ccc905df1028ed82604051610a99919061258a565b600a546040516bffffffffffffffffffffffff193360601b16602082015261113f91839160340160405160208183030381529060405280519060200120611ce5565b61117b5760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc811195b9a5959609a1b6044820152606401610887565b336000908152600c602052604090205460ff16156111cd5760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e4818db185a5b5959608a1b6044820152606401610887565b6111ea336002600160405180602001604052806000815250611cfb565b600160026040516001815233907fe38391cef209d6c2889e32d4f5a39e40e6a9dc77c54e854455cf262fdedbee799060200160405180910390a450565b611232338383611e1e565b5050565b6007805461124390612c77565b80601f016020809104026020016040519081016040528092919081815260200182805461126f90612c77565b80156112bc5780601f10611291576101008083540402835291602001916112bc565b820191906000526020600020905b81548152906001019060200180831161129f57829003601f168201915b505050505081565b60006112f07f000000000000000000000000000000000000000000000000000000000000000083612b89565b9050803410156113365760405162461bcd60e51b81526020600482015260116024820152704e6f7420656e6f7567682065746865727360781b6044820152606401610887565b612936826008546113479190612db6565b111561138a5760405162461bcd60e51b81526020600482015260126024820152715f616d6f756e7420697320746f6f2062696760701b6044820152606401610887565b6008546040516bffffffffffffffffffffffff193360601b1660208201524260348201526054810184905260748101919091526000906094016040516020818303038152906040528051906020012060001c905060006113e8612487565b60005b858110156114e5576113ff6103e885612dc9565b6000805260096020527fec8156718a8372b1db44bb411437d0870f3e3790d4a08526d024ce1b0b668f6b5490935083101561144e578160005b60200201805161144790612c2f565b905261149b565b600160005260096020527f92e85d02570a8092d09a6e3a57665bc3815a2699a4074001bf1ccabf660f5a365483101561148957816001611438565b60408201805161149890612c2f565b90525b6114a76103e885612bb6565b6040516020016114b991815260200190565b60408051601f1981840301815291905280516020909101209350806114dd81612c2f565b9150506113eb565b5060005b60038160ff1610156115ed57818160ff166003811061150a5761150a612c19565b6020020151156115db5761155533611523836001612ddd565b60ff16848460ff166003811061153b5761153b612c19565b602002015160405180602001604052806000815250611cfb565b6000611562826001612ddd565b60ff16600281111561157657611576612af8565b600281111561158757611587612af8565b337fe38391cef209d6c2889e32d4f5a39e40e6a9dc77c54e854455cf262fdedbee798560ff8616600381106115be576115be612c19565b60200201516040516115d291815260200190565b60405180910390a45b806115e581612df6565b9150506114e9565b5084600860008282546116009190612db6565b90915550600090506116128534612e15565b90508015611624576116243382611a9d565b505050505050565b6001600160a01b0385163314806116485750611648853361075f565b6116645760405162461bcd60e51b815260040161088790612bca565b610b2a8585858585611efe565b6005546001600160a01b0316331461169b5760405162461bcd60e51b815260040161088790612b53565b600480546001600160a01b0319166001600160a01b038316908117909155604051819033907fb9312e2100469bd44e3f762c248f4dcc8d7788906fabf34f79db45920c37e26990600090a450565b60606116f4826108de565b6116fd83610ffe565b61170684610fd8565b6040516020016109dc93929190612e28565b60006001600160e01b03198216636cdb3d1360e11b148061174957506001600160e01b031982166303a24d0760e21b145b806108b357506301ffc9a760e01b6001600160e01b03198316146108b3565b6060815160000361178757505060408051602081019091526000815290565b600060405180606001604052806040815260200161312d60409139905060006003845160026117b69190612db6565b6117c09190612bb6565b6117cb906004612b89565b6001600160401b038111156117e2576117e26125bf565b6040519080825280601f01601f19166020018201604052801561180c576020820181803683370190505b509050600182016020820185865187015b80821015611878576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f811685015184535060018301925061181d565b505060038651066001811461189457600281146118a7576118af565b603d6001830353603d60028303536118af565b603d60018303535b509195945050505050565b815183511461191c5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610887565b6001600160a01b0384166119425760405162461bcd60e51b815260040161088790612ecd565b33611951818787878787612036565b60005b8451811015611a3757600085828151811061197157611971612c19565b60200260200101519050600085838151811061198f5761198f612c19565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156119df5760405162461bcd60e51b815260040161088790612f12565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611a1c908490612db6565b9250508190555050505080611a3090612c2f565b9050611954565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611a87929190612f5c565b60405180910390a46116248187878787876121af565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611aea576040519150601f19603f3d011682016040523d82523d6000602084013e611aef565b606091505b5050905080611b385760405162461bcd60e51b81526020600482015260156024820152744661696c65642073656e64696e672065746865727360581b6044820152606401610887565b505050565b60026112328282612cf7565b606060028054611b5890612c77565b80601f0160208091040260200160405190810160405280929190818152602001828054611b8490612c77565b8015611bd15780601f10611ba657610100808354040283529160200191611bd1565b820191906000526020600020905b815481529060010190602001808311611bb457829003601f168201915b50505050509050919050565b606081600003611c045750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611c2e5780611c1881612c2f565b9150611c279050600a83612bb6565b9150611c08565b6000816001600160401b03811115611c4857611c486125bf565b6040519080825280601f01601f191660200182016040528015611c72576020820181803683370190505b5090505b8415611cdd57611c87600183612e15565b9150611c94600a86612dc9565b611c9f906030612db6565b60f81b818381518110611cb457611cb4612c19565b60200101906001600160f81b031916908160001a905350611cd6600a86612bb6565b9450611c76565b949350505050565b600082611cf2858461230a565b14949350505050565b6001600160a01b038416611d5b5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610887565b336000611d678561234f565b90506000611d748561234f565b9050611d8583600089858589612036565b6000868152602081815260408083206001600160a01b038b16845290915281208054879290611db5908490612db6565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611e158360008989898961239a565b50505050505050565b816001600160a01b0316836001600160a01b031603611e915760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610887565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416611f245760405162461bcd60e51b815260040161088790612ecd565b336000611f308561234f565b90506000611f3d8561234f565b9050611f4d838989858589612036565b6000868152602081815260408083206001600160a01b038c16845290915290205485811015611f8e5760405162461bcd60e51b815260040161088790612f12565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290611fcb908490612db6565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461202b848a8a8a8a8a61239a565b505050505050505050565b6001600160a01b0385166120bd5760005b83518110156120bb5782818151811061206257612062612c19565b60200260200101516003600086848151811061208057612080612c19565b6020026020010151815260200190815260200160002060008282546120a59190612db6565b909155506120b4905081612c2f565b9050612047565b505b6001600160a01b0384166116245760005b8351811015611e155760008482815181106120eb576120eb612c19565b60200260200101519050600084838151811061210957612109612c19565b602002602001015190506000600360008481526020019081526020016000205490508181101561218c5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f74604482015267616c537570706c7960c01b6064820152608401610887565b600092835260036020526040909220910390556121a881612c2f565b90506120ce565b6001600160a01b0384163b156116245760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906121f39089908990889088908890600401612f8a565b6020604051808303816000875af192505050801561222e575060408051601f3d908101601f1916820190925261222b91810190612fe8565b60015b6122da5761223a613005565b806308c379a003612273575061224e613021565b806122595750612275565b8060405162461bcd60e51b8152600401610887919061258a565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610887565b6001600160e01b0319811663bc197c8160e01b14611e155760405162461bcd60e51b8152600401610887906130aa565b600081815b8451811015610c525761233b8286838151811061232e5761232e612c19565b6020026020010151612455565b91508061234781612c2f565b91505061230f565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061238957612389612c19565b602090810291909101015292915050565b6001600160a01b0384163b156116245760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906123de90899089908890889088906004016130f2565b6020604051808303816000875af1925050508015612419575060408051601f3d908101601f1916820190925261241691810190612fe8565b60015b6124255761223a613005565b6001600160e01b0319811663f23a6e6160e01b14611e155760405162461bcd60e51b8152600401610887906130aa565b6000818310612471576000828152602084905260409020612480565b60008381526020839052604090205b9392505050565b60405180606001604052806003906020820280368337509192915050565b80356001600160a01b03811681146124bc57600080fd5b919050565b600080604083850312156124d457600080fd5b6124dd836124a5565b946020939093013593505050565b6001600160e01b03198116811461250157600080fd5b50565b60006020828403121561251657600080fd5b8135612480816124eb565b60006020828403121561253357600080fd5b5035919050565b60005b8381101561255557818101518382015260200161253d565b50506000910152565b6000815180845261257681602086016020860161253a565b601f01601f19169290920160200192915050565b602081526000612480602083018461255e565b600080604083850312156125b057600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b03811182821017156125fa576125fa6125bf565b6040525050565b60006001600160401b0382111561261a5761261a6125bf565b5060051b60200190565b600082601f83011261263557600080fd5b8135602061264282612601565b60405161264f82826125d5565b83815260059390931b850182019282810191508684111561266f57600080fd5b8286015b8481101561268a5780358352918301918301612673565b509695505050505050565b60006001600160401b038311156126ae576126ae6125bf565b6040516126c5601f8501601f1916602001826125d5565b8091508381528484840111156126da57600080fd5b83836020830137600060208583010152509392505050565b600082601f83011261270357600080fd5b61248083833560208501612695565b600080600080600060a0868803121561272a57600080fd5b612733866124a5565b9450612741602087016124a5565b935060408601356001600160401b038082111561275d57600080fd5b61276989838a01612624565b9450606088013591508082111561277f57600080fd5b61278b89838a01612624565b935060808801359150808211156127a157600080fd5b506127ae888289016126f2565b9150509295509295909350565b6000602082840312156127cd57600080fd5b612480826124a5565b600080604083850312156127e957600080fd5b82356001600160401b038082111561280057600080fd5b818501915085601f83011261281457600080fd5b8135602061282182612601565b60405161282e82826125d5565b83815260059390931b850182019282810191508984111561284e57600080fd5b948201945b8386101561287357612864866124a5565b82529482019490820190612853565b9650508601359250508082111561288957600080fd5b5061289685828601612624565b9150509250929050565b600081518084526020808501945080840160005b838110156128d0578151875295820195908201906001016128b4565b509495945050505050565b60208152600061248060208301846128a0565b60006020828403121561290057600080fd5b81356003811061248057600080fd5b60006020828403121561292157600080fd5b81356001600160401b0381111561293757600080fd5b8201601f8101841361294857600080fd5b611cdd84823560208401612695565b6000806040838503121561296a57600080fd5b612973836124a5565b9150602083013561ffff8116811461298a57600080fd5b809150509250929050565b600060208083850312156129a857600080fd5b82356001600160401b038111156129be57600080fd5b8301601f810185136129cf57600080fd5b80356129da81612601565b6040516129e782826125d5565b82815260059290921b8301840191848101915087831115612a0757600080fd5b928401925b82841015612a2557833582529284019290840190612a0c565b979650505050505050565b60008060408385031215612a4357600080fd5b612a4c836124a5565b91506020830135801515811461298a57600080fd5b60008060408385031215612a7457600080fd5b612a7d836124a5565b9150612a8b602084016124a5565b90509250929050565b600080600080600060a08688031215612aac57600080fd5b612ab5866124a5565b9450612ac3602087016124a5565b9350604086013592506060860135915060808601356001600160401b03811115612aec57600080fd5b6127ae888289016126f2565b634e487b7160e01b600052602160045260246000fd5b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251612b4681601d85016020870161253a565b91909101601d0192915050565b60208082526006908201526510b0b236b4b760d11b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176108b3576108b3612b73565b634e487b7160e01b600052601260045260246000fd5b600082612bc557612bc5612ba0565b500490565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526e195c881b9bdc88185c1c1c9bdd9959608a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b600060018201612c4157612c41612b73565b5060010190565b60008351612c5a81846020880161253a565b835190830190612c6e81836020880161253a565b01949350505050565b600181811c90821680612c8b57607f821691505b602082108103612cab57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115611b3857600081815260208120601f850160051c81016020861015612cd85750805b601f850160051c820191505b8181101561162457828155600101612ce4565b81516001600160401b03811115612d1057612d106125bf565b612d2481612d1e8454612c77565b84612cb1565b602080601f831160018114612d595760008415612d415750858301515b600019600386901b1c1916600185901b178555611624565b600085815260208120601f198616915b82811015612d8857888601518255948401946001909101908401612d69565b5085821015612da65787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156108b3576108b3612b73565b600082612dd857612dd8612ba0565b500690565b60ff81811683821601908111156108b3576108b3612b73565b600060ff821660ff8103612e0c57612e0c612b73565b60010192915050565b818103818111156108b3576108b3612b73565b6a3d90113730b6b2911d101160a91b81528351600090612e4f81600b85016020890161253a565b72111610113232b9b1b934b83a34b7b7111d101160691b600b918401918201528451612e8281601e84016020890161253a565b6c1116101134b6b0b3b2911d101160991b601e92909101918201528351612eb081602b84016020880161253a565b6222207d60e81b602b9290910191820152602e0195945050505050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b604081526000612f6f60408301856128a0565b8281036020840152612f8181856128a0565b95945050505050565b6001600160a01b0386811682528516602082015260a060408201819052600090612fb6908301866128a0565b8281036060840152612fc881866128a0565b90508281036080840152612fdc818561255e565b98975050505050505050565b600060208284031215612ffa57600080fd5b8151612480816124eb565b600060033d111561301e5760046000803e5060005160e01c5b90565b600060443d101561302f5790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561305e57505050505090565b82850191508151818111156130765750505050505090565b843d87010160208285010111156130905750505050505090565b61309f602082860101876125d5565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612a259083018461255e56fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212206dc4b86b64523539479a5a79dfcb197b2de9cc76935fd73b841ab25e3b92809f64736f6c63430008110033",
  "devdoc": {
    "author": "Horizon DAO (Yuri Fernandes)",
    "events": {
      "CitizenshipClaimed(address,uint8,bool,uint256)": {
        "details": "Emitted when an amount of citizenship NFTs are claimed"
      },
      "GoldMerkleRootSet(address,bytes32)": {
        "details": "Emitted when gold merkle root is set (only possible one time)"
      },
      "NewImageUri(address,string)": {
        "details": "Emitted when a new base image URI is set for the collections"
      },
      "SilverMerkleRootSet(address,bytes32)": {
        "details": "Emitted when silver merkle root is set (only possible one time)"
      },
      "Withdrawal(address,address,uint256)": {
        "details": "Emitted when ethers are withdrawn from the contract"
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "claimGold(bytes32[])": {
        "details": "Used for whitelisted gold citizenship claims",
        "params": {
          "_proof": "Merkle proof for the executing address"
        }
      },
      "claimSilver(bytes32[])": {
        "details": "Used for whitelisted silver citizenship claims",
        "params": {
          "_proof": "Merkle proof for the executing address"
        }
      },
      "collectionDescription(uint256)": {
        "params": {
          "_id": "Collection ID"
        },
        "returns": {
          "_0": "Collection description"
        }
      },
      "collectionMetadata(uint256)": {
        "params": {
          "_id": "Collection ID"
        },
        "returns": {
          "_0": "Stringified metadata JSON"
        }
      },
      "collectionName(uint256)": {
        "params": {
          "_id": "Collection ID"
        },
        "returns": {
          "_0": "Collection name"
        }
      },
      "constructor": {
        "details": "constructor to initialize CitizenshipPromoERC1155 contract",
        "params": {
          "_admin": "Adminstrative address, can execute various configuration related functions",
          "_chances": "Array with the chances of getting a citizenship for each collection",
          "_imageUri": "Base image URI",
          "_owner": "Should be an EOA, will have rights over OpenSea collection configuration",
          "_tokenUnitPrice": "Price per random NFT claim"
        }
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "imageURI(uint256)": {
        "params": {
          "_id": "Collection ID"
        },
        "returns": {
          "_0": "Image URI"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "isOwner(address)": {
        "returns": {
          "_0": "true if the caller is the current owner."
        }
      },
      "purchase(uint256)": {
        "params": {
          "_amount": "Amount to purchase"
        }
      },
      "royaltyInfo(uint256,uint256)": {
        "params": {
          "_salePrice": "the price (in any unit, .e.g wei, ERC20 token, et.c.) of the token to be sold"
        },
        "returns": {
          "receiver": "the royalty receiver",
          "royaltyAmount": "royalty amount in the same unit as _salePrice"
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setAdmin(address)": {
        "details": "Set new admin role",
        "params": {
          "_admin": "New admin address"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setContractURI(string)": {
        "details": "Restricted access function which updates the contract URI",
        "params": {
          "_contractURI": "new contract URI to set"
        }
      },
      "setGoldMerkleRoot(bytes32)": {
        "details": "Set Gold merkle root (whitelist for gold citizenship claims)",
        "params": {
          "_root": "Merkle root"
        }
      },
      "setImageBaseURI(string)": {
        "details": "Set new base image URI for collections",
        "params": {
          "_uri": "Base image URI"
        }
      },
      "setRoyaltyInfo(address,uint16)": {
        "details": "Restricted access function which updates the royalty info",
        "params": {
          "_royaltyPercentage": "new royalty percentage to set",
          "_royaltyReceiver": "new royalty receiver to set"
        }
      },
      "setSilverMerkleRoot(bytes32)": {
        "details": "Set Silver merkle root (whitelist for gold citizenship claims)",
        "params": {
          "_root": "Merkle root"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "transferOwnership(address)": {
        "details": "Restricted access function to set smart contract \"owner\"      Note: an \"owner\" set doesn't have any authority, and cannot even update \"owner\"",
        "params": {
          "_owner": "new \"owner\" of the smart contract"
        }
      },
      "uri(uint256)": {
        "params": {
          "_id": "Collection ID"
        },
        "returns": {
          "_0": "Base64 encoded metadata"
        }
      },
      "withdraw(address)": {
        "details": "Withdraw all ethers from contract",
        "params": {
          "_to": "Address to send the funds"
        }
      }
    },
    "stateVariables": {
      "MAX_CHANCE": {
        "details": "Represents 100% chance, there will be 3 Citizenship collection     with decreasing chances to be minted during purchases     the total chances should sum to MAX_CHANCE"
      },
      "PURCHASABLE_SUPPLY": {
        "details": "The maximum purchaseable supply     does not count with the whitelisted citizenship claims"
      },
      "goldClaimed": {
        "details": "Used to mark a gold citizenship as claimed from a whitelisted address"
      },
      "goldMerkleRoot": {
        "details": "Merkle root used to whitelist addresses to claim gold citizenship"
      },
      "purchasedAmount": {
        "details": "Amount of NFTs that have been purchased so far"
      },
      "silverClaimed": {
        "details": "Used to mark a silver citizenship as claimed for a whitelisted address"
      },
      "silverMerkleRoot": {
        "details": "Merkle root used to whitelist addresses to claim gold citizenshi"
      },
      "thresholds": {
        "details": "Calculated pseudo-random number should fall in range to acquire a certain citizenship"
      },
      "tokenUnitPrice": {
        "details": "The unit price to purchase a citizenship NFT from a random collection"
      }
    },
    "title": "Horizon DAO Citizenship Promotional NFTs",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "collectionDescription(uint256)": {
        "notice": "Get collection description"
      },
      "collectionMetadata(uint256)": {
        "notice": "Returns the stringified metadata JSON for a given collection"
      },
      "collectionName(uint256)": {
        "notice": "Get collection name"
      },
      "contractURI()": {
        "notice": "Contract level metadata to define collection name, description, and royalty fees.         see https://docs.opensea.io/docs/contract-level-metadata"
      },
      "imageURI(uint256)": {
        "notice": "Get the image URI for a given collection"
      },
      "isOwner(address)": {
        "notice": "Checks if the address supplied is an \"owner\" of the smart contract      Note: an \"owner\" doesn't have any authority on the smart contract and is \"nominal\""
      },
      "purchase(uint256)": {
        "notice": "Purchase citizenship NFTs randomly from the 3 collections (Bronze, Silver and Gold)"
      },
      "royaltyInfo(uint256,uint256)": {
        "notice": "EIP-2981 function to calculate royalties for sales in secondary marketplaces.         see https://eips.ethereum.org/EIPS/eip-2981"
      },
      "royaltyPercentage()": {
        "notice": "Percentage of token sale price to be used for EIP-2981 royalties from secondary sales         see https://eips.ethereum.org/EIPS/eip-2981"
      },
      "royaltyReceiver()": {
        "notice": "Address to receive EIP-2981 royalties from secondary sales         see https://eips.ethereum.org/EIPS/eip-2981"
      },
      "uri(uint256)": {
        "notice": "Returns the Base64 encoded metadata for a given collection"
      }
    },
    "notice": "Promotional NFTs that will have utility added during     Horizon DAO development stages, Citizenship NFT holder will     also be eligible to various SKY (Governance token) airdrops",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 455,
        "contract": "contracts/token/CitizenshipPromoERC1155.sol:CitizenshipPromoERC1155",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 461,
        "contract": "contracts/token/CitizenshipPromoERC1155.sol:CitizenshipPromoERC1155",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 463,
        "contract": "contracts/token/CitizenshipPromoERC1155.sol:CitizenshipPromoERC1155",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1825,
        "contract": "contracts/token/CitizenshipPromoERC1155.sol:CitizenshipPromoERC1155",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4730,
        "contract": "contracts/token/CitizenshipPromoERC1155.sol:CitizenshipPromoERC1155",
        "label": "owner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 4733,
        "contract": "contracts/token/CitizenshipPromoERC1155.sol:CitizenshipPromoERC1155",
        "label": "admin",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4736,
        "contract": "contracts/token/CitizenshipPromoERC1155.sol:CitizenshipPromoERC1155",
        "label": "royaltyReceiver",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4739,
        "contract": "contracts/token/CitizenshipPromoERC1155.sol:CitizenshipPromoERC1155",
        "label": "royaltyPercentage",
        "offset": 20,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 4742,
        "contract": "contracts/token/CitizenshipPromoERC1155.sol:CitizenshipPromoERC1155",
        "label": "contractURI",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 3920,
        "contract": "contracts/token/CitizenshipPromoERC1155.sol:CitizenshipPromoERC1155",
        "label": "purchasedAmount",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3926,
        "contract": "contracts/token/CitizenshipPromoERC1155.sol:CitizenshipPromoERC1155",
        "label": "thresholds",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_enum(Citizenship)3906,t_uint256)"
      },
      {
        "astId": 3929,
        "contract": "contracts/token/CitizenshipPromoERC1155.sol:CitizenshipPromoERC1155",
        "label": "goldMerkleRoot",
        "offset": 0,
        "slot": "10",
        "type": "t_bytes32"
      },
      {
        "astId": 3932,
        "contract": "contracts/token/CitizenshipPromoERC1155.sol:CitizenshipPromoERC1155",
        "label": "silverMerkleRoot",
        "offset": 0,
        "slot": "11",
        "type": "t_bytes32"
      },
      {
        "astId": 3937,
        "contract": "contracts/token/CitizenshipPromoERC1155.sol:CitizenshipPromoERC1155",
        "label": "goldClaimed",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3942,
        "contract": "contracts/token/CitizenshipPromoERC1155.sol:CitizenshipPromoERC1155",
        "label": "silverClaimed",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(Citizenship)3906": {
        "encoding": "inplace",
        "label": "enum CitizenshipPromoERC1155.Citizenship",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(Citizenship)3906,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(Citizenship)3906",
        "label": "mapping(enum CitizenshipPromoERC1155.Citizenship => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
