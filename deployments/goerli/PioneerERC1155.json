{
  "address": "0xce45EB481CD69281A601d289500420107F7e6fDA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_imageUri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_publicTokenUnitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_whitelistTokenUnitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256[3]",
          "name": "_chances",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_airdropNonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "AirdropMerkleRootSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_value",
          "type": "string"
        }
      ],
      "name": "ContractURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "NewAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "NewImageUri",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_oldVal",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newVal",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "enum PioneerERC1155.Pioneer",
          "name": "_Pioneer",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "_isWhitelist",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "PioneerClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "PrivateMerkleRootSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_percentage",
          "type": "uint16"
        }
      ],
      "name": "RoyaltyInfoUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_whitelistMerkleRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_publicSaleStartTime",
          "type": "uint256"
        }
      ],
      "name": "SaleInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AIRDROP_MAX_CLAIMS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_CHANCE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRIVATE_CLAIM_GOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRIVATE_MAX_CLAIMS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PURCHASABLE_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHITELIST_MAX_PURCHASES",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHITELIST_PURCHASE_PER_ADDRESS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "airdropClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "airdropMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "airdropNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        }
      ],
      "name": "claimAirdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "collectionDescription",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "collectionMetadata",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "collectionName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "imageURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_whitelistMerkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_publicSaleOffset",
          "type": "uint256"
        }
      ],
      "name": "initializeSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        }
      ],
      "name": "privateClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "privateMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "publicPurchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicTokenUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchasedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyPercentage",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "setAirdropRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_contractURI",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setImageBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "setPrivateRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_royaltyReceiver",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_royaltyPercentage",
          "type": "uint16"
        }
      ],
      "name": "setRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PioneerERC1155.Pioneer",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "thresholds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userAirdropNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userPrivateClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userWhitelistPurchasedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        }
      ],
      "name": "whitelistPurchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistTokenUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0bb62dec3b200c1fbf35fff519fd578fa8a3f5cb6540b841b019090e47c739f8",
  "receipt": {
    "to": null,
    "from": "0x39a242169BA3B28623E6d235A4Bdd46287d4bae3",
    "contractAddress": "0xce45EB481CD69281A601d289500420107F7e6fDA",
    "transactionIndex": 148,
    "gasUsed": "3532089",
    "logsBloom": "0x
    "blockHash": "0x2696661c05be7d3df2cbd1c9c0550edcc1ae6d077b6aec6cfdadede661e99276",
    "transactionHash": "0x0bb62dec3b200c1fbf35fff519fd578fa8a3f5cb6540b841b019090e47c739f8",
    "logs": [
      {
        "transactionIndex": 148,
        "blockNumber": 7884568,
        "transactionHash": "0x0bb62dec3b200c1fbf35fff519fd578fa8a3f5cb6540b841b019090e47c739f8",
        "address": "0xce45EB481CD69281A601d289500420107F7e6fDA",
        "topics": [
          "0x71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c",
          "0x00000000000000000000000063926e60619172fe58870bceb057b3b437fa62fc"
        ],
        "data": "0x",
        "logIndex": 262,
        "blockHash": "0x2696661c05be7d3df2cbd1c9c0550edcc1ae6d077b6aec6cfdadede661e99276"
      },
      {
        "transactionIndex": 148,
        "blockNumber": 7884568,
        "transactionHash": "0x0bb62dec3b200c1fbf35fff519fd578fa8a3f5cb6540b841b019090e47c739f8",
        "address": "0xce45EB481CD69281A601d289500420107F7e6fDA",
        "topics": [
          "0xff9f5326d1d2833dce5b39220446d89e1d49234ceacf56ad194c69a5cb423d2a",
          "0x00000000000000000000000039a242169ba3b28623e6d235a4bdd46287d4bae3"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 263,
        "blockHash": "0x2696661c05be7d3df2cbd1c9c0550edcc1ae6d077b6aec6cfdadede661e99276"
      }
    ],
    "blockNumber": 7884568,
    "cumulativeGasUsed": "29064065",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "",
    "0x63926E60619172FE58870BCeb057b3B437Fa62FC",
    "0x39a242169BA3B28623E6d235A4Bdd46287d4bae3",
    "150000000000000000",
    "100000000000000000",
    [948, 47, 5]
  ],
  "numDeployments": 1,
  "solcInputHash": "56e2570bffedebf4d67b0db33c3b346c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_imageUri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_publicTokenUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_whitelistTokenUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"_chances\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_airdropNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"AirdropMerkleRootSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"NewImageUri\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldVal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newVal\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum PioneerERC1155.Pioneer\",\"name\":\"_Pioneer\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_isWhitelist\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"PioneerClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"PrivateMerkleRootSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_percentage\",\"type\":\"uint16\"}],\"name\":\"RoyaltyInfoUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_whitelistMerkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_publicSaleStartTime\",\"type\":\"uint256\"}],\"name\":\"SaleInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AIRDROP_MAX_CLAIMS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CHANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRIVATE_CLAIM_GOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRIVATE_MAX_CLAIMS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PURCHASABLE_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELIST_MAX_PURCHASES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELIST_PURCHASE_PER_ADDRESS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"claimAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"collectionDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"collectionMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"collectionName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"imageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_whitelistMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_publicSaleOffset\",\"type\":\"uint256\"}],\"name\":\"initializeSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"privateClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"publicPurchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicTokenUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyPercentage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"setAirdropRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setImageBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"setPrivateRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_royaltyPercentage\",\"type\":\"uint16\"}],\"name\":\"setRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PioneerERC1155.Pioneer\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"thresholds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userAirdropNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPrivateClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userWhitelistPurchasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"whitelistPurchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistTokenUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Yuri Fernandes (HorizonDAO)\",\"events\":{\"AirdropMerkleRootSet(address,uint256,bytes32)\":{\"details\":\"Emitted when the Airdrop Merkle Root is set\"},\"NewImageUri(address,string)\":{\"details\":\"Emitted when a new base image URI is set for the collections\"},\"PioneerClaimed(address,uint8,bool,uint256)\":{\"details\":\"Emitted when an amount of Pioneer NFTs are claimed\"},\"PrivateMerkleRootSet(address,bytes32)\":{\"details\":\"Emitted when Private Merkle Root is set\"},\"SaleInitialized(address,bytes32,uint256)\":{\"details\":\"Emitted when Sale is initialized\"},\"Withdrawal(address,address,uint256)\":{\"details\":\"Emitted when ethers are withdrawn from the contract\"}},\"kind\":\"dev\",\"methods\":{\"approve(uint256,address,uint256)\":{\"params\":{\"_amount\":\"Amount allowed\",\"_id\":\"Collection ID\",\"_spender\":\"Spender address\"}},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"claimAirdrop(uint256,bytes32[])\":{\"params\":{\"_amount\":\"Amount to claim\",\"_proof\":\"Airdrop Merkle Proof\"}},\"collectionDescription(uint256)\":{\"params\":{\"_id\":\"Collection ID\"},\"returns\":{\"_0\":\"Collection description\"}},\"collectionMetadata(uint256)\":{\"params\":{\"_id\":\"Collection ID\"},\"returns\":{\"_0\":\"Stringified metadata JSON\"}},\"collectionName(uint256)\":{\"params\":{\"_id\":\"Collection ID\"},\"returns\":{\"_0\":\"Collection name\"}},\"constructor\":{\"details\":\"constructor to initialize PioneerPromoERC1155 contract\",\"params\":{\"_admin\":\"Adminstrative address, can execute various configuration related functions\",\"_chances\":\"Array with the chances of getting a Pioneer for each collection\",\"_imageUri\":\"Base image URI\",\"_owner\":\"Should be an EOA, will have rights over OpenSea collection configuration\",\"_publicTokenUnitPrice\":\"Price per token for Public Sale\",\"_whitelistTokenUnitPrice\":\"Price per token for Whitelisted Sale\"}},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"imageURI(uint256)\":{\"params\":{\"_id\":\"Collection ID\"},\"returns\":{\"_0\":\"Image URI\"}},\"initializeSale(bytes32,uint256)\":{\"details\":\"Initialize sale (first whitelisted address, then public sale begins)\",\"params\":{\"_publicSaleOffset\":\"Amount of time that will take for the Public sale to begin\",\"_whitelistMerkleRoot\":\"Whitelist Merkle Root\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"isOwner(address)\":{\"returns\":{\"_0\":\"true if the caller is the current owner.\"}},\"privateClaim(bytes32[])\":{\"params\":{\"_proof\":\"Private Merkle Proof\"}},\"publicPurchase(uint256)\":{\"params\":{\"_amount\":\"Amount to purchase\"}},\"royaltyInfo(uint256,uint256)\":{\"params\":{\"_salePrice\":\"the price (in any unit, .e.g wei, ERC20 token, et.c.) of the token to be sold\"},\"returns\":{\"receiver\":\"the royalty receiver\",\"royaltyAmount\":\"royalty amount in the same unit as _salePrice\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value.\"},\"setAdmin(address)\":{\"details\":\"Set new admin role\",\"params\":{\"_admin\":\"New admin address\"}},\"setAirdropRoot(bytes32)\":{\"details\":\"Set Airdrop merkle root (multiple times)\",\"params\":{\"_root\":\"Airdrop Merkle Root\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setContractURI(string)\":{\"details\":\"Restricted access function which updates the contract URI\",\"params\":{\"_contractURI\":\"new contract URI to set\"}},\"setImageBaseURI(string)\":{\"details\":\"Set new base image URI for collections\",\"params\":{\"_uri\":\"Base image URI\"}},\"setPrivateRoot(bytes32)\":{\"details\":\"Set Private claiming merkle root (only once)\",\"params\":{\"_root\":\"Private Merkle Root\"}},\"setRoyaltyInfo(address,uint16)\":{\"details\":\"Restricted access function which updates the royalty info\",\"params\":{\"_royaltyPercentage\":\"new royalty percentage to set\",\"_royaltyReceiver\":\"new royalty receiver to set\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"transferOwnership(address)\":{\"details\":\"Restricted access function to set smart contract \\\"owner\\\"      Note: an \\\"owner\\\" set doesn't have any authority, and cannot even update \\\"owner\\\"\",\"params\":{\"_owner\":\"new \\\"owner\\\" of the smart contract\"}},\"uri(uint256)\":{\"params\":{\"_id\":\"Collection ID\"},\"returns\":{\"_0\":\"Base64 encoded metadata\"}},\"whitelistPurchase(uint256,bytes32[])\":{\"params\":{\"_amount\":\"Amount to purchase\",\"_proof\":\"Whitelist Merkle Proof\"}},\"withdraw(address)\":{\"details\":\"Withdraw all ethers from contract\",\"params\":{\"_to\":\"Address to send the funds\"}}},\"stateVariables\":{\"AIRDROP_MAX_CLAIMS\":{\"details\":\"Total claimable amount of tokens through airdrops\"},\"MAX_CHANCE\":{\"details\":\"Represents 100% chance, there will be 3 Pioneer collection     with decreasing chances to be minted during purchases     the total chances should sum to MAX_CHANCE\"},\"PRIVATE_CLAIM_GOLD\":{\"details\":\"How many Gold Pioneers a user can get from private claim\"},\"PRIVATE_MAX_CLAIMS\":{\"details\":\"Maximum amount of tokens users can get from private claim\"},\"PURCHASABLE_SUPPLY\":{\"details\":\"Total number of tokens that can be purchased\"},\"WHITELIST_MAX_PURCHASES\":{\"details\":\"How many tokens can be purchased during Whitelisted sale\"},\"WHITELIST_PURCHASE_PER_ADDRESS\":{\"details\":\"How many tokens whitelisted users can purchase\"},\"airdropClaimed\":{\"details\":\"Amount of Airdrop tokens claimed\"},\"airdropMerkleRoot\":{\"details\":\"Airdrop Merkle Root (can be set multiple times)\"},\"airdropNonce\":{\"details\":\"Nonce of the current airdrop Merkle Tree\"},\"privateMerkleRoot\":{\"details\":\"Private Merkle Root (can be set once)\"},\"publicSaleStartTime\":{\"details\":\"When the Public sale will begin (if zero, means sale has not been initialized)\"},\"publicTokenUnitPrice\":{\"details\":\"Unit price of tokens for Public sale\"},\"purchasedAmount\":{\"details\":\"Amount of NFTs that have been purchased so far\"},\"thresholds\":{\"details\":\"Calculated pseudo-random number should fall in range to acquire a certain Pioneer\"},\"userAirdropNonce\":{\"details\":\"Which Airdrop an user has participated\"},\"userPrivateClaimed\":{\"details\":\"How many tokens users have claimed during private sale\"},\"userWhitelistPurchasedAmount\":{\"details\":\"How many tokens the whitelisted users have claimed\"},\"whitelistMerkleRoot\":{\"details\":\"Whitelist Merkle Root (can be set once)\"},\"whitelistTokenUnitPrice\":{\"details\":\"Unit prie of tokens for Whitelisted sale\"}},\"title\":\"HorizonDAO Pioneer NFT\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(uint256,address,uint256)\":{\"notice\":\"Approve a spender to transfer tokens\"},\"claimAirdrop(uint256,bytes32[])\":{\"notice\":\"Claim airdrop\"},\"collectionDescription(uint256)\":{\"notice\":\"Get collection description\"},\"collectionMetadata(uint256)\":{\"notice\":\"Returns the stringified metadata JSON for a given collection\"},\"collectionName(uint256)\":{\"notice\":\"Get collection name\"},\"contractURI()\":{\"notice\":\"Contract level metadata to define collection name, description, and royalty fees.         see https://docs.opensea.io/docs/contract-level-metadata\"},\"imageURI(uint256)\":{\"notice\":\"Get the image URI for a given collection\"},\"isOwner(address)\":{\"notice\":\"Checks if the address supplied is an \\\"owner\\\" of the smart contract      Note: an \\\"owner\\\" doesn't have any authority on the smart contract and is \\\"nominal\\\"\"},\"privateClaim(bytes32[])\":{\"notice\":\"Claim private whitelisted tokens\"},\"publicPurchase(uint256)\":{\"notice\":\"Purchase Pioneer NFTs randomly from the 3 collections (Bronze, Silver and Gold)\"},\"publicSaleStarted()\":{\"notice\":\"Whether public sale started\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"EIP-2981 function to calculate royalties for sales in secondary marketplaces.         see https://eips.ethereum.org/EIPS/eip-2981\"},\"royaltyPercentage()\":{\"notice\":\"Percentage of token sale price to be used for EIP-2981 royalties from secondary sales         see https://eips.ethereum.org/EIPS/eip-2981\"},\"royaltyReceiver()\":{\"notice\":\"Address to receive EIP-2981 royalties from secondary sales         see https://eips.ethereum.org/EIPS/eip-2981\"},\"saleInitialized()\":{\"notice\":\"Whether the sale has been initialized\"},\"uri(uint256)\":{\"notice\":\"Returns the Base64 encoded metadata for a given collection\"},\"whitelistPurchase(uint256,bytes32[])\":{\"notice\":\"Purchase whilelisted tokens (maximum amount: WHITELIST_PURCHASE_PER_ADDRESS)\"}},\"notice\":\"NFTs owned by HorizonDAO pioneer membersHolding these NFTs will accrue into various rewards     during HorizonDAO development, such as, for example Airdrops\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/PioneerERC1155.sol\":\"PioneerERC1155\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/IERC1155.sol\\\";\\n\",\"keccak256\":\"0x10a6688bc4154b1b76268dbaf497bd8b24f77525ecb9cf829bd3cccec98eefc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x447a21c87433c0f11252912313a96f3454629ef88cca7a4eefbb283b3ec409f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe3deb5f3b0c9d12944f62ab680f041bbf1910d9d3ac6b545b4b8e399643c538d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x596ed72a251d391b814a4aa19d7acb02ebdcc92ba27d3fff74a6f0c158b12ab7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/interfaces/IEIP2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n///\\n/// @dev Interface for the NFT Royalty Standard\\n///\\ninterface IEIP2981 is IERC165 {\\n    /// ERC165 bytes to add to interface array - set in parent contract\\n    /// implementing this standard\\n    ///\\n    /// bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\\n\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n    /// @return receiver - address of who should be sent the royalty payment\\n    /// @return royaltyAmount - the royalty payment amount for _salePrice\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x423e360cb352267aa1cca4726bae527f0db6b3f2e57ddc780e2006ad4bba5ab6\",\"license\":\"MIT\"},\"contracts/token/PioneerERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { MerkleProof } from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport { Base64 } from \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { RoyalERC1155 } from \\\"./RoyalERC1155.sol\\\";\\n\\n/// @title HorizonDAO Pioneer NFT\\n/// @author Yuri Fernandes (HorizonDAO)\\n/// @notice NFTs owned by HorizonDAO pioneer members\\n/// @notice Holding these NFTs will accrue into various rewards\\n///     during HorizonDAO development, such as, for example Airdrops\\ncontract PioneerERC1155 is RoyalERC1155 {\\n    using Strings for uint256;\\n\\n    /// @dev Pioneer types\\n    enum Pioneer {\\n        BRONZE,\\n        SILVER,\\n        GOLD\\n    }\\n\\n    /// @dev Total number of tokens that can be purchased\\n    uint256 public constant PURCHASABLE_SUPPLY = 10446;\\n\\n    /// @dev How many tokens can be purchased during Whitelisted sale\\n    uint256 public constant WHITELIST_MAX_PURCHASES = 1000;\\n\\n    /// @dev How many tokens whitelisted users can purchase\\n    uint256 public constant WHITELIST_PURCHASE_PER_ADDRESS = 10;\\n\\n    /// @dev Maximum amount of tokens users can get from private claim\\n    uint256 public constant PRIVATE_MAX_CLAIMS = 4;\\n\\n    /// @dev Total claimable amount of tokens through airdrops\\n    uint256 public constant AIRDROP_MAX_CLAIMS = 100;\\n\\n    /// @dev How many Gold Pioneers a user can get from private claim\\n    uint256 public constant PRIVATE_CLAIM_GOLD = 1;\\n\\n    /// @dev Represents 100% chance, there will be 3 Pioneer collection\\n    ///     with decreasing chances to be minted during purchases\\n    ///     the total chances should sum to MAX_CHANCE\\n    uint256 public constant MAX_CHANCE = 1_000;\\n\\n    /// @dev Unit prie of tokens for Whitelisted sale\\n    uint256 public immutable whitelistTokenUnitPrice;\\n\\n    /// @dev Unit price of tokens for Public sale\\n    uint256 public immutable publicTokenUnitPrice;\\n\\n    /// @dev Amount of NFTs that have been purchased so far\\n    uint256 public purchasedAmount;\\n\\n    /// @dev Calculated pseudo-random number should fall in range to acquire a certain Pioneer\\n    mapping(Pioneer => uint256) public thresholds;\\n\\n    /// @dev Private Merkle Root (can be set once)\\n    bytes32 public privateMerkleRoot;\\n\\n    /// @dev Whitelist Merkle Root (can be set once)\\n    bytes32 public whitelistMerkleRoot;\\n\\n    /// @dev Airdrop Merkle Root (can be set multiple times)\\n    bytes32 public airdropMerkleRoot;\\n\\n    /// @dev How many tokens users have claimed during private sale\\n    mapping(address => bool) public userPrivateClaimed;\\n\\n    /// @dev How many tokens the whitelisted users have claimed\\n    mapping(address => uint256) public userWhitelistPurchasedAmount;\\n\\n    /// @dev Which Airdrop an user has participated\\n    mapping(address => uint256) public userAirdropNonce;\\n\\n    /// @dev Nonce of the current airdrop Merkle Tree\\n    uint256 public airdropNonce;\\n\\n    /// @dev Amount of Airdrop tokens claimed\\n    uint256 public airdropClaimed;\\n\\n    /// @dev When the Public sale will begin (if zero, means sale has not been initialized)\\n    uint256 public publicSaleStartTime;\\n\\n    /// @dev Emitted when Private Merkle Root is set\\n    event PrivateMerkleRootSet(address indexed _admin, bytes32 _root);\\n\\n    /// @dev Emitted when Sale is initialized\\n    event SaleInitialized(address indexed _admin, bytes32 _whitelistMerkleRoot, uint256 _publicSaleStartTime);\\n\\n    /// @dev Emitted when the Airdrop Merkle Root is set\\n    event AirdropMerkleRootSet(address indexed _admin, uint256 indexed _airdropNonce, bytes32 _root);\\n\\n    /// @dev Emitted when a new base image URI is set for the collections\\n    event NewImageUri(address indexed _admin, string _uri);\\n\\n    /// @dev Emitted when ethers are withdrawn from the contract\\n    event Withdrawal(address indexed _admin, address indexed _to, uint256 _amount);\\n\\n    /// @dev Emitted when an amount of Pioneer NFTs are claimed\\n    event PioneerClaimed(address indexed _by, Pioneer indexed _Pioneer, bool indexed _isWhitelist, uint256 _amount);\\n\\n    /// @dev constructor to initialize PioneerPromoERC1155 contract\\n    /// @param _imageUri Base image URI\\n    /// @param _admin Adminstrative address, can execute various configuration related functions\\n    /// @param _owner Should be an EOA, will have rights over OpenSea collection configuration\\n    /// @param _publicTokenUnitPrice Price per token for Public Sale\\n    /// @param _whitelistTokenUnitPrice Price per token for Whitelisted Sale\\n    /// @param _chances Array with the chances of getting a Pioneer for each collection\\n    constructor(\\n        string memory _imageUri,\\n        address _admin,\\n        address _owner,\\n        uint256 _publicTokenUnitPrice,\\n        uint256 _whitelistTokenUnitPrice,\\n        uint256[3] memory _chances\\n    ) RoyalERC1155(_imageUri, _admin, _owner) {\\n        require(_admin != address(0), \\\"!admin\\\");\\n        require(_whitelistTokenUnitPrice < _publicTokenUnitPrice, \\\"No discount applied\\\");\\n        for (uint8 i = 0; i < _chances.length; i++) {\\n            if (i > 0) {\\n                require(_chances[i - 1] >= _chances[i], \\\"Invalid _chance array\\\");\\n                thresholds[Pioneer(i)] += thresholds[Pioneer(i - 1)];\\n            }\\n            thresholds[Pioneer(i)] += _chances[i];\\n        }\\n        require(thresholds[Pioneer.GOLD] == MAX_CHANCE, \\\"_chances sum should be MAX_CHANCE\\\");\\n        publicTokenUnitPrice = _publicTokenUnitPrice;\\n        whitelistTokenUnitPrice = _whitelistTokenUnitPrice;\\n        emit NewImageUri(msg.sender, _imageUri);\\n    }\\n\\n    /// @notice Returns the Base64 encoded metadata for a given collection\\n    /// @param _id Collection ID\\n    /// @return Base64 encoded metadata\\n    function uri(uint256 _id) public view override returns (string memory) {\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", Base64.encode(bytes(collectionMetadata(_id)))));\\n    }\\n\\n    /// @notice Returns the stringified metadata JSON for a given collection\\n    /// @param _id Collection ID\\n    /// @return Stringified metadata JSON\\n    function collectionMetadata(uint256 _id) public view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{ \\\"name\\\": \\\"',\\n                    collectionName(_id),\\n                    '\\\", \\\"description\\\": \\\"',\\n                    collectionDescription(_id),\\n                    '\\\", \\\"image\\\": \\\"',\\n                    imageURI(_id),\\n                    '\\\" }'\\n                )\\n            );\\n    }\\n\\n    /// @notice Get collection name\\n    /// @param _id Collection ID\\n    /// @return Collection name\\n    function collectionName(uint256 _id) public pure returns (string memory) {\\n        require(_id >= uint256(Pioneer.BRONZE) && _id <= uint256(Pioneer.GOLD), \\\"Invalid token ID\\\");\\n        if (_id == uint256(Pioneer.BRONZE)) return \\\"Bronze Pioneer\\\";\\n        if (_id == uint256(Pioneer.GOLD)) return \\\"Silver Pioneer\\\";\\n        return \\\"Gold Pioneer\\\";\\n    }\\n\\n    /// @notice Get collection description\\n    /// @param _id Collection ID\\n    /// @return Collection description\\n    function collectionDescription(uint256 _id) public pure returns (string memory) {\\n        require(_id >= uint256(Pioneer.BRONZE) && _id <= uint256(Pioneer.GOLD), \\\"Invalid token ID\\\");\\n        if (_id == uint256(Pioneer.BRONZE)) return \\\"\\\";\\n        if (_id == uint256(Pioneer.GOLD)) return \\\"\\\";\\n        return \\\"\\\";\\n    }\\n\\n    /// @notice Get the image URI for a given collection\\n    /// @param _id Collection ID\\n    /// @return Image URI\\n    function imageURI(uint256 _id) public view returns (string memory) {\\n        string memory uri_ = super.uri(uint256(0));\\n        require(keccak256(bytes(uri_)) != keccak256(\\\"\\\"), \\\"!baseURI\\\");\\n        return string(abi.encodePacked(super.uri(uint256(0)), _id.toString()));\\n    }\\n\\n    /// @notice Whether the sale has been initialized\\n    function saleInitialized() public view returns (bool) {\\n        return whitelistMerkleRoot != bytes32(0);\\n    }\\n\\n    /// @notice Whether public sale started\\n    function publicSaleStarted() public view returns (bool) {\\n        return saleInitialized() && block.timestamp >= publicSaleStartTime;\\n    }\\n\\n    /// @dev Initialize sale (first whitelisted address, then public sale begins)\\n    /// @param _whitelistMerkleRoot Whitelist Merkle Root\\n    /// @param _publicSaleOffset Amount of time that will take for the Public sale to begin\\n    function initializeSale(bytes32 _whitelistMerkleRoot, uint256 _publicSaleOffset) external onlyAdmin {\\n        require(!saleInitialized(), \\\"Merkle root already set\\\");\\n        require(_whitelistMerkleRoot != bytes32(0), \\\"Invalid Merkle root\\\");\\n        whitelistMerkleRoot = _whitelistMerkleRoot;\\n        publicSaleStartTime = block.timestamp + _publicSaleOffset;\\n        emit SaleInitialized(msg.sender, _whitelistMerkleRoot, block.timestamp + _publicSaleOffset);\\n    }\\n\\n    /// @dev Set Private claiming merkle root (only once)\\n    /// @param _root Private Merkle Root\\n    function setPrivateRoot(bytes32 _root) external onlyAdmin {\\n        require(privateMerkleRoot == bytes32(0), \\\"Merkle root already set\\\");\\n        privateMerkleRoot = _root;\\n        emit PrivateMerkleRootSet(msg.sender, _root);\\n    }\\n\\n    /// @dev Set Airdrop merkle root (multiple times)\\n    /// @param _root Airdrop Merkle Root\\n    function setAirdropRoot(bytes32 _root) external onlyAdmin {\\n        require(airdropClaimed < AIRDROP_MAX_CLAIMS, \\\"!airdrop\\\");\\n        airdropMerkleRoot = _root;\\n        emit AirdropMerkleRootSet(msg.sender, ++airdropNonce, _root);\\n    }\\n\\n    /// @dev Set new base image URI for collections\\n    /// @param _uri Base image URI\\n    function setImageBaseURI(string memory _uri) external onlyAdmin {\\n        _setURI(_uri);\\n        emit NewImageUri(msg.sender, _uri);\\n    }\\n\\n    /// @notice Claim private whitelisted tokens\\n    /// @param _proof Private Merkle Proof\\n    function privateClaim(bytes32[] memory _proof) external {\\n        require(MerkleProof.verify(_proof, privateMerkleRoot, keccak256(abi.encodePacked(msg.sender))), \\\"!root\\\");\\n        require(!userPrivateClaimed[msg.sender], \\\"claimed\\\");\\n        _mint(msg.sender, uint256(Pioneer.GOLD), PRIVATE_CLAIM_GOLD, bytes(\\\"\\\"));\\n        userPrivateClaimed[msg.sender] = true;\\n        emit PioneerClaimed(msg.sender, Pioneer.GOLD, false, PRIVATE_CLAIM_GOLD);\\n    }\\n\\n    /// @notice Purchase whilelisted tokens (maximum amount: WHITELIST_PURCHASE_PER_ADDRESS)\\n    /// @param _amount Amount to purchase\\n    /// @param _proof Whitelist Merkle Proof\\n    function whitelistPurchase(uint256 _amount, bytes32[] memory _proof) external payable {\\n        require(whitelistMerkleRoot != bytes32(0), \\\"!initialized\\\");\\n        require(MerkleProof.verify(_proof, whitelistMerkleRoot, keccak256(abi.encodePacked(msg.sender))));\\n        require(purchasedAmount + _amount <= PURCHASABLE_SUPPLY, \\\"!purchase\\\");\\n        require(\\n            userWhitelistPurchasedAmount[msg.sender] + _amount <= WHITELIST_PURCHASE_PER_ADDRESS,\\n            \\\"Maximum amount purchased\\\"\\n        );\\n        _processPurchaseRequest(whitelistTokenUnitPrice, _amount);\\n        userWhitelistPurchasedAmount[msg.sender] += _amount;\\n        purchasedAmount += _amount;\\n    }\\n\\n    /// @notice Purchase Pioneer NFTs randomly from the 3 collections (Bronze, Silver and Gold)\\n    /// @param _amount Amount to purchase\\n    function publicPurchase(uint256 _amount) external payable {\\n        require(publicSaleStarted(), \\\"!start\\\");\\n        require(purchasedAmount + _amount <= PURCHASABLE_SUPPLY, \\\"!purchase\\\");\\n        _processPurchaseRequest(publicTokenUnitPrice, _amount);\\n        purchasedAmount += _amount;\\n    }\\n\\n    /// @notice Claim airdrop\\n    /// @param _amount Amount to claim\\n    /// @param _proof Airdrop Merkle Proof\\n    function claimAirdrop(uint256 _amount, bytes32[] memory _proof) external {\\n        require(\\n            MerkleProof.verify(_proof, airdropMerkleRoot, keccak256(abi.encodePacked(msg.sender, _amount))),\\n            \\\"!merkleRoot\\\"\\n        );\\n        require(airdropClaimed + _amount < AIRDROP_MAX_CLAIMS, \\\"!airdrop\\\");\\n        uint256 airdropNonce_ = airdropNonce;\\n        require(userAirdropNonce[msg.sender] < airdropNonce_, \\\"!userNonce\\\");\\n        _processPurchaseRequest(0, _amount);\\n        airdropClaimed += _amount;\\n        userAirdropNonce[msg.sender] = airdropNonce_;\\n    }\\n\\n    /// @dev Withdraw all ethers from contract\\n    /// @param _to Address to send the funds\\n    function withdraw(address _to) external onlyAdmin {\\n        uint256 etherBalance = address(this).balance;\\n        require(etherBalance > 0, \\\"No ethers to withdraw\\\");\\n        _sendValue(_to, etherBalance);\\n        emit Withdrawal(msg.sender, _to, etherBalance);\\n    }\\n\\n    /// @dev Utility function to send an amount of ethers to a given address\\n    /// @param _to Address to send ethers\\n    /// @param _amount Amount of ethers to send\\n    function _sendValue(address _to, uint256 _amount) internal {\\n        (bool success, ) = _to.call{ value: _amount }(\\\"\\\");\\n        require(success, \\\"Failed sending ethers\\\");\\n    }\\n\\n    /// @dev Process purchase payment and minting\\n    /// @param _tokenUnitPrice Unit price of the token\\n    /// @param _amount Amount of tokens to buy\\n    function _processPurchaseRequest(uint256 _tokenUnitPrice, uint256 _amount) internal {\\n        uint256 totalPrice = _amount * _tokenUnitPrice;\\n        require(msg.value >= totalPrice, \\\"Not enough ethers\\\");\\n        uint256 magicValue = uint256(\\n            keccak256(abi.encodePacked(msg.sender, block.timestamp, _amount, purchasedAmount))\\n        );\\n\\n        uint256 chance;\\n        uint256[3] memory amounts;\\n        for (uint256 i = 0; i < _amount; i++) {\\n            chance = magicValue % MAX_CHANCE;\\n            if (chance < thresholds[Pioneer.BRONZE]) ++amounts[0];\\n            else if (chance < thresholds[Pioneer.SILVER]) ++amounts[1];\\n            else ++amounts[2];\\n            magicValue = uint256(keccak256(abi.encodePacked(magicValue / MAX_CHANCE)));\\n        }\\n\\n        for (uint8 i = 0; i < amounts.length; i++) {\\n            if (amounts[i] == 0) continue;\\n            _mint(msg.sender, i, amounts[i], bytes(\\\"\\\"));\\n            emit PioneerClaimed(msg.sender, Pioneer(i), false, amounts[i]);\\n        }\\n        uint256 surplus = msg.value - totalPrice;\\n        if (surplus > 0) _sendValue(msg.sender, surplus);\\n    }\\n}\\n\",\"keccak256\":\"0x251bfa3cf5a8a5e69cf3679546a018e38fd28d449763105be714b44ab8292e46\",\"license\":\"MIT\"},\"contracts/token/RoyalERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport { ERC1155 } from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport { SingleApprovableERC1155 } from \\\"./SingleApprovableERC1155.sol\\\";\\r\\nimport { IERC165 } from \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\r\\nimport { IEIP2981 } from \\\"../interfaces/IEIP2981.sol\\\";\\r\\n\\r\\n/// @title Royal ERC1155\\r\\n/// @dev Supports EIP-2981 royalties on NFT secondary sales\\r\\n///      Supports OpenSea contract metadata royalties\\r\\n///      Introduces fake \\\"owner\\\" to support OpenSea collections\\r\\nabstract contract RoyalERC1155 is IEIP2981, SingleApprovableERC1155 {\\r\\n    /// @dev OpenSea expects NFTs to be \\\"Ownable\\\", that is having an \\\"owner\\\",\\r\\n    ///      we introduce a fake \\\"owner\\\" here with no authority\\r\\n    address public owner;\\r\\n\\r\\n    /// @dev Address of the admin: Can set a new admin among other privileged roles\\r\\n    address public admin;\\r\\n\\r\\n    /// @notice Address to receive EIP-2981 royalties from secondary sales\\r\\n    ///         see https://eips.ethereum.org/EIPS/eip-2981\\r\\n    address public royaltyReceiver;\\r\\n\\r\\n    /// @notice Percentage of token sale price to be used for EIP-2981 royalties from secondary sales\\r\\n    ///         see https://eips.ethereum.org/EIPS/eip-2981\\r\\n    /// @dev Has 2 decimal precision. E.g. a value of 500 would result in a 5% royalty fee\\r\\n    uint16 public royaltyPercentage; // default OpenSea value is 750\\r\\n\\r\\n    /// @notice Contract level metadata to define collection name, description, and royalty fees.\\r\\n    ///         see https://docs.opensea.io/docs/contract-level-metadata\\r\\n    /// @dev Should be overwritten by inheriting contracts. By default only includes royalty information\\r\\n    string public contractURI;\\r\\n\\r\\n    /// @dev Fired in setContractURI()\\r\\n    /// @param _by an address which executed update\\r\\n    /// @param _value new contractURI value\\r\\n    event ContractURIUpdated(address indexed _by, string _value);\\r\\n\\r\\n    /// @dev Fired in setRoyaltyInfo()\\r\\n    /// @param _by an address which executed update\\r\\n    /// @param _receiver new royaltyReceiver value\\r\\n    /// @param _percentage new royaltyPercentage value\\r\\n    event RoyaltyInfoUpdated(address indexed _by, address indexed _receiver, uint16 _percentage);\\r\\n\\r\\n    /// @dev Fired in setOwner()\\r\\n    /// @param _by an address which set the new \\\"owner\\\"\\r\\n    /// @param _oldVal previous \\\"owner\\\" address\\r\\n    /// @param _newVal new \\\"owner\\\" address\\r\\n    event OwnerUpdated(address indexed _by, address indexed _oldVal, address indexed _newVal);\\r\\n\\r\\n    /// @dev Emitted when a new admin is set\\r\\n    event NewAdmin(address indexed _admin);\\r\\n\\r\\n    /// @dev Checks if msg.sender is the admin\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == admin, \\\"!admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        string memory uri_,\\r\\n        address _admin,\\r\\n        address _owner\\r\\n    ) ERC1155(uri_) {\\r\\n        // initialize owner as the \\\"_owner\\\", necessary for OpenSea\\r\\n        owner = _owner;\\r\\n\\r\\n        // set contract admin\\r\\n        admin = _admin;\\r\\n        emit NewAdmin(_admin);\\r\\n    }\\r\\n\\r\\n    /// @dev Set new admin role\\r\\n    /// @param _admin New admin address\\r\\n    function setAdmin(address _admin) external onlyAdmin {\\r\\n        require(admin != _admin, \\\"admin == _admin\\\");\\r\\n        admin = _admin;\\r\\n        emit NewAdmin(_admin);\\r\\n    }\\r\\n\\r\\n    /// @dev Restricted access function which updates the contract URI\\r\\n    /// @param _contractURI new contract URI to set\\r\\n    function setContractURI(string memory _contractURI) public virtual onlyAdmin {\\r\\n        // update the contract URI\\r\\n        contractURI = _contractURI;\\r\\n\\r\\n        // emit an event first\\r\\n        emit ContractURIUpdated(msg.sender, _contractURI);\\r\\n    }\\r\\n\\r\\n    /// @notice EIP-2981 function to calculate royalties for sales in secondary marketplaces.\\r\\n    ///         see https://eips.ethereum.org/EIPS/eip-2981\\r\\n    /// @param _salePrice the price (in any unit, .e.g wei, ERC20 token, et.c.) of the token to be sold\\r\\n    /// @return receiver the royalty receiver\\r\\n    /// @return royaltyAmount royalty amount in the same unit as _salePrice\\r\\n    function royaltyInfo(uint256, uint256 _salePrice)\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (address receiver, uint256 royaltyAmount)\\r\\n    {\\r\\n        // simply calculate the values and return the result\\r\\n        return (royaltyReceiver, (_salePrice * royaltyPercentage) / 100_00);\\r\\n    }\\r\\n\\r\\n    /// @dev Restricted access function which updates the royalty info\\r\\n    /// @param _royaltyReceiver new royalty receiver to set\\r\\n    /// @param _royaltyPercentage new royalty percentage to set\\r\\n    function setRoyaltyInfo(address _royaltyReceiver, uint16 _royaltyPercentage) public virtual onlyAdmin {\\r\\n        // verify royalty percentage is zero if receiver is also zero\\r\\n        require(_royaltyReceiver != address(0) || _royaltyPercentage == 0, \\\"invalid receiver\\\");\\r\\n\\r\\n        // update the values\\r\\n        royaltyReceiver = _royaltyReceiver;\\r\\n        royaltyPercentage = _royaltyPercentage;\\r\\n\\r\\n        // emit an event first\\r\\n        emit RoyaltyInfoUpdated(msg.sender, _royaltyReceiver, _royaltyPercentage);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if the address supplied is an \\\"owner\\\" of the smart contract\\r\\n    ///      Note: an \\\"owner\\\" doesn't have any authority on the smart contract and is \\\"nominal\\\"\\r\\n    /// @return true if the caller is the current owner.\\r\\n    function isOwner(address _addr) public view virtual returns (bool) {\\r\\n        // just evaluate and return the result\\r\\n        return _addr == owner;\\r\\n    }\\r\\n\\r\\n    /// @dev Restricted access function to set smart contract \\\"owner\\\"\\r\\n    ///      Note: an \\\"owner\\\" set doesn't have any authority, and cannot even update \\\"owner\\\"\\r\\n    /// @param _owner new \\\"owner\\\" of the smart contract\\r\\n    function transferOwnership(address _owner) public virtual onlyAdmin {\\r\\n        // update \\\"owner\\\"\\r\\n        owner = _owner;\\r\\n\\r\\n        // emit an event first - to log both old and new values\\r\\n        emit OwnerUpdated(msg.sender, owner, _owner);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IERC165\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155, IERC165) returns (bool) {\\r\\n        // construct the interface support from EIP-2981 and super interfaces\\r\\n        return interfaceId == type(IEIP2981).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbb4108ab8a168476096d6680002e829b83536a723f611bfebff655e15d89c045\",\"license\":\"MIT\"},\"contracts/token/SingleApprovableERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { ERC1155Supply } from \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\\";\\nimport { IERC1155 } from \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\n\\n/// @title Siple Approvable ERC1155\\n/// @author Yuri Fernandes (HorizonDAO)\\n/// @dev Allows the approval for a single collection and a certain amount of tokens\\n///     to be transferred with the allowed party\\nabstract contract SingleApprovableERC1155 is ERC1155Supply {\\n    /// @dev mapping (collectionId => owner => spender => amount)\\n    mapping(uint256 => mapping(address => mapping(address => uint256))) private _allowances;\\n\\n    /// @dev Emitted when allowance is given\\n    event Approval(uint256 indexed _id, address indexed _owner, address indexed _spender, uint256 _amount);\\n\\n    /// @notice Approve a spender to transfer tokens\\n    /// @param _id Collection ID\\n    /// @param _spender Spender address\\n    /// @param _amount Amount allowed\\n    function approve(\\n        uint256 _id,\\n        address _spender,\\n        uint256 _amount\\n    ) public returns (bool) {\\n        address owner_ = _msgSender();\\n        _approve(_id, owner_, _spender, _amount);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC1155\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes memory _data\\n    ) public override {\\n        if (_from != _msgSender() && !isApprovedForAll(_from, _msgSender())) {\\n            require(_allowances[_id][_from][_msgSender()] >= _amount, \\\"Not authorized\\\");\\n            _allowances[_id][_from][_msgSender()] -= _amount;\\n        }\\n        _safeTransferFrom(_from, _to, _id, _amount, _data);\\n    }\\n\\n    /// @inheritdoc IERC1155\\n    function safeBatchTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) public virtual override {\\n        if (_from != _msgSender() && !isApprovedForAll(_from, _msgSender())) {\\n            for (uint256 i = 0; i < _ids.length; i++) {\\n                require(_allowances[_ids[i]][_from][_msgSender()] >= _amounts[i], \\\"Not authorized\\\");\\n                _allowances[_ids[i]][_from][_msgSender()] -= _amounts[i];\\n            }\\n        }\\n        _safeBatchTransferFrom(_from, _to, _ids, _amounts, _data);\\n    }\\n\\n    /// @dev See {approve} notice\\n    /// @param _id Collection ID\\n    /// @param _spender Spender address\\n    /// @param _amount Amount allowed\\n    function _approve(\\n        uint256 _id,\\n        address _owner,\\n        address _spender,\\n        uint256 _amount\\n    ) internal virtual {\\n        require(_owner != address(0), \\\"Approve from the zero address\\\");\\n        require(_spender != address(0), \\\"Approve to the zero address\\\");\\n\\n        _allowances[_id][_owner][_spender] = _amount;\\n        emit Approval(_id, _owner, _spender, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x364de0a00727974e85196c9bcde823592778d37be1226a1db1171ed4e823461d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620044a4380380620044a4833981016040819052620000349162000534565b85858582620000438162000422565b50600580546001600160a01b038084166001600160a01b0319928316179092556006805492851692909116821790556040517f71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c90600090a25050506001600160a01b038516620000e35760405162461bcd60e51b815260206004820152600660248201526510b0b236b4b760d11b60448201526064015b60405180910390fd5b828210620001345760405162461bcd60e51b815260206004820152601360248201527f4e6f20646973636f756e74206170706c696564000000000000000000000000006044820152606401620000da565b60005b60038160ff161015620003475760ff811615620002ac57818160ff16600381106200016657620001666200061f565b602002015182620001796001846200064b565b60ff16600381106200018f576200018f6200061f565b60200201511015620001e45760405162461bcd60e51b815260206004820152601560248201527f496e76616c6964205f6368616e636520617272617900000000000000000000006044820152606401620000da565b600a6000620001f56001846200064b565b60ff1660028111156200020c576200020c6200066d565b60028111156200022057620002206200066d565b60028111156200023457620002346200066d565b815260200190815260200160002054600a60008360ff1660028111156200025f576200025f6200066d565b60028111156200027357620002736200066d565b60028111156200028757620002876200066d565b81526020019081526020016000206000828254620002a6919062000683565b90915550505b818160ff1660038110620002c457620002c46200061f565b6020020151600a60008360ff166002811115620002e557620002e56200066d565b6002811115620002f957620002f96200066d565b60028111156200030d576200030d6200066d565b815260200190815260200160002060008282546200032c919062000683565b909155508190506200033e8162000699565b91505062000137565b506002600052600a6020527fbff4442b8ed600beeb8e26b1279a0f0d14c6edfaec26d968ee13c86f7d4c2ba8546103e814620003d05760405162461bcd60e51b815260206004820152602160248201527f5f6368616e6365732073756d2073686f756c64206265204d41585f4348414e436044820152604560f81b6064820152608401620000da565b60a0839052608082905260405133907fff9f5326d1d2833dce5b39220446d89e1d49234ceacf56ad194c69a5cb423d2a906200040e908990620006bb565b60405180910390a25050505050506200084b565b60026200043082826200077f565b5050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171562000475576200047562000434565b604052919050565b60005b838110156200049a57818101518382015260200162000480565b50506000910152565b80516001600160a01b0381168114620004bb57600080fd5b919050565b600082601f830112620004d257600080fd5b604051606081016001600160401b0381118282101715620004f757620004f762000434565b6040528060608401858111156200050d57600080fd5b845b81811015620005295780518352602092830192016200050f565b509195945050505050565b60008060008060008061010087890312156200054f57600080fd5b86516001600160401b03808211156200056757600080fd5b818901915089601f8301126200057c57600080fd5b81518181111562000591576200059162000434565b620005a6601f8201601f19166020016200044a565b91508082528a6020828501011115620005be57600080fd5b620005d18160208401602086016200047d565b509650620005e4905060208801620004a3565b9450620005f460408801620004a3565b93506060870151925060808701519150620006138860a08901620004c0565b90509295509295509295565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60ff828116828216039081111562000667576200066762000635565b92915050565b634e487b7160e01b600052602160045260246000fd5b8082018082111562000667576200066762000635565b600060ff821660ff8103620006b257620006b262000635565b60010192915050565b6020815260008251806020840152620006dc8160408501602087016200047d565b601f01601f19169190910160400192915050565b600181811c908216806200070557607f821691505b6020821081036200072657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200077a57600081815260208120601f850160051c81016020861015620007555750805b601f850160051c820191505b81811015620007765782815560010162000761565b5050505b505050565b81516001600160401b038111156200079b576200079b62000434565b620007b381620007ac8454620006f0565b846200072c565b602080601f831160018114620007eb5760008415620007d25750858301515b600019600386901b1c1916600185901b17855562000776565b600085815260208120601f198616915b828110156200081c57888601518255948401946001909101908401620007fb565b50858210156200083b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a051613c256200087f600039600081816109f90152610d130152600081816104b301526117310152613c256000f3fe6080604052600436106103755760003560e01c80637e776a3f116101d1578063a22cb46511610102578063bd85b039116100a0578063f242432a1161006f578063f242432a14610a79578063f2fde38b14610a99578063f5c0a5ff14610ab9578063f851a44014610ad957600080fd5b8063bd85b039146109ba578063c7f01e4c146109e7578063e8a3d48514610a1b578063e985e9c514610a3057600080fd5b8063aa98e0c6116100dc578063aa98e0c614610937578063afd2b87c1461094d578063afe1a4551461096d578063b548f2ae1461098d57600080fd5b8063a22cb465146108ec578063a2e914771461090c578063a5ce30d21461092157600080fd5b8063920ac79d1161016f5780639d9e7a99116101495780639d9e7a99146108805780639e12e3aa146108a05780639eea92cd146108b65780639fbc8713146108cc57600080fd5b8063920ac79d14610829578063938e3d7b14610849578063973335c01461086957600080fd5b80638a71bb2d116101ab5780638a71bb2d1461077c5780638cb0a511146107b15780638da5cb5b146107d15780638f742d161461080957600080fd5b80637e776a3f14610737578063848966901461074c578063886371171461048b57600080fd5b80632f54bf6e116102ab5780635a50d2f411610249578063704b6c0211610223578063704b6c02146106cf57806372504a24146106ef578063731e5b131461070f578063743b6d881461072257600080fd5b80635a50d2f41461066c5780636bb7b1d9146106995780636cfa24cc146106af57600080fd5b80634e1273f4116102855780634e1273f4146105db5780634f558e791461060857806351cff8d9146106375780635856aafb1461065757600080fd5b80632f54bf6e1461055f5780633fc60d511461058e5780634ba1427e146105ae57600080fd5b80631b004d14116103185780632a55205a116102f25780632a55205a146104d55780632bbde22e146105145780632c1d89e21461052a5780632eb2c2d61461053f57600080fd5b80631b004d141461047557806320e66bd31461048b578063231e5934146104a157600080fd5b80630afbd602116103545780630afbd6021461040a5780630bcae1ac1461041f5780630e89341c1461043f5780631acbc8231461045f57600080fd5b8062fdd58e1461037a57806301ffc9a7146103ad57806303504235146103dd575b600080fd5b34801561038657600080fd5b5061039a610395366004612f97565b610af9565b6040519081526020015b60405180910390f35b3480156103b957600080fd5b506103cd6103c8366004612fda565b610b92565b60405190151581526020016103a4565b3480156103e957600080fd5b506103fd6103f8366004612ff7565b610bb7565b6040516103a49190613060565b61041d610418366004612ff7565b610c86565b005b34801561042b57600080fd5b5061041d61043a366004613149565b610d52565b34801561044b57600080fd5b506103fd61045a366004612ff7565b610e9d565b34801561046b57600080fd5b5061039a60095481565b34801561048157600080fd5b5061039a6128ce81565b34801561049757600080fd5b5061039a6103e881565b3480156104ad57600080fd5b5061039a7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104e157600080fd5b506104f56104f036600461318f565b610ed6565b604080516001600160a01b0390931683526020830191909152016103a4565b34801561052057600080fd5b5061039a600b5481565b34801561053657600080fd5b5061039a600181565b34801561054b57600080fd5b5061041d61055a36600461322e565b610f17565b34801561056b57600080fd5b506103cd61057a3660046132d7565b6005546001600160a01b0391821691161490565b34801561059a57600080fd5b5061041d6105a93660046132f2565b6110e9565b3480156105ba57600080fd5b5061039a6105c93660046132d7565b60106020526000908152604090205481565b3480156105e757600080fd5b506105fb6105f6366004613326565b611200565b6040516103a49190613421565b34801561061457600080fd5b506103cd610623366004612ff7565b600090815260036020526040902054151590565b34801561064357600080fd5b5061041d6106523660046132d7565b611329565b34801561066357600080fd5b5061039a600481565b34801561067857600080fd5b5061039a610687366004613434565b600a6020526000908152604090205481565b3480156106a557600080fd5b5061039a60135481565b3480156106bb57600080fd5b5061041d6106ca366004613455565b6113e8565b3480156106db57600080fd5b5061041d6106ea3660046132d7565b61145f565b3480156106fb57600080fd5b5061041d61070a36600461349d565b611522565b61041d61071d366004613149565b611607565b34801561072e57600080fd5b5061039a606481565b34801561074357600080fd5b5061039a600a81565b34801561075857600080fd5b506103cd6107673660046132d7565b600e6020526000908152604090205460ff1681565b34801561078857600080fd5b5060075461079e90600160a01b900461ffff1681565b60405161ffff90911681526020016103a4565b3480156107bd57600080fd5b506103cd6107cc3660046134db565b611797565b3480156107dd57600080fd5b506005546107f1906001600160a01b031681565b6040516001600160a01b0390911681526020016103a4565b34801561081557600080fd5b506103fd610824366004612ff7565b6117b1565b34801561083557600080fd5b506103fd610844366004612ff7565b61185d565b34801561085557600080fd5b5061041d610864366004613455565b6118ec565b34801561087557600080fd5b50600c5415156103cd565b34801561088c57600080fd5b5061041d61089b366004612ff7565b61195c565b3480156108ac57600080fd5b5061039a60115481565b3480156108c257600080fd5b5061039a60125481565b3480156108d857600080fd5b506007546107f1906001600160a01b031681565b3480156108f857600080fd5b5061041d610907366004613510565b611a15565b34801561091857600080fd5b506103cd611a24565b34801561092d57600080fd5b5061039a600d5481565b34801561094357600080fd5b5061039a600c5481565b34801561095957600080fd5b5061041d610968366004612ff7565b611a44565b34801561097957600080fd5b5061041d61098836600461318f565b611aef565b34801561099957600080fd5b5061039a6109a83660046132d7565b600f6020526000908152604090205481565b3480156109c657600080fd5b5061039a6109d5366004612ff7565b60009081526003602052604090205490565b3480156109f357600080fd5b5061039a7f000000000000000000000000000000000000000000000000000000000000000081565b348015610a2757600080fd5b506103fd611c01565b348015610a3c57600080fd5b506103cd610a4b366004613541565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b348015610a8557600080fd5b5061041d610a94366004613574565b611c8f565b348015610aa557600080fd5b5061041d610ab43660046132d7565b611d6c565b348015610ac557600080fd5b506103fd610ad4366004612ff7565b611de4565b348015610ae557600080fd5b506006546107f1906001600160a01b031681565b60006001600160a01b038316610b695760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b0319821663152a902d60e11b1480610b8c5750610b8c82611e13565b60606002821115610bfd5760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081d1bdad95b88125160821b6044820152606401610b60565b81610c2c57505060408051808201909152600e81526d213937b73d32902834b7b732b2b960911b602082015290565b60028203610c5e57505060408051808201909152600e81526d29b4b63b32b9102834b7b732b2b960911b602082015290565b505060408051808201909152600c81526b23b7b632102834b7b732b2b960a11b602082015290565b610c8e611a24565b610cc35760405162461bcd60e51b8152602060048201526006602482015265085cdd185c9d60d21b6044820152606401610b60565b6128ce81600954610cd49190613604565b1115610d0e5760405162461bcd60e51b815260206004820152600960248201526821707572636861736560b81b6044820152606401610b60565b610d387f000000000000000000000000000000000000000000000000000000000000000082611e63565b8060096000828254610d4a9190613604565b909155505050565b600d546040516001600160601b03193360601b16602082015260348101849052610d979183916054015b60405160208183030381529060405280519060200120612124565b610dd15760405162461bcd60e51b815260206004820152600b60248201526a085b595c9adb19549bdbdd60aa1b6044820152606401610b60565b606482601254610de19190613604565b10610e195760405162461bcd60e51b815260206004820152600860248201526702161697264726f760c41b6044820152606401610b60565b601154336000908152601060205260409020548111610e675760405162461bcd60e51b815260206004820152600a60248201526921757365724e6f6e636560b01b6044820152606401610b60565b610e72600084611e63565b8260126000828254610e849190613604565b9091555050336000908152601060205260409020555050565b6060610eb0610eab83611de4565b61213a565b604051602001610ec09190613617565b6040516020818303038152906040529050919050565b60075460009081906001600160a01b0381169061271090610f0290600160a01b900461ffff168661365c565b610f0c9190613689565b915091509250929050565b6001600160a01b0385163314801590610f375750610f358533610a4b565b155b156110d55760005b83518110156110d357828181518110610f5a57610f5a61369d565b602002602001015160046000868481518110610f7857610f7861369d565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000610fba3390565b6001600160a01b03166001600160a01b0316815260200190815260200160002054101561101a5760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152606401610b60565b82818151811061102c5761102c61369d565b60200260200101516004600086848151811061104a5761104a61369d565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600061108c3390565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546110bb91906136b3565b909155508190506110cb816136c6565b915050610f3f565b505b6110e2858585858561228c565b5050505050565b600b546040516001600160601b03193360601b166020820152611110918391603401610d7c565b6111445760405162461bcd60e51b8152602060048201526005602482015264085c9bdbdd60da1b6044820152606401610b60565b336000908152600e602052604090205460ff161561118e5760405162461bcd60e51b815260206004820152600760248201526618db185a5b595960ca1b6044820152606401610b60565b6111ab336002600160405180602001604052806000815250612477565b336000908152600e60205260408120805460ff1916600117905560026040516001815233907f18dd06c49d8b6bb7cd0a80c76c73e15cd17629948f2286899b1c747b2251e56c9060200160405180910390a450565b606081518351146112655760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610b60565b600083516001600160401b0381111561128057611280613073565b6040519080825280602002602001820160405280156112a9578160200160208202803683370190505b50905060005b8451811015611321576112f48582815181106112cd576112cd61369d565b60200260200101518583815181106112e7576112e761369d565b6020026020010151610af9565b8282815181106113065761130661369d565b602090810291909101015261131a816136c6565b90506112af565b509392505050565b6006546001600160a01b031633146113535760405162461bcd60e51b8152600401610b60906136df565b47806113995760405162461bcd60e51b81526020600482015260156024820152744e6f2065746865727320746f20776974686472617760581b6044820152606401610b60565b6113a38282612591565b6040518181526001600160a01b0383169033907f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398906020015b60405180910390a35050565b6006546001600160a01b031633146114125760405162461bcd60e51b8152600401610b60906136df565b61141b81612631565b336001600160a01b03167fff9f5326d1d2833dce5b39220446d89e1d49234ceacf56ad194c69a5cb423d2a826040516114549190613060565b60405180910390a250565b6006546001600160a01b031633146114895760405162461bcd60e51b8152600401610b60906136df565b6006546001600160a01b038083169116036114d85760405162461bcd60e51b815260206004820152600f60248201526e30b236b4b7101e9e902fb0b236b4b760891b6044820152606401610b60565b600680546001600160a01b0319166001600160a01b0383169081179091556040517f71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c90600090a250565b6006546001600160a01b0316331461154c5760405162461bcd60e51b8152600401610b60906136df565b6001600160a01b038216151580611565575061ffff8116155b6115a45760405162461bcd60e51b815260206004820152601060248201526f34b73b30b634b2103932b1b2b4bb32b960811b6044820152606401610b60565b600780546001600160a01b0384166001600160b01b03199091168117600160a01b61ffff8516908102919091179092556040519182529033907f9ca088b6b695032bcd5d1fa450e8fa2773391294f09e3710ace940c4ae8cffac906020016113dc565b600c546116455760405162461bcd60e51b815260206004820152600c60248201526b085a5b9a5d1a585b1a5e995960a21b6044820152606401610b60565b600c546040516001600160601b03193360601b16602082015261166c918391603401610d7c565b61167557600080fd5b6128ce826009546116869190613604565b11156116c05760405162461bcd60e51b815260206004820152600960248201526821707572636861736560b81b6044820152606401610b60565b336000908152600f6020526040902054600a906116de908490613604565b111561172c5760405162461bcd60e51b815260206004820152601860248201527f4d6178696d756d20616d6f756e742070757263686173656400000000000000006044820152606401610b60565b6117567f000000000000000000000000000000000000000000000000000000000000000083611e63565b336000908152600f602052604081208054849290611775908490613604565b92505081905550816009600082825461178e9190613604565b90915550505050565b6000336117a68582868661263d565b506001949350505050565b606060006117bf6000612758565b90507fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708180519060200120036118225760405162461bcd60e51b8152602060048201526008602482015267216261736555524960c01b6044820152606401610b60565b61182c6000612758565b611835846127ec565b6040516020016118469291906136ff565b604051602081830303815290604052915050919050565b606060028211156118a35760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081d1bdad95b88125160821b6044820152606401610b60565b816118bc57505060408051602081019091526000815290565b600282036118d857505060408051602081019091526000815290565b505060408051602081019091526000815290565b6006546001600160a01b031633146119165760405162461bcd60e51b8152600401610b60906136df565b600861192282826137ae565b50336001600160a01b03167f1ca91f64ead03abb06ea28975dfbf18044ac06f9fa1cb62a54ccc905df1028ed826040516114549190613060565b6006546001600160a01b031633146119865760405162461bcd60e51b8152600401610b60906136df565b6064601254106119c35760405162461bcd60e51b815260206004820152600860248201526702161697264726f760c41b6044820152606401610b60565b600d819055601180546000906119d8906136c6565b918290555060405182815233907f699553634e4b5cabde9cb937c90f3ec95a7fa09380d592304f684764d34a65979060200160405180910390a350565b611a203383836128f4565b5050565b6000611a31600c54151590565b8015611a3f57506013544210155b905090565b6006546001600160a01b03163314611a6e5760405162461bcd60e51b8152600401610b60906136df565b600b5415611ab85760405162461bcd60e51b815260206004820152601760248201527613595c9adb19481c9bdbdd08185b1c9958591e481cd95d604a1b6044820152606401610b60565b600b81905560405181815233907fa5856f9666c7d78171b1fe5762ce0cb061b435c10fa6065e97d74b43b7a01f9a90602001611454565b6006546001600160a01b03163314611b195760405162461bcd60e51b8152600401610b60906136df565b600c5415611b635760405162461bcd60e51b815260206004820152601760248201527613595c9adb19481c9bdbdd08185b1c9958591e481cd95d604a1b6044820152606401610b60565b81611ba65760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a590813595c9adb19481c9bdbdd606a1b6044820152606401610b60565b600c829055611bb58142613604565b601355337fa5573f036edaa8d46e382a986a6297b242b4625f18ff4c2a5cff3edbe154da4f83611be58442613604565b6040805192835260208301919091520160405180910390a25050565b60088054611c0e9061372e565b80601f0160208091040260200160405190810160405280929190818152602001828054611c3a9061372e565b8015611c875780601f10611c5c57610100808354040283529160200191611c87565b820191906000526020600020905b815481529060010190602001808311611c6a57829003601f168201915b505050505081565b6001600160a01b0385163314801590611caf5750611cad8533610a4b565b155b15611d5f5760008381526004602090815260408083206001600160a01b03891684528252808320338452909152902054821115611d1f5760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152606401610b60565b60008381526004602090815260408083206001600160a01b0389168452825280832033845290915281208054849290611d599084906136b3565b90915550505b6110e285858585856129d4565b6006546001600160a01b03163314611d965760405162461bcd60e51b8152600401610b60906136df565b600580546001600160a01b0319166001600160a01b038316908117909155604051819033907fb9312e2100469bd44e3f762c248f4dcc8d7788906fabf34f79db45920c37e26990600090a450565b6060611def82610bb7565b611df88361185d565b611e01846117b1565b604051602001610ec09392919061386d565b60006001600160e01b03198216636cdb3d1360e11b1480611e4457506001600160e01b031982166303a24d0760e21b145b80610b8c57506301ffc9a760e01b6001600160e01b0319831614610b8c565b6000611e6f838361365c565b905080341015611eb55760405162461bcd60e51b81526020600482015260116024820152704e6f7420656e6f7567682065746865727360781b6044820152606401610b60565b6009546040516001600160601b03193360601b1660208201524260348201526054810184905260748101919091526000906094016040516020818303038152906040528051906020012060001c90506000611f0e612f5d565b60005b8581101561200b57611f256103e885613912565b60008052600a6020527f13da86008ba1c6922daee3e07db95305ef49ebced9f5467a0b8613fcc6b343e354909350831015611f74578160005b602002018051611f6d906136c6565b9052611fc1565b6001600052600a6020527fbbc70db1b6c7afd11e79c0fb0051300458f1a3acb8ee9789d9b6b26c61ad9bc754831015611faf57816001611f5e565b604082018051611fbe906136c6565b90525b611fcd6103e885613689565b604051602001611fdf91815260200190565b60408051601f198184030181529190528051602090910120935080612003816136c6565b915050611f11565b5060005b60038160ff1610156120fc57818160ff16600381106120305761203061369d565b6020020151156120ea5761206e3360ff83168481600381106120545761205461369d565b602002015160405180602001604052806000815250612477565b600060ff82166002811115612085576120856135d8565b6002811115612096576120966135d8565b337f18dd06c49d8b6bb7cd0a80c76c73e15cd17629948f2286899b1c747b2251e56c8560ff8616600381106120cd576120cd61369d565b60200201516040516120e191815260200190565b60405180910390a45b806120f481613926565b91505061200f565b50600061210985346136b3565b9050801561211b5761211b3382612591565b50505050505050565b6000826121318584612b0c565b14949350505050565b6060815160000361215957505060408051602081019091526000815290565b6000604051806060016040528060408152602001613bb060409139905060006003845160026121889190613604565b6121929190613689565b61219d90600461365c565b6001600160401b038111156121b4576121b4613073565b6040519080825280601f01601f1916602001820160405280156121de576020820181803683370190505b509050600182016020820185865187015b8082101561224a576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f81168501518453506001830192506121ef565b5050600386510660018114612266576002811461227957612281565b603d6001830353603d6002830353612281565b603d60018303535b509195945050505050565b81518351146122ee5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610b60565b6001600160a01b0384166123145760405162461bcd60e51b8152600401610b6090613945565b33612323818787878787612b51565b60005b84518110156124095760008582815181106123435761234361369d565b6020026020010151905060008583815181106123615761236161369d565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156123b15760405162461bcd60e51b8152600401610b609061398a565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906123ee908490613604565b9250508190555050505080612402906136c6565b9050612326565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516124599291906139d4565b60405180910390a461246f818787878787612cca565b505050505050565b6001600160a01b0384166124d75760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610b60565b3360006124e385612e25565b905060006124f085612e25565b905061250183600089858589612b51565b6000868152602081815260408083206001600160a01b038b16845290915281208054879290612531908490613604565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461211b83600089898989612e70565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146125de576040519150601f19603f3d011682016040523d82523d6000602084013e6125e3565b606091505b505090508061262c5760405162461bcd60e51b81526020600482015260156024820152744661696c65642073656e64696e672065746865727360581b6044820152606401610b60565b505050565b6002611a2082826137ae565b6001600160a01b0383166126935760405162461bcd60e51b815260206004820152601d60248201527f417070726f76652066726f6d20746865207a65726f20616464726573730000006044820152606401610b60565b6001600160a01b0382166126e95760405162461bcd60e51b815260206004820152601b60248201527f417070726f766520746f20746865207a65726f206164647265737300000000006044820152606401610b60565b60008481526004602090815260408083206001600160a01b03878116808652918452828520908716808652908452938290208590559051848152909187917f69e4aaf23f9318cf40839ac20453d8fbedaac2955eb08a27ae5189cc71925716910160405180910390a450505050565b6060600280546127679061372e565b80601f01602080910402602001604051908101604052809291908181526020018280546127939061372e565b80156127e05780601f106127b5576101008083540402835291602001916127e0565b820191906000526020600020905b8154815290600101906020018083116127c357829003601f168201915b50505050509050919050565b6060816000036128135750506040805180820190915260018152600360fc1b602082015290565b8160005b811561283d5780612827816136c6565b91506128369050600a83613689565b9150612817565b6000816001600160401b0381111561285757612857613073565b6040519080825280601f01601f191660200182016040528015612881576020820181803683370190505b5090505b84156128ec576128966001836136b3565b91506128a3600a86613912565b6128ae906030613604565b60f81b8183815181106128c3576128c361369d565b60200101906001600160f81b031916908160001a9053506128e5600a86613689565b9450612885565b949350505050565b816001600160a01b0316836001600160a01b0316036129675760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610b60565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166129fa5760405162461bcd60e51b8152600401610b6090613945565b336000612a0685612e25565b90506000612a1385612e25565b9050612a23838989858589612b51565b6000868152602081815260408083206001600160a01b038c16845290915290205485811015612a645760405162461bcd60e51b8152600401610b609061398a565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290612aa1908490613604565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612b01848a8a8a8a8a612e70565b505050505050505050565b600081815b845181101561132157612b3d82868381518110612b3057612b3061369d565b6020026020010151612f2b565b915080612b49816136c6565b915050612b11565b6001600160a01b038516612bd85760005b8351811015612bd657828181518110612b7d57612b7d61369d565b602002602001015160036000868481518110612b9b57612b9b61369d565b602002602001015181526020019081526020016000206000828254612bc09190613604565b90915550612bcf9050816136c6565b9050612b62565b505b6001600160a01b03841661246f5760005b835181101561211b576000848281518110612c0657612c0661369d565b602002602001015190506000848381518110612c2457612c2461369d565b6020026020010151905060006003600084815260200190815260200160002054905081811015612ca75760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f74604482015267616c537570706c7960c01b6064820152608401610b60565b60009283526003602052604090922091039055612cc3816136c6565b9050612be9565b6001600160a01b0384163b1561246f5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612d0e9089908990889088908890600401613a02565b6020604051808303816000875af1925050508015612d49575060408051601f3d908101601f19168201909252612d4691810190613a60565b60015b612df557612d55613a7d565b806308c379a003612d8e5750612d69613a99565b80612d745750612d90565b8060405162461bcd60e51b8152600401610b609190613060565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610b60565b6001600160e01b0319811663bc197c8160e01b1461211b5760405162461bcd60e51b8152600401610b6090613b22565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612e5f57612e5f61369d565b602090810291909101015292915050565b6001600160a01b0384163b1561246f5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612eb49089908990889088908890600401613b6a565b6020604051808303816000875af1925050508015612eef575060408051601f3d908101601f19168201909252612eec91810190613a60565b60015b612efb57612d55613a7d565b6001600160e01b0319811663f23a6e6160e01b1461211b5760405162461bcd60e51b8152600401610b6090613b22565b6000818310612f47576000828152602084905260409020612f56565b60008381526020839052604090205b9392505050565b60405180606001604052806003906020820280368337509192915050565b80356001600160a01b0381168114612f9257600080fd5b919050565b60008060408385031215612faa57600080fd5b612fb383612f7b565b946020939093013593505050565b6001600160e01b031981168114612fd757600080fd5b50565b600060208284031215612fec57600080fd5b8135612f5681612fc1565b60006020828403121561300957600080fd5b5035919050565b60005b8381101561302b578181015183820152602001613013565b50506000910152565b6000815180845261304c816020860160208601613010565b601f01601f19169290920160200192915050565b602081526000612f566020830184613034565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b03811182821017156130ae576130ae613073565b6040525050565b60006001600160401b038211156130ce576130ce613073565b5060051b60200190565b600082601f8301126130e957600080fd5b813560206130f6826130b5565b6040516131038282613089565b83815260059390931b850182019282810191508684111561312357600080fd5b8286015b8481101561313e5780358352918301918301613127565b509695505050505050565b6000806040838503121561315c57600080fd5b8235915060208301356001600160401b0381111561317957600080fd5b613185858286016130d8565b9150509250929050565b600080604083850312156131a257600080fd5b50508035926020909101359150565b60006001600160401b038311156131ca576131ca613073565b6040516131e1601f8501601f191660200182613089565b8091508381528484840111156131f657600080fd5b83836020830137600060208583010152509392505050565b600082601f83011261321f57600080fd5b612f56838335602085016131b1565b600080600080600060a0868803121561324657600080fd5b61324f86612f7b565b945061325d60208701612f7b565b935060408601356001600160401b038082111561327957600080fd5b61328589838a016130d8565b9450606088013591508082111561329b57600080fd5b6132a789838a016130d8565b935060808801359150808211156132bd57600080fd5b506132ca8882890161320e565b9150509295509295909350565b6000602082840312156132e957600080fd5b612f5682612f7b565b60006020828403121561330457600080fd5b81356001600160401b0381111561331a57600080fd5b6128ec848285016130d8565b6000806040838503121561333957600080fd5b82356001600160401b038082111561335057600080fd5b818501915085601f83011261336457600080fd5b81356020613371826130b5565b60405161337e8282613089565b83815260059390931b850182019282810191508984111561339e57600080fd5b948201945b838610156133c3576133b486612f7b565b825294820194908201906133a3565b965050860135925050808211156133d957600080fd5b50613185858286016130d8565b600081518084526020808501945080840160005b83811015613416578151875295820195908201906001016133fa565b509495945050505050565b602081526000612f5660208301846133e6565b60006020828403121561344657600080fd5b813560038110612f5657600080fd5b60006020828403121561346757600080fd5b81356001600160401b0381111561347d57600080fd5b8201601f8101841361348e57600080fd5b6128ec848235602084016131b1565b600080604083850312156134b057600080fd5b6134b983612f7b565b9150602083013561ffff811681146134d057600080fd5b809150509250929050565b6000806000606084860312156134f057600080fd5b8335925061350060208501612f7b565b9150604084013590509250925092565b6000806040838503121561352357600080fd5b61352c83612f7b565b9150602083013580151581146134d057600080fd5b6000806040838503121561355457600080fd5b61355d83612f7b565b915061356b60208401612f7b565b90509250929050565b600080600080600060a0868803121561358c57600080fd5b61359586612f7b565b94506135a360208701612f7b565b9350604086013592506060860135915060808601356001600160401b038111156135cc57600080fd5b6132ca8882890161320e565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610b8c57610b8c6135ee565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161364f81601d850160208701613010565b91909101601d0192915050565b8082028115828204841417610b8c57610b8c6135ee565b634e487b7160e01b600052601260045260246000fd5b60008261369857613698613673565b500490565b634e487b7160e01b600052603260045260246000fd5b81810381811115610b8c57610b8c6135ee565b6000600182016136d8576136d86135ee565b5060010190565b60208082526006908201526510b0b236b4b760d11b604082015260600190565b60008351613711818460208801613010565b835190830190613725818360208801613010565b01949350505050565b600181811c9082168061374257607f821691505b60208210810361376257634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561262c57600081815260208120601f850160051c8101602086101561378f5750805b601f850160051c820191505b8181101561246f5782815560010161379b565b81516001600160401b038111156137c7576137c7613073565b6137db816137d5845461372e565b84613768565b602080601f83116001811461381057600084156137f85750858301515b600019600386901b1c1916600185901b17855561246f565b600085815260208120601f198616915b8281101561383f57888601518255948401946001909101908401613820565b508582101561385d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6a3d90113730b6b2911d101160a91b8152835160009061389481600b850160208901613010565b72111610113232b9b1b934b83a34b7b7111d101160691b600b9184019182015284516138c781601e840160208901613010565b6c1116101134b6b0b3b2911d101160991b601e929091019182015283516138f581602b840160208801613010565b6222207d60e81b602b9290910191820152602e0195945050505050565b60008261392157613921613673565b500690565b600060ff821660ff810361393c5761393c6135ee565b60010192915050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006139e760408301856133e6565b82810360208401526139f981856133e6565b95945050505050565b6001600160a01b0386811682528516602082015260a060408201819052600090613a2e908301866133e6565b8281036060840152613a4081866133e6565b90508281036080840152613a548185613034565b98975050505050505050565b600060208284031215613a7257600080fd5b8151612f5681612fc1565b600060033d1115613a965760046000803e5060005160e01c5b90565b600060443d1015613aa75790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715613ad657505050505090565b8285019150815181811115613aee5750505050505090565b843d8701016020828501011115613b085750505050505090565b613b1760208286010187613089565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090613ba490830184613034565b97965050505050505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212208140704c9350a810dadf26218742771ae8e5c2efc10df14adcd40929b721036d64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106103755760003560e01c80637e776a3f116101d1578063a22cb46511610102578063bd85b039116100a0578063f242432a1161006f578063f242432a14610a79578063f2fde38b14610a99578063f5c0a5ff14610ab9578063f851a44014610ad957600080fd5b8063bd85b039146109ba578063c7f01e4c146109e7578063e8a3d48514610a1b578063e985e9c514610a3057600080fd5b8063aa98e0c6116100dc578063aa98e0c614610937578063afd2b87c1461094d578063afe1a4551461096d578063b548f2ae1461098d57600080fd5b8063a22cb465146108ec578063a2e914771461090c578063a5ce30d21461092157600080fd5b8063920ac79d1161016f5780639d9e7a99116101495780639d9e7a99146108805780639e12e3aa146108a05780639eea92cd146108b65780639fbc8713146108cc57600080fd5b8063920ac79d14610829578063938e3d7b14610849578063973335c01461086957600080fd5b80638a71bb2d116101ab5780638a71bb2d1461077c5780638cb0a511146107b15780638da5cb5b146107d15780638f742d161461080957600080fd5b80637e776a3f14610737578063848966901461074c578063886371171461048b57600080fd5b80632f54bf6e116102ab5780635a50d2f411610249578063704b6c0211610223578063704b6c02146106cf57806372504a24146106ef578063731e5b131461070f578063743b6d881461072257600080fd5b80635a50d2f41461066c5780636bb7b1d9146106995780636cfa24cc146106af57600080fd5b80634e1273f4116102855780634e1273f4146105db5780634f558e791461060857806351cff8d9146106375780635856aafb1461065757600080fd5b80632f54bf6e1461055f5780633fc60d511461058e5780634ba1427e146105ae57600080fd5b80631b004d14116103185780632a55205a116102f25780632a55205a146104d55780632bbde22e146105145780632c1d89e21461052a5780632eb2c2d61461053f57600080fd5b80631b004d141461047557806320e66bd31461048b578063231e5934146104a157600080fd5b80630afbd602116103545780630afbd6021461040a5780630bcae1ac1461041f5780630e89341c1461043f5780631acbc8231461045f57600080fd5b8062fdd58e1461037a57806301ffc9a7146103ad57806303504235146103dd575b600080fd5b34801561038657600080fd5b5061039a610395366004612f97565b610af9565b6040519081526020015b60405180910390f35b3480156103b957600080fd5b506103cd6103c8366004612fda565b610b92565b60405190151581526020016103a4565b3480156103e957600080fd5b506103fd6103f8366004612ff7565b610bb7565b6040516103a49190613060565b61041d610418366004612ff7565b610c86565b005b34801561042b57600080fd5b5061041d61043a366004613149565b610d52565b34801561044b57600080fd5b506103fd61045a366004612ff7565b610e9d565b34801561046b57600080fd5b5061039a60095481565b34801561048157600080fd5b5061039a6128ce81565b34801561049757600080fd5b5061039a6103e881565b3480156104ad57600080fd5b5061039a7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104e157600080fd5b506104f56104f036600461318f565b610ed6565b604080516001600160a01b0390931683526020830191909152016103a4565b34801561052057600080fd5b5061039a600b5481565b34801561053657600080fd5b5061039a600181565b34801561054b57600080fd5b5061041d61055a36600461322e565b610f17565b34801561056b57600080fd5b506103cd61057a3660046132d7565b6005546001600160a01b0391821691161490565b34801561059a57600080fd5b5061041d6105a93660046132f2565b6110e9565b3480156105ba57600080fd5b5061039a6105c93660046132d7565b60106020526000908152604090205481565b3480156105e757600080fd5b506105fb6105f6366004613326565b611200565b6040516103a49190613421565b34801561061457600080fd5b506103cd610623366004612ff7565b600090815260036020526040902054151590565b34801561064357600080fd5b5061041d6106523660046132d7565b611329565b34801561066357600080fd5b5061039a600481565b34801561067857600080fd5b5061039a610687366004613434565b600a6020526000908152604090205481565b3480156106a557600080fd5b5061039a60135481565b3480156106bb57600080fd5b5061041d6106ca366004613455565b6113e8565b3480156106db57600080fd5b5061041d6106ea3660046132d7565b61145f565b3480156106fb57600080fd5b5061041d61070a36600461349d565b611522565b61041d61071d366004613149565b611607565b34801561072e57600080fd5b5061039a606481565b34801561074357600080fd5b5061039a600a81565b34801561075857600080fd5b506103cd6107673660046132d7565b600e6020526000908152604090205460ff1681565b34801561078857600080fd5b5060075461079e90600160a01b900461ffff1681565b60405161ffff90911681526020016103a4565b3480156107bd57600080fd5b506103cd6107cc3660046134db565b611797565b3480156107dd57600080fd5b506005546107f1906001600160a01b031681565b6040516001600160a01b0390911681526020016103a4565b34801561081557600080fd5b506103fd610824366004612ff7565b6117b1565b34801561083557600080fd5b506103fd610844366004612ff7565b61185d565b34801561085557600080fd5b5061041d610864366004613455565b6118ec565b34801561087557600080fd5b50600c5415156103cd565b34801561088c57600080fd5b5061041d61089b366004612ff7565b61195c565b3480156108ac57600080fd5b5061039a60115481565b3480156108c257600080fd5b5061039a60125481565b3480156108d857600080fd5b506007546107f1906001600160a01b031681565b3480156108f857600080fd5b5061041d610907366004613510565b611a15565b34801561091857600080fd5b506103cd611a24565b34801561092d57600080fd5b5061039a600d5481565b34801561094357600080fd5b5061039a600c5481565b34801561095957600080fd5b5061041d610968366004612ff7565b611a44565b34801561097957600080fd5b5061041d61098836600461318f565b611aef565b34801561099957600080fd5b5061039a6109a83660046132d7565b600f6020526000908152604090205481565b3480156109c657600080fd5b5061039a6109d5366004612ff7565b60009081526003602052604090205490565b3480156109f357600080fd5b5061039a7f000000000000000000000000000000000000000000000000000000000000000081565b348015610a2757600080fd5b506103fd611c01565b348015610a3c57600080fd5b506103cd610a4b366004613541565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b348015610a8557600080fd5b5061041d610a94366004613574565b611c8f565b348015610aa557600080fd5b5061041d610ab43660046132d7565b611d6c565b348015610ac557600080fd5b506103fd610ad4366004612ff7565b611de4565b348015610ae557600080fd5b506006546107f1906001600160a01b031681565b60006001600160a01b038316610b695760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b0319821663152a902d60e11b1480610b8c5750610b8c82611e13565b60606002821115610bfd5760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081d1bdad95b88125160821b6044820152606401610b60565b81610c2c57505060408051808201909152600e81526d213937b73d32902834b7b732b2b960911b602082015290565b60028203610c5e57505060408051808201909152600e81526d29b4b63b32b9102834b7b732b2b960911b602082015290565b505060408051808201909152600c81526b23b7b632102834b7b732b2b960a11b602082015290565b610c8e611a24565b610cc35760405162461bcd60e51b8152602060048201526006602482015265085cdd185c9d60d21b6044820152606401610b60565b6128ce81600954610cd49190613604565b1115610d0e5760405162461bcd60e51b815260206004820152600960248201526821707572636861736560b81b6044820152606401610b60565b610d387f000000000000000000000000000000000000000000000000000000000000000082611e63565b8060096000828254610d4a9190613604565b909155505050565b600d546040516001600160601b03193360601b16602082015260348101849052610d979183916054015b60405160208183030381529060405280519060200120612124565b610dd15760405162461bcd60e51b815260206004820152600b60248201526a085b595c9adb19549bdbdd60aa1b6044820152606401610b60565b606482601254610de19190613604565b10610e195760405162461bcd60e51b815260206004820152600860248201526702161697264726f760c41b6044820152606401610b60565b601154336000908152601060205260409020548111610e675760405162461bcd60e51b815260206004820152600a60248201526921757365724e6f6e636560b01b6044820152606401610b60565b610e72600084611e63565b8260126000828254610e849190613604565b9091555050336000908152601060205260409020555050565b6060610eb0610eab83611de4565b61213a565b604051602001610ec09190613617565b6040516020818303038152906040529050919050565b60075460009081906001600160a01b0381169061271090610f0290600160a01b900461ffff168661365c565b610f0c9190613689565b915091509250929050565b6001600160a01b0385163314801590610f375750610f358533610a4b565b155b156110d55760005b83518110156110d357828181518110610f5a57610f5a61369d565b602002602001015160046000868481518110610f7857610f7861369d565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000610fba3390565b6001600160a01b03166001600160a01b0316815260200190815260200160002054101561101a5760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152606401610b60565b82818151811061102c5761102c61369d565b60200260200101516004600086848151811061104a5761104a61369d565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600061108c3390565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546110bb91906136b3565b909155508190506110cb816136c6565b915050610f3f565b505b6110e2858585858561228c565b5050505050565b600b546040516001600160601b03193360601b166020820152611110918391603401610d7c565b6111445760405162461bcd60e51b8152602060048201526005602482015264085c9bdbdd60da1b6044820152606401610b60565b336000908152600e602052604090205460ff161561118e5760405162461bcd60e51b815260206004820152600760248201526618db185a5b595960ca1b6044820152606401610b60565b6111ab336002600160405180602001604052806000815250612477565b336000908152600e60205260408120805460ff1916600117905560026040516001815233907f18dd06c49d8b6bb7cd0a80c76c73e15cd17629948f2286899b1c747b2251e56c9060200160405180910390a450565b606081518351146112655760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610b60565b600083516001600160401b0381111561128057611280613073565b6040519080825280602002602001820160405280156112a9578160200160208202803683370190505b50905060005b8451811015611321576112f48582815181106112cd576112cd61369d565b60200260200101518583815181106112e7576112e761369d565b6020026020010151610af9565b8282815181106113065761130661369d565b602090810291909101015261131a816136c6565b90506112af565b509392505050565b6006546001600160a01b031633146113535760405162461bcd60e51b8152600401610b60906136df565b47806113995760405162461bcd60e51b81526020600482015260156024820152744e6f2065746865727320746f20776974686472617760581b6044820152606401610b60565b6113a38282612591565b6040518181526001600160a01b0383169033907f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398906020015b60405180910390a35050565b6006546001600160a01b031633146114125760405162461bcd60e51b8152600401610b60906136df565b61141b81612631565b336001600160a01b03167fff9f5326d1d2833dce5b39220446d89e1d49234ceacf56ad194c69a5cb423d2a826040516114549190613060565b60405180910390a250565b6006546001600160a01b031633146114895760405162461bcd60e51b8152600401610b60906136df565b6006546001600160a01b038083169116036114d85760405162461bcd60e51b815260206004820152600f60248201526e30b236b4b7101e9e902fb0b236b4b760891b6044820152606401610b60565b600680546001600160a01b0319166001600160a01b0383169081179091556040517f71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c90600090a250565b6006546001600160a01b0316331461154c5760405162461bcd60e51b8152600401610b60906136df565b6001600160a01b038216151580611565575061ffff8116155b6115a45760405162461bcd60e51b815260206004820152601060248201526f34b73b30b634b2103932b1b2b4bb32b960811b6044820152606401610b60565b600780546001600160a01b0384166001600160b01b03199091168117600160a01b61ffff8516908102919091179092556040519182529033907f9ca088b6b695032bcd5d1fa450e8fa2773391294f09e3710ace940c4ae8cffac906020016113dc565b600c546116455760405162461bcd60e51b815260206004820152600c60248201526b085a5b9a5d1a585b1a5e995960a21b6044820152606401610b60565b600c546040516001600160601b03193360601b16602082015261166c918391603401610d7c565b61167557600080fd5b6128ce826009546116869190613604565b11156116c05760405162461bcd60e51b815260206004820152600960248201526821707572636861736560b81b6044820152606401610b60565b336000908152600f6020526040902054600a906116de908490613604565b111561172c5760405162461bcd60e51b815260206004820152601860248201527f4d6178696d756d20616d6f756e742070757263686173656400000000000000006044820152606401610b60565b6117567f000000000000000000000000000000000000000000000000000000000000000083611e63565b336000908152600f602052604081208054849290611775908490613604565b92505081905550816009600082825461178e9190613604565b90915550505050565b6000336117a68582868661263d565b506001949350505050565b606060006117bf6000612758565b90507fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708180519060200120036118225760405162461bcd60e51b8152602060048201526008602482015267216261736555524960c01b6044820152606401610b60565b61182c6000612758565b611835846127ec565b6040516020016118469291906136ff565b604051602081830303815290604052915050919050565b606060028211156118a35760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081d1bdad95b88125160821b6044820152606401610b60565b816118bc57505060408051602081019091526000815290565b600282036118d857505060408051602081019091526000815290565b505060408051602081019091526000815290565b6006546001600160a01b031633146119165760405162461bcd60e51b8152600401610b60906136df565b600861192282826137ae565b50336001600160a01b03167f1ca91f64ead03abb06ea28975dfbf18044ac06f9fa1cb62a54ccc905df1028ed826040516114549190613060565b6006546001600160a01b031633146119865760405162461bcd60e51b8152600401610b60906136df565b6064601254106119c35760405162461bcd60e51b815260206004820152600860248201526702161697264726f760c41b6044820152606401610b60565b600d819055601180546000906119d8906136c6565b918290555060405182815233907f699553634e4b5cabde9cb937c90f3ec95a7fa09380d592304f684764d34a65979060200160405180910390a350565b611a203383836128f4565b5050565b6000611a31600c54151590565b8015611a3f57506013544210155b905090565b6006546001600160a01b03163314611a6e5760405162461bcd60e51b8152600401610b60906136df565b600b5415611ab85760405162461bcd60e51b815260206004820152601760248201527613595c9adb19481c9bdbdd08185b1c9958591e481cd95d604a1b6044820152606401610b60565b600b81905560405181815233907fa5856f9666c7d78171b1fe5762ce0cb061b435c10fa6065e97d74b43b7a01f9a90602001611454565b6006546001600160a01b03163314611b195760405162461bcd60e51b8152600401610b60906136df565b600c5415611b635760405162461bcd60e51b815260206004820152601760248201527613595c9adb19481c9bdbdd08185b1c9958591e481cd95d604a1b6044820152606401610b60565b81611ba65760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a590813595c9adb19481c9bdbdd606a1b6044820152606401610b60565b600c829055611bb58142613604565b601355337fa5573f036edaa8d46e382a986a6297b242b4625f18ff4c2a5cff3edbe154da4f83611be58442613604565b6040805192835260208301919091520160405180910390a25050565b60088054611c0e9061372e565b80601f0160208091040260200160405190810160405280929190818152602001828054611c3a9061372e565b8015611c875780601f10611c5c57610100808354040283529160200191611c87565b820191906000526020600020905b815481529060010190602001808311611c6a57829003601f168201915b505050505081565b6001600160a01b0385163314801590611caf5750611cad8533610a4b565b155b15611d5f5760008381526004602090815260408083206001600160a01b03891684528252808320338452909152902054821115611d1f5760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152606401610b60565b60008381526004602090815260408083206001600160a01b0389168452825280832033845290915281208054849290611d599084906136b3565b90915550505b6110e285858585856129d4565b6006546001600160a01b03163314611d965760405162461bcd60e51b8152600401610b60906136df565b600580546001600160a01b0319166001600160a01b038316908117909155604051819033907fb9312e2100469bd44e3f762c248f4dcc8d7788906fabf34f79db45920c37e26990600090a450565b6060611def82610bb7565b611df88361185d565b611e01846117b1565b604051602001610ec09392919061386d565b60006001600160e01b03198216636cdb3d1360e11b1480611e4457506001600160e01b031982166303a24d0760e21b145b80610b8c57506301ffc9a760e01b6001600160e01b0319831614610b8c565b6000611e6f838361365c565b905080341015611eb55760405162461bcd60e51b81526020600482015260116024820152704e6f7420656e6f7567682065746865727360781b6044820152606401610b60565b6009546040516001600160601b03193360601b1660208201524260348201526054810184905260748101919091526000906094016040516020818303038152906040528051906020012060001c90506000611f0e612f5d565b60005b8581101561200b57611f256103e885613912565b60008052600a6020527f13da86008ba1c6922daee3e07db95305ef49ebced9f5467a0b8613fcc6b343e354909350831015611f74578160005b602002018051611f6d906136c6565b9052611fc1565b6001600052600a6020527fbbc70db1b6c7afd11e79c0fb0051300458f1a3acb8ee9789d9b6b26c61ad9bc754831015611faf57816001611f5e565b604082018051611fbe906136c6565b90525b611fcd6103e885613689565b604051602001611fdf91815260200190565b60408051601f198184030181529190528051602090910120935080612003816136c6565b915050611f11565b5060005b60038160ff1610156120fc57818160ff16600381106120305761203061369d565b6020020151156120ea5761206e3360ff83168481600381106120545761205461369d565b602002015160405180602001604052806000815250612477565b600060ff82166002811115612085576120856135d8565b6002811115612096576120966135d8565b337f18dd06c49d8b6bb7cd0a80c76c73e15cd17629948f2286899b1c747b2251e56c8560ff8616600381106120cd576120cd61369d565b60200201516040516120e191815260200190565b60405180910390a45b806120f481613926565b91505061200f565b50600061210985346136b3565b9050801561211b5761211b3382612591565b50505050505050565b6000826121318584612b0c565b14949350505050565b6060815160000361215957505060408051602081019091526000815290565b6000604051806060016040528060408152602001613bb060409139905060006003845160026121889190613604565b6121929190613689565b61219d90600461365c565b6001600160401b038111156121b4576121b4613073565b6040519080825280601f01601f1916602001820160405280156121de576020820181803683370190505b509050600182016020820185865187015b8082101561224a576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f81168501518453506001830192506121ef565b5050600386510660018114612266576002811461227957612281565b603d6001830353603d6002830353612281565b603d60018303535b509195945050505050565b81518351146122ee5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610b60565b6001600160a01b0384166123145760405162461bcd60e51b8152600401610b6090613945565b33612323818787878787612b51565b60005b84518110156124095760008582815181106123435761234361369d565b6020026020010151905060008583815181106123615761236161369d565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156123b15760405162461bcd60e51b8152600401610b609061398a565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906123ee908490613604565b9250508190555050505080612402906136c6565b9050612326565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516124599291906139d4565b60405180910390a461246f818787878787612cca565b505050505050565b6001600160a01b0384166124d75760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610b60565b3360006124e385612e25565b905060006124f085612e25565b905061250183600089858589612b51565b6000868152602081815260408083206001600160a01b038b16845290915281208054879290612531908490613604565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461211b83600089898989612e70565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146125de576040519150601f19603f3d011682016040523d82523d6000602084013e6125e3565b606091505b505090508061262c5760405162461bcd60e51b81526020600482015260156024820152744661696c65642073656e64696e672065746865727360581b6044820152606401610b60565b505050565b6002611a2082826137ae565b6001600160a01b0383166126935760405162461bcd60e51b815260206004820152601d60248201527f417070726f76652066726f6d20746865207a65726f20616464726573730000006044820152606401610b60565b6001600160a01b0382166126e95760405162461bcd60e51b815260206004820152601b60248201527f417070726f766520746f20746865207a65726f206164647265737300000000006044820152606401610b60565b60008481526004602090815260408083206001600160a01b03878116808652918452828520908716808652908452938290208590559051848152909187917f69e4aaf23f9318cf40839ac20453d8fbedaac2955eb08a27ae5189cc71925716910160405180910390a450505050565b6060600280546127679061372e565b80601f01602080910402602001604051908101604052809291908181526020018280546127939061372e565b80156127e05780601f106127b5576101008083540402835291602001916127e0565b820191906000526020600020905b8154815290600101906020018083116127c357829003601f168201915b50505050509050919050565b6060816000036128135750506040805180820190915260018152600360fc1b602082015290565b8160005b811561283d5780612827816136c6565b91506128369050600a83613689565b9150612817565b6000816001600160401b0381111561285757612857613073565b6040519080825280601f01601f191660200182016040528015612881576020820181803683370190505b5090505b84156128ec576128966001836136b3565b91506128a3600a86613912565b6128ae906030613604565b60f81b8183815181106128c3576128c361369d565b60200101906001600160f81b031916908160001a9053506128e5600a86613689565b9450612885565b949350505050565b816001600160a01b0316836001600160a01b0316036129675760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610b60565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166129fa5760405162461bcd60e51b8152600401610b6090613945565b336000612a0685612e25565b90506000612a1385612e25565b9050612a23838989858589612b51565b6000868152602081815260408083206001600160a01b038c16845290915290205485811015612a645760405162461bcd60e51b8152600401610b609061398a565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290612aa1908490613604565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612b01848a8a8a8a8a612e70565b505050505050505050565b600081815b845181101561132157612b3d82868381518110612b3057612b3061369d565b6020026020010151612f2b565b915080612b49816136c6565b915050612b11565b6001600160a01b038516612bd85760005b8351811015612bd657828181518110612b7d57612b7d61369d565b602002602001015160036000868481518110612b9b57612b9b61369d565b602002602001015181526020019081526020016000206000828254612bc09190613604565b90915550612bcf9050816136c6565b9050612b62565b505b6001600160a01b03841661246f5760005b835181101561211b576000848281518110612c0657612c0661369d565b602002602001015190506000848381518110612c2457612c2461369d565b6020026020010151905060006003600084815260200190815260200160002054905081811015612ca75760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f74604482015267616c537570706c7960c01b6064820152608401610b60565b60009283526003602052604090922091039055612cc3816136c6565b9050612be9565b6001600160a01b0384163b1561246f5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612d0e9089908990889088908890600401613a02565b6020604051808303816000875af1925050508015612d49575060408051601f3d908101601f19168201909252612d4691810190613a60565b60015b612df557612d55613a7d565b806308c379a003612d8e5750612d69613a99565b80612d745750612d90565b8060405162461bcd60e51b8152600401610b609190613060565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610b60565b6001600160e01b0319811663bc197c8160e01b1461211b5760405162461bcd60e51b8152600401610b6090613b22565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612e5f57612e5f61369d565b602090810291909101015292915050565b6001600160a01b0384163b1561246f5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612eb49089908990889088908890600401613b6a565b6020604051808303816000875af1925050508015612eef575060408051601f3d908101601f19168201909252612eec91810190613a60565b60015b612efb57612d55613a7d565b6001600160e01b0319811663f23a6e6160e01b1461211b5760405162461bcd60e51b8152600401610b6090613b22565b6000818310612f47576000828152602084905260409020612f56565b60008381526020839052604090205b9392505050565b60405180606001604052806003906020820280368337509192915050565b80356001600160a01b0381168114612f9257600080fd5b919050565b60008060408385031215612faa57600080fd5b612fb383612f7b565b946020939093013593505050565b6001600160e01b031981168114612fd757600080fd5b50565b600060208284031215612fec57600080fd5b8135612f5681612fc1565b60006020828403121561300957600080fd5b5035919050565b60005b8381101561302b578181015183820152602001613013565b50506000910152565b6000815180845261304c816020860160208601613010565b601f01601f19169290920160200192915050565b602081526000612f566020830184613034565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b03811182821017156130ae576130ae613073565b6040525050565b60006001600160401b038211156130ce576130ce613073565b5060051b60200190565b600082601f8301126130e957600080fd5b813560206130f6826130b5565b6040516131038282613089565b83815260059390931b850182019282810191508684111561312357600080fd5b8286015b8481101561313e5780358352918301918301613127565b509695505050505050565b6000806040838503121561315c57600080fd5b8235915060208301356001600160401b0381111561317957600080fd5b613185858286016130d8565b9150509250929050565b600080604083850312156131a257600080fd5b50508035926020909101359150565b60006001600160401b038311156131ca576131ca613073565b6040516131e1601f8501601f191660200182613089565b8091508381528484840111156131f657600080fd5b83836020830137600060208583010152509392505050565b600082601f83011261321f57600080fd5b612f56838335602085016131b1565b600080600080600060a0868803121561324657600080fd5b61324f86612f7b565b945061325d60208701612f7b565b935060408601356001600160401b038082111561327957600080fd5b61328589838a016130d8565b9450606088013591508082111561329b57600080fd5b6132a789838a016130d8565b935060808801359150808211156132bd57600080fd5b506132ca8882890161320e565b9150509295509295909350565b6000602082840312156132e957600080fd5b612f5682612f7b565b60006020828403121561330457600080fd5b81356001600160401b0381111561331a57600080fd5b6128ec848285016130d8565b6000806040838503121561333957600080fd5b82356001600160401b038082111561335057600080fd5b818501915085601f83011261336457600080fd5b81356020613371826130b5565b60405161337e8282613089565b83815260059390931b850182019282810191508984111561339e57600080fd5b948201945b838610156133c3576133b486612f7b565b825294820194908201906133a3565b965050860135925050808211156133d957600080fd5b50613185858286016130d8565b600081518084526020808501945080840160005b83811015613416578151875295820195908201906001016133fa565b509495945050505050565b602081526000612f5660208301846133e6565b60006020828403121561344657600080fd5b813560038110612f5657600080fd5b60006020828403121561346757600080fd5b81356001600160401b0381111561347d57600080fd5b8201601f8101841361348e57600080fd5b6128ec848235602084016131b1565b600080604083850312156134b057600080fd5b6134b983612f7b565b9150602083013561ffff811681146134d057600080fd5b809150509250929050565b6000806000606084860312156134f057600080fd5b8335925061350060208501612f7b565b9150604084013590509250925092565b6000806040838503121561352357600080fd5b61352c83612f7b565b9150602083013580151581146134d057600080fd5b6000806040838503121561355457600080fd5b61355d83612f7b565b915061356b60208401612f7b565b90509250929050565b600080600080600060a0868803121561358c57600080fd5b61359586612f7b565b94506135a360208701612f7b565b9350604086013592506060860135915060808601356001600160401b038111156135cc57600080fd5b6132ca8882890161320e565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610b8c57610b8c6135ee565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161364f81601d850160208701613010565b91909101601d0192915050565b8082028115828204841417610b8c57610b8c6135ee565b634e487b7160e01b600052601260045260246000fd5b60008261369857613698613673565b500490565b634e487b7160e01b600052603260045260246000fd5b81810381811115610b8c57610b8c6135ee565b6000600182016136d8576136d86135ee565b5060010190565b60208082526006908201526510b0b236b4b760d11b604082015260600190565b60008351613711818460208801613010565b835190830190613725818360208801613010565b01949350505050565b600181811c9082168061374257607f821691505b60208210810361376257634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561262c57600081815260208120601f850160051c8101602086101561378f5750805b601f850160051c820191505b8181101561246f5782815560010161379b565b81516001600160401b038111156137c7576137c7613073565b6137db816137d5845461372e565b84613768565b602080601f83116001811461381057600084156137f85750858301515b600019600386901b1c1916600185901b17855561246f565b600085815260208120601f198616915b8281101561383f57888601518255948401946001909101908401613820565b508582101561385d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6a3d90113730b6b2911d101160a91b8152835160009061389481600b850160208901613010565b72111610113232b9b1b934b83a34b7b7111d101160691b600b9184019182015284516138c781601e840160208901613010565b6c1116101134b6b0b3b2911d101160991b601e929091019182015283516138f581602b840160208801613010565b6222207d60e81b602b9290910191820152602e0195945050505050565b60008261392157613921613673565b500690565b600060ff821660ff810361393c5761393c6135ee565b60010192915050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006139e760408301856133e6565b82810360208401526139f981856133e6565b95945050505050565b6001600160a01b0386811682528516602082015260a060408201819052600090613a2e908301866133e6565b8281036060840152613a4081866133e6565b90508281036080840152613a548185613034565b98975050505050505050565b600060208284031215613a7257600080fd5b8151612f5681612fc1565b600060033d1115613a965760046000803e5060005160e01c5b90565b600060443d1015613aa75790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715613ad657505050505090565b8285019150815181811115613aee5750505050505090565b843d8701016020828501011115613b085750505050505090565b613b1760208286010187613089565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090613ba490830184613034565b97965050505050505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212208140704c9350a810dadf26218742771ae8e5c2efc10df14adcd40929b721036d64736f6c63430008110033",
  "devdoc": {
    "author": "Yuri Fernandes (HorizonDAO)",
    "events": {
      "AirdropMerkleRootSet(address,uint256,bytes32)": {
        "details": "Emitted when the Airdrop Merkle Root is set"
      },
      "NewImageUri(address,string)": {
        "details": "Emitted when a new base image URI is set for the collections"
      },
      "PioneerClaimed(address,uint8,bool,uint256)": {
        "details": "Emitted when an amount of Pioneer NFTs are claimed"
      },
      "PrivateMerkleRootSet(address,bytes32)": {
        "details": "Emitted when Private Merkle Root is set"
      },
      "SaleInitialized(address,bytes32,uint256)": {
        "details": "Emitted when Sale is initialized"
      },
      "Withdrawal(address,address,uint256)": {
        "details": "Emitted when ethers are withdrawn from the contract"
      }
    },
    "kind": "dev",
    "methods": {
      "approve(uint256,address,uint256)": {
        "params": {
          "_amount": "Amount allowed",
          "_id": "Collection ID",
          "_spender": "Spender address"
        }
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "claimAirdrop(uint256,bytes32[])": {
        "params": {
          "_amount": "Amount to claim",
          "_proof": "Airdrop Merkle Proof"
        }
      },
      "collectionDescription(uint256)": {
        "params": {
          "_id": "Collection ID"
        },
        "returns": {
          "_0": "Collection description"
        }
      },
      "collectionMetadata(uint256)": {
        "params": {
          "_id": "Collection ID"
        },
        "returns": {
          "_0": "Stringified metadata JSON"
        }
      },
      "collectionName(uint256)": {
        "params": {
          "_id": "Collection ID"
        },
        "returns": {
          "_0": "Collection name"
        }
      },
      "constructor": {
        "details": "constructor to initialize PioneerPromoERC1155 contract",
        "params": {
          "_admin": "Adminstrative address, can execute various configuration related functions",
          "_chances": "Array with the chances of getting a Pioneer for each collection",
          "_imageUri": "Base image URI",
          "_owner": "Should be an EOA, will have rights over OpenSea collection configuration",
          "_publicTokenUnitPrice": "Price per token for Public Sale",
          "_whitelistTokenUnitPrice": "Price per token for Whitelisted Sale"
        }
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "imageURI(uint256)": {
        "params": {
          "_id": "Collection ID"
        },
        "returns": {
          "_0": "Image URI"
        }
      },
      "initializeSale(bytes32,uint256)": {
        "details": "Initialize sale (first whitelisted address, then public sale begins)",
        "params": {
          "_publicSaleOffset": "Amount of time that will take for the Public sale to begin",
          "_whitelistMerkleRoot": "Whitelist Merkle Root"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "isOwner(address)": {
        "returns": {
          "_0": "true if the caller is the current owner."
        }
      },
      "privateClaim(bytes32[])": {
        "params": {
          "_proof": "Private Merkle Proof"
        }
      },
      "publicPurchase(uint256)": {
        "params": {
          "_amount": "Amount to purchase"
        }
      },
      "royaltyInfo(uint256,uint256)": {
        "params": {
          "_salePrice": "the price (in any unit, .e.g wei, ERC20 token, et.c.) of the token to be sold"
        },
        "returns": {
          "receiver": "the royalty receiver",
          "royaltyAmount": "royalty amount in the same unit as _salePrice"
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."
      },
      "setAdmin(address)": {
        "details": "Set new admin role",
        "params": {
          "_admin": "New admin address"
        }
      },
      "setAirdropRoot(bytes32)": {
        "details": "Set Airdrop merkle root (multiple times)",
        "params": {
          "_root": "Airdrop Merkle Root"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setContractURI(string)": {
        "details": "Restricted access function which updates the contract URI",
        "params": {
          "_contractURI": "new contract URI to set"
        }
      },
      "setImageBaseURI(string)": {
        "details": "Set new base image URI for collections",
        "params": {
          "_uri": "Base image URI"
        }
      },
      "setPrivateRoot(bytes32)": {
        "details": "Set Private claiming merkle root (only once)",
        "params": {
          "_root": "Private Merkle Root"
        }
      },
      "setRoyaltyInfo(address,uint16)": {
        "details": "Restricted access function which updates the royalty info",
        "params": {
          "_royaltyPercentage": "new royalty percentage to set",
          "_royaltyReceiver": "new royalty receiver to set"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "transferOwnership(address)": {
        "details": "Restricted access function to set smart contract \"owner\"      Note: an \"owner\" set doesn't have any authority, and cannot even update \"owner\"",
        "params": {
          "_owner": "new \"owner\" of the smart contract"
        }
      },
      "uri(uint256)": {
        "params": {
          "_id": "Collection ID"
        },
        "returns": {
          "_0": "Base64 encoded metadata"
        }
      },
      "whitelistPurchase(uint256,bytes32[])": {
        "params": {
          "_amount": "Amount to purchase",
          "_proof": "Whitelist Merkle Proof"
        }
      },
      "withdraw(address)": {
        "details": "Withdraw all ethers from contract",
        "params": {
          "_to": "Address to send the funds"
        }
      }
    },
    "stateVariables": {
      "AIRDROP_MAX_CLAIMS": {
        "details": "Total claimable amount of tokens through airdrops"
      },
      "MAX_CHANCE": {
        "details": "Represents 100% chance, there will be 3 Pioneer collection     with decreasing chances to be minted during purchases     the total chances should sum to MAX_CHANCE"
      },
      "PRIVATE_CLAIM_GOLD": {
        "details": "How many Gold Pioneers a user can get from private claim"
      },
      "PRIVATE_MAX_CLAIMS": {
        "details": "Maximum amount of tokens users can get from private claim"
      },
      "PURCHASABLE_SUPPLY": {
        "details": "Total number of tokens that can be purchased"
      },
      "WHITELIST_MAX_PURCHASES": {
        "details": "How many tokens can be purchased during Whitelisted sale"
      },
      "WHITELIST_PURCHASE_PER_ADDRESS": {
        "details": "How many tokens whitelisted users can purchase"
      },
      "airdropClaimed": {
        "details": "Amount of Airdrop tokens claimed"
      },
      "airdropMerkleRoot": {
        "details": "Airdrop Merkle Root (can be set multiple times)"
      },
      "airdropNonce": {
        "details": "Nonce of the current airdrop Merkle Tree"
      },
      "privateMerkleRoot": {
        "details": "Private Merkle Root (can be set once)"
      },
      "publicSaleStartTime": {
        "details": "When the Public sale will begin (if zero, means sale has not been initialized)"
      },
      "publicTokenUnitPrice": {
        "details": "Unit price of tokens for Public sale"
      },
      "purchasedAmount": {
        "details": "Amount of NFTs that have been purchased so far"
      },
      "thresholds": {
        "details": "Calculated pseudo-random number should fall in range to acquire a certain Pioneer"
      },
      "userAirdropNonce": {
        "details": "Which Airdrop an user has participated"
      },
      "userPrivateClaimed": {
        "details": "How many tokens users have claimed during private sale"
      },
      "userWhitelistPurchasedAmount": {
        "details": "How many tokens the whitelisted users have claimed"
      },
      "whitelistMerkleRoot": {
        "details": "Whitelist Merkle Root (can be set once)"
      },
      "whitelistTokenUnitPrice": {
        "details": "Unit prie of tokens for Whitelisted sale"
      }
    },
    "title": "HorizonDAO Pioneer NFT",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(uint256,address,uint256)": {
        "notice": "Approve a spender to transfer tokens"
      },
      "claimAirdrop(uint256,bytes32[])": {
        "notice": "Claim airdrop"
      },
      "collectionDescription(uint256)": {
        "notice": "Get collection description"
      },
      "collectionMetadata(uint256)": {
        "notice": "Returns the stringified metadata JSON for a given collection"
      },
      "collectionName(uint256)": {
        "notice": "Get collection name"
      },
      "contractURI()": {
        "notice": "Contract level metadata to define collection name, description, and royalty fees.         see https://docs.opensea.io/docs/contract-level-metadata"
      },
      "imageURI(uint256)": {
        "notice": "Get the image URI for a given collection"
      },
      "isOwner(address)": {
        "notice": "Checks if the address supplied is an \"owner\" of the smart contract      Note: an \"owner\" doesn't have any authority on the smart contract and is \"nominal\""
      },
      "privateClaim(bytes32[])": {
        "notice": "Claim private whitelisted tokens"
      },
      "publicPurchase(uint256)": {
        "notice": "Purchase Pioneer NFTs randomly from the 3 collections (Bronze, Silver and Gold)"
      },
      "publicSaleStarted()": {
        "notice": "Whether public sale started"
      },
      "royaltyInfo(uint256,uint256)": {
        "notice": "EIP-2981 function to calculate royalties for sales in secondary marketplaces.         see https://eips.ethereum.org/EIPS/eip-2981"
      },
      "royaltyPercentage()": {
        "notice": "Percentage of token sale price to be used for EIP-2981 royalties from secondary sales         see https://eips.ethereum.org/EIPS/eip-2981"
      },
      "royaltyReceiver()": {
        "notice": "Address to receive EIP-2981 royalties from secondary sales         see https://eips.ethereum.org/EIPS/eip-2981"
      },
      "saleInitialized()": {
        "notice": "Whether the sale has been initialized"
      },
      "uri(uint256)": {
        "notice": "Returns the Base64 encoded metadata for a given collection"
      },
      "whitelistPurchase(uint256,bytes32[])": {
        "notice": "Purchase whilelisted tokens (maximum amount: WHITELIST_PURCHASE_PER_ADDRESS)"
      }
    },
    "notice": "NFTs owned by HorizonDAO pioneer membersHolding these NFTs will accrue into various rewards     during HorizonDAO development, such as, for example Airdrops",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 159,
        "contract": "contracts/token/PioneerERC1155.sol:PioneerERC1155",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 165,
        "contract": "contracts/token/PioneerERC1155.sol:PioneerERC1155",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 167,
        "contract": "contracts/token/PioneerERC1155.sol:PioneerERC1155",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1529,
        "contract": "contracts/token/PioneerERC1155.sol:PioneerERC1155",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6724,
        "contract": "contracts/token/PioneerERC1155.sol:PioneerERC1155",
        "label": "_allowances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 6462,
        "contract": "contracts/token/PioneerERC1155.sol:PioneerERC1155",
        "label": "owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 6465,
        "contract": "contracts/token/PioneerERC1155.sol:PioneerERC1155",
        "label": "admin",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 6468,
        "contract": "contracts/token/PioneerERC1155.sol:PioneerERC1155",
        "label": "royaltyReceiver",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 6471,
        "contract": "contracts/token/PioneerERC1155.sol:PioneerERC1155",
        "label": "royaltyPercentage",
        "offset": 20,
        "slot": "7",
        "type": "t_uint16"
      },
      {
        "astId": 6474,
        "contract": "contracts/token/PioneerERC1155.sol:PioneerERC1155",
        "label": "contractURI",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 5406,
        "contract": "contracts/token/PioneerERC1155.sol:PioneerERC1155",
        "label": "purchasedAmount",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 5412,
        "contract": "contracts/token/PioneerERC1155.sol:PioneerERC1155",
        "label": "thresholds",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_enum(Pioneer)5369,t_uint256)"
      },
      {
        "astId": 5415,
        "contract": "contracts/token/PioneerERC1155.sol:PioneerERC1155",
        "label": "privateMerkleRoot",
        "offset": 0,
        "slot": "11",
        "type": "t_bytes32"
      },
      {
        "astId": 5418,
        "contract": "contracts/token/PioneerERC1155.sol:PioneerERC1155",
        "label": "whitelistMerkleRoot",
        "offset": 0,
        "slot": "12",
        "type": "t_bytes32"
      },
      {
        "astId": 5421,
        "contract": "contracts/token/PioneerERC1155.sol:PioneerERC1155",
        "label": "airdropMerkleRoot",
        "offset": 0,
        "slot": "13",
        "type": "t_bytes32"
      },
      {
        "astId": 5426,
        "contract": "contracts/token/PioneerERC1155.sol:PioneerERC1155",
        "label": "userPrivateClaimed",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5431,
        "contract": "contracts/token/PioneerERC1155.sol:PioneerERC1155",
        "label": "userWhitelistPurchasedAmount",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5436,
        "contract": "contracts/token/PioneerERC1155.sol:PioneerERC1155",
        "label": "userAirdropNonce",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5439,
        "contract": "contracts/token/PioneerERC1155.sol:PioneerERC1155",
        "label": "airdropNonce",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 5442,
        "contract": "contracts/token/PioneerERC1155.sol:PioneerERC1155",
        "label": "airdropClaimed",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 5445,
        "contract": "contracts/token/PioneerERC1155.sol:PioneerERC1155",
        "label": "publicSaleStartTime",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(Pioneer)5369": {
        "encoding": "inplace",
        "label": "enum PioneerERC1155.Pioneer",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(Pioneer)5369,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(Pioneer)5369",
        "label": "mapping(enum PioneerERC1155.Pioneer => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
